<languages/>

{{TutorialInfo/pl
|Topic=Poradnik do natywnego IFC
|Level=średnio zaawansowany/zaawansowany
|Time=60 minut
|Author=yorik
|FCVersion=1.0
|Files=
}}

<span id="FreeCAD_and_native_IFC_tutorial"></span>
== FreeCAD i poradnik do natywnego IFC ==

[[Image:Nativeifc-tutorial-01.jpg]]

[https://freecad.org FreeCAD], darmowa i otwartoźródłowa (FOSS) platforma do modelowania CAD 3D, od wielu lat oferuje narzędzia [https://pl.wikipedia.org/wiki/Building_Information_Modeling BIM] w środowisku pracy Arch. Począwszy od wersji 1.0, wydanej w listopadzie 2024 roku, narzędzia Arch zostały rozszerzone i przemianowane na [[BIM_Workbench/pl|środowisko pracy BIM]], wzbogacone o nowy natywny system IFC. Ten poradnik przeprowadzi Cię przez różne koncepcje stosowane w natywnym IFC oraz pokaże, jak zastosować je na przykładowym modelu.

<span id="The_IFC_format"></span>
=== Format IFC ===

Nie sposób zacząć rozmowy o natywnym IFC bez wspomnienia o [https://en.wikipedia.org/wiki/Industry_Foundation_Classes Industry Foundation Classes], znanym lepiej jako IFC. IFC to format pliku, ale także, co ważniejsze, format danych. Jest to standard (zarejestrowana norma ISO) określający, w jaki sposób różne elementy budynku powinny być reprezentowane cyfrowo, jakie właściwości powinny posiadać oraz jakie relacje mogą lub powinny mieć z innymi elementami. Krótko mówiąc, jest to przepis na cyfrowy opis budynku.

Format IFC posiada wiele interesujących cech. Przede wszystkim jest otwarty i publiczny (utrzymywany przez konsorcjum, podobnie jak format HTML), wywodzi się z formatu STEP — dobrze znanego, niezawodnego formatu geometrii 3D szeroko stosowanego w przemyśle mechanicznym, jest czytelny dla człowieka (można go otworzyć w edytorze tekstu), a dane mogą być zapisywane nie tylko w jednym, ale w kilku formatach plików, a nawet wykorzystywane jako baza danych.

Te cechy czynią ten format niezawodnym pod względem geometrii, dzięki jego "przodkowi" STEP, a także bardzo rozsądnym wyborem do przechowywania danych, ponieważ nawet za 50 lat będzie można otworzyć pliki IFC i odzyskać dane, nawet jeśli Twoja aplikacja BIM zniknie. Pliki IFC stają się również coraz częściej preferowanym formatem wymaganym przez władze przy składaniu wniosków o pozwolenia budowlane.

Do tej pory format IFC był głównie używany jako format ''eksportu''. Projektanci nadal zapisywali swoje projekty w natywnym formacie plików swojej aplikacji BIM, a pliki IFC eksportowali w razie potrzeby. To wystarczające, aby zaprezentować swoją pracę, ale bardzo problematyczne, gdy inni muszą pracować na tym modelu, ponieważ dochodzi do dużej utraty danych, a przy każdym eksporcie dane są całkowicie przepisywane. Korzystanie z nowej wersji modelu bywa więc dla innych prawdziwym utrapieniem.

Dzięki natywnemu IFC chcemy to zmienić.

<span id="The_native_IFC_concept"></span>
=== Koncepcja natywnego IFC ===

Pomysł pochodzi z [https://github.com/brunopostle/ifcmerge/blob/main/docs/whitepaper.rst pracy Bruno Postle], która opisuje, jak format IFC mógłby być wykorzystywany nie tylko jako format eksportu, ale także jako główny plik projektu, zamiast (zwykle zastrzeżonych) formatów stosowanych przez aplikacje BIM. Aby to osiągnąć, kluczowe jest, aby aplikacje BIM obsługiwały format IFC natywnie — zamiast każdorazowego konwertowania własnej zawartości z wewnętrznego formatu do IFC, powinny bezpośrednio manipulować danymi IFC.

[[Image:Nativeifc-tutorial-02.jpg]]

{{Caption|rysunek z pracy Bruno Postle}}

Konkretne w FreeCAD można otwierać lub tworzyć modele IFC, eksplorować je, modyfikować ich zawartość, a każda zmiana będzie wyraźnie zarejestrowana, możliwa do zlokalizowania, zidentyfikowania i cofnięcia. Zmiany dokonane przez innych podczas Twojej pracy mogą zostać scalone, nawet jeśli korzystają z innych aplikacji (z natywnym IFC).

[[Image:Nativeifc-tutorial-03.jpg]]

{{Caption|Powyższy rysunek przedstawia zwartą i ograniczoną zmianę pliku podczas dodawania nowej ściany}}

Praca nad natywnym IFC we FreeCAD nie jest jeszcze zakończona, ale jest już całkowicie użyteczna "do prawdziwej pracy". Jeśli już znasz narzędzia BIM we FreeCAD, musisz nauczyć się bardzo niewiele, ponieważ większość podejść korzysta z tych samych narzędzi.

<span id="Do_I_need_IFC?"></span>
=== Czy potrzebuję IFC? ===

Decyzja należy do Ciebie. IFC to surowy format, w którym każdy element (ściana, piętro, okno) ma bardzo ścisłe atrybuty i cechy, których nie można modyfikować. Ta standaryzacja zapewnia jego kompatybilność i niezawodność. Oznacza to również, że "nie możesz robić, czego chcesz" z IFC. Musisz przestrzegać tego, co format definiuje. To jest pożądane i doskonałe podczas pracy z innymi, ponieważ dokładnie tego oczekujemy od ''standardu''. Istnieją gwarancje dotyczące tego, co znajdziesz po otwarciu pliku IFC, ale oczywiście może to również ograniczać kreatywność.

Jednym z aksjomatów środowiska pracy BIM we FreeCAD jest brak ograniczeń dla kreatywności. Możliwe jest wszystko, każda forma geometryczna, każde parametryczne powiązanie. Pracując w środowisku pracy BIM bez natywnego IFC, ta wolność jest w zasięgu ręki. Włączając natywne IFC, ta wolność staje się ograniczona. Czy to dobre, czy złe dla Twojego projektu? To zależy.

Osobiście zalecałbym pracować bez IFC, gdy pracujesz samodzielnie i nadal rozwijasz koncepcje, aby skorzystać z maksymalnej wolności. Gdy projekt się ustabilizuje i zaangażują się inni, to może być moment, aby przejść na natywne IFC, aby skorzystać ze standaryzacji. Pamiętaj, że możesz przełączyć się w dowolnym momencie lub nawet wyeksportować swój projekt nienatywny do IFC w dowolnym czasie. Rzadko jest konieczne, aby od razu zaczynać od natywnego IFC.

<span id="Opening_and_creating_IFC_models"></span>
== Otwieranie i tworzenie modeli IFC ==

<span id="Finding_and_viewing_IFC_models"></span>
=== Wyszukiwanie i przeglądanie modeli IFC ===

Jeśli nigdy wcześniej nie pracowałeś z IFC, warto zacząć od dokładnego zapoznania się z kilkoma przykładowymi modelami. Jako format otwarty, na szczęście przykładowe modele są bardzo łatwe do znalezienia w internecie. Proste wyszukiwanie "przykładowe modele IFC" pozwoli Ci szybko dotrzeć do materiałów. Sugeruję na przykład ten [https://github.com/buildingSMART/Sample-Test-Files/tree/main/PCERT-Sample-Scene/IFC%204.0.2.1%20(IFC%204) kanoniczny przykład domu] udostępniony przez konsorcjum IFC, ale wiele stron internetowych zgromadziło kolekcje przykładowych plików, jak na przykład [https://bimplot.com/free-ifc-project-samples-for-architects-and-bim-enthusists/ ta na BIMPlot].

[[Image:Nativeifc-tutorial-04.jpg]]

Istnieje wiele aplikacji do przeglądania plików IFC. Niektóre są tylko darmowe, a niektóre są nawet darmowe i otwartoźródłowe (FOSS). Wśród komercyjnych, ale darmowych przeglądarek IFC, dobrymi opcjami są [https://bimvision.eu/ BIMVision] lub [https://openifcviewer.com/ przeglądarka ODA IFC] (działająca na Win/Mac/Linux). Wśród przeglądarek FOSS, prostą, którą często używam, jest [http://www.ifcquery.com/ IFC++], która jest dostępna w repozytoriach Debian/Ubuntu. Zarówno [https://freecad.org FreeCAD], jak i [https://bonsaibim.org Bonsai] są również dobrymi i szybkimi przeglądarkami IFC.

Możliwość otwierania i przeglądania plików IFC w innej aplikacji jest kluczowa podczas pracy z plikami IFC, ponieważ pozwala na podwójne sprawdzenie, czy to, co wysyłasz do współpracowników lub klientów, zawiera wszystko, co powinno.

<span id="What_makes_a_good_IFC_model"></span>
=== Co sprawia, że model IFC jest dobry ===

Format IFC jest skomplikowany, a aplikacje BIM, nawet te najdroższe komercyjne, są powszechnie złe lub bardzo złe w obsłudze plików IFC. Dlatego wyniki mogą się różnić, pliki IFC, z którymi się spotkasz, mogą mieć bardzo słabą jakość i być pełne niepotrzebnych danych, czasami do tego stopnia, że są ledwo użyteczne. Często wykorzystywano to przez zwolenników zastrzeżonych aplikacji BIM, aby zdyskredytować format IFC i próbować wykazać jego nieskuteczność.

Tworzenie wysokiej jakości modeli IFC nie jest jednak trudne. Ale wymaga to aplikacji, która traktuje ten format poważnie i pozostawia użytkownikowi kontrolę nad tym, co jest eksportowane i w jaki sposób.

Jest kilka rzeczy, które powinieneś wiedzieć:

<ul>
<li><p>Jak dziedziczy po formacie STEP, plik IFC jest '''plikiem tekstowym''', w którym każda linia reprezentuje element i zaczyna się od numeru ID. Na przykład:</p>
<pre>#66=IFCWALL('3JmWkr',$,'MyWall',$,$,(#71),$,$,$,.SOLIDWALL.);</pre>
<p>Powyższa linia definiuje element klasy '''IfcWall''', o ID 66. Elementy wewnątrz nawiasów to jego atrybuty. Więcej o atrybutach poniżej.</p>
<p>Ważnym elementem jest '''klasa''' (jak w ''Industry Foundation Classes''). Każdy element ma klasę, która definiuje typ elementu: Ściana, okno, ale także piętro, przestrzeń, a nawet linia, okrąg, punkt w przestrzeni 3D, a nawet pojęcia takie jak moment w czasie czy zadanie do wykonania. Najbardziej użyteczne klasy IFC dla elementów budowlanych pochodzą z klasy [https://standards.buildingsmart.org/IFC/RELEASE/IFC4_1/FINAL/HTML/schema/ifcproductextension/lexical/ifcbuildingelement.htm IfcBuildingElement].</p></li>
<li><p>Modele IFC zwykle przestrzegają '''sztywnej struktury''': W każdym pliku powinien znajdować się tylko jeden '''IfcProject'''. [https://ifc43-docs.standards.buildingsmart.org/IFC/RELEASE/IFC4x3/HTML/lexical/IfcProject.htm IfcProject] to korzeń wszystkich obiektów w modelu IFC. Pod IfcProject zazwyczaj znajduje się co najmniej jedno '''IfcSite''', które może zawierać jeden lub więcej '''IfcBuildings''', które z kolei są podzielone na '''IfcBuildingStoreys'''. Te mogą być dalej dzielone na '''IfcZones''' i '''IfcSpaces'''.</p></li>
<li><p>Elementy budowlane, takie jak '''IfcWalls''' lub '''IfcWindows''', są następnie '''powiązane''' z jedną ze struktur powyżej, zazwyczaj z IfcBuildingStorey, ale mogą być również powiązane z innym elementem budowlanym, tak więc jeden element może składać się z kilku innych. Te relacje są zawsze wyraźnie określone w plikach IFC, nigdy nie są automatyczne ani domyślne.</p></li>
<li><p>Elementy IFC, czy to elementy budowlane, takie jak ściany czy okna, czy elementy strukturalne, takie jak miejsca i piętra, czy jakiekolwiek inne [https://ifc43-docs.standards.buildingsmart.org/IFC/RELEASE/IFC4x3/HTML/annex-b1.html klasy elementów] oferowane przez format IFC, wszystkie mają zdefiniowany zestaw '''atrybutów'''. Atrybuty to takie rzeczy jak nazwa, pozycja w przestrzeni czy unikalny numer ID, które są zdefiniowane w formacie. Wszystkie encje tej samej klasy muszą mieć te same atrybuty. Elementy mogą również mieć '''właściwości'''. W przeciwieństwie do atrybutów, właściwości nie są zdefiniowane przez format IFC i mogą być swobodnie definiowane przez użytkownika (lub aplikację BIM). Można je traktować jako niestandardowe atrybuty. Format IFC proponuje również domyślne zestawy właściwości dla wielu klas elementów. Na przykład, dla belek, istnieje zestaw o nazwie [https://ifc43-docs.standards.buildingsmart.org/IFC/RELEASE/IFC4x3/HTML/lexical/Pset_BeamCommon.htm BimCommon], który zawiera szereg właściwości typowych dla belek.</p></li>
<li><p>'''Geometria''' elementów IFC jest definiowana w oddzielnych elementach, które są przypisane do każdej ściany, okna, drzwi itd. Może być również współdzielona przez kilka elementów. Istnieje wiele sposobów definiowania geometrii, i to tam zaczynają się problemy. Elementy budowlane mogą mieć zarówno geometrię 3D, jak i 2D (na przykład widok z planu lub kontur), a także na przykład geometrię liniową (przydatną w badaniach stabilności). Dobra geometria jest zazwyczaj dobrze zdefiniowana i sensownie skonstruowana. Na przykład geometria prostej ściany byłaby zdefiniowana jako prostokąt na ziemi, o szerokości i długości, który następnie jest wyciągany w górę o daną wysokość, tworząc kształt ściany. To trzy linie w pliku IFC: Prostokąt, wyciągnięcie i pozycja ostatecznego obiektu. Jest to rozpoznawane przez inne aplikacje BIM, a parametry mogą być zmieniane, na przykład szerokość podstawowego prostokąta.</p></li>
<li><p>W niektórych plikach IFC, które możesz otrzymać, ta logiczna informacja może zostać całkowicie utracona, a geometria ściany może być zdefiniowana jako zbiór trójkątnych powierzchni. Często zdarza się to w plikach, które zostały przekonwertowane na IFC z innego formatu. Mogą wystąpić dalsze problemy, takie jak niekompletne relacje itp. Wystarczy powiedzieć, że format IFC pozwala na ogromny zakres sposobów definiowania geometrii, od ''najprostszych'' (trójkątnych powierzchni) po ''najbardziej zaawansowane'' (obiekty oparte na NURBS), z dużym naciskiem na dobrze zdefiniowane bryły (takie jak nasz wyciągnięty prostokąt). Na szczęście dla nas, to specjalność FreeCAD.</p></li>
</ul>

<span id="Opening,_creating_and_converting_IFC_models"></span>
=== Otwieranie, tworzenie i konwersja modeli IFC ===

We FreeCAD otwieranie pliku IFC odbywa się tak samo jak każdego innego pliku, przez menu '''Plik → Otwórz'''. Domyślnie pliki IFC będą ładowane z tylko jednym elementem pojawiającym się w '''Widoku drzewa'''. Jest to najszybszy sposób importu, i zazwyczaj model o wielkości 100 MB można załadować w kilka sekund.

[[Image:Nativeifc-tutorial-05.jpg]]

Możesz zmienić preferencje importu natywnego IFC w '''Edycja → Preferencje → BIM → Natywne IFC'''. Możesz na przykład ustawić, aby cała struktura budynku była ujawniana przy imporcie lub aby system pytał o to za każdym razem.

Tworzenie nowego modelu IFC zaczyna się po prostu od utworzenia nowego projektu IFC w menu '''3D/BIM'''.

Konwertowanie modelu FreeCAD, który nie jest w formacie IFC, na natywny IFC można wykonać po prostu eksportując go do formatu IFC, za pomocą menu '''Plik → Eksportuj''' lub używając przycisku blokady (więcej o tym poniżej).


<span id="Exploring_the_model"></span>
== Eksplorowanie modelu ==

<span id="Expanding_model_contents"></span>
== Rozszerzanie zawartości modelu ==

Domyślnie, otwierając pliki IFC, wyświetlany jest tylko pierwszy, zewnętrzny element pliku. Zwykle jest to IfcSite. Aby zobaczyć zawartość tego elementu oraz kolejnych, należy go '''rozwinąć'''. Rozwijanie odbywa się przez '''podwójne kliknięcie elementu w Widoku drzewa''' lub alternatywnie, poprzez opcję menu '''Narzędzia → Rozwiń IFC'''. Ta komenda może być [[Interface_Customization/pl|dostosowana]] i przypisana do skrótu klawiaturowego, dzięki czemu możliwe jest poruszanie się po Widoku drzewa za pomocą strzałek i rozwijanie modelu w razie potrzeby, używając wyłącznie klawiatury.

[[Image:Nativeifc-tutorial-06.jpg]]

Podwójne kliknięcie elementu w Widoku drzewa spowoduje, że za pierwszym razem zostaną ujawnione jego dzieci, a za drugim razem, lub jeśli nie ma więcej dzieci do ujawnienia, '''załadowane zostaną jego pełne właściwości, materiały i kształt'''.

Pozwala to na jak najszybsze załadowanie modelu oraz rozszerzanie/definiowanie elementów w razie potrzeby. Możesz zmienić to zachowanie w '''Edycja → Preferencje → BIM → Natywne IFC'''.

<span id="Locking_and_unlocking"></span>
=== Blokowanie i odblokowywanie ===

Kiedy model IFC jest załadowany w FreeCAD, może być zablokowany lub odblokowany. Domyślnie, otwieranie plików IFC spowoduje ich zablokowanie, podczas gdy importowanie ich (za pomocą '''Plik → Importuj''') pozostawi je odblokowane.

Blokowanie lub odblokowywanie odbywa się po prostu za pomocą przycisku blokady na pasku stanu w FreeCAD:

[[Image:Nativeifc-tutorial-07.jpg]]

* '''Tryb zablokowany''' oznacza, że dokument FreeCAD JEST plikiem IFC. Nie widzisz IfcProject (jest to sam dokument FreeCAD w Widoku drzewa), a wszystko, co robisz w tym dokumencie, jest automatycznie, przezroczysto i natychmiastowo robione w danych IFC. Dodanie ściany zmieni plik IFC, tak samo jak dodanie linii czy wymiaru, wszystko odbywa się w IFC. Nie możesz mieć żadnych elementów FreeCAD w dokumencie, które nie są częścią pliku IFC. Możesz przekonwertować każdy model FreeCAD (BIM lub nie) na IFC, klikając przycisk blokady.
* '''Tryb odblokowany''', zwany także trybem hybrydowym, oznacza, że projekt IFC znajduje się w obiekcie '''projekt'''. Możesz nadal mieć normalne, niefunkcjonujące w IFC obiekty FreeCAD obok elementów IFC. Aby dodać element do projektu IFC, musisz dodać go samodzielnie, przeciągając go na projekt lub jeden z pod-elementów projektu. Możesz utworzyć nowy, pusty projekt IFC za pomocą menu '''3D/BIM → Projekt'''.
* '''Praca bez projektu IFC''': Pamiętaj, że nie musisz tworzyć projektu IFC, aby rozpocząć projekt BIM (można to zrobić w dowolnym momencie później, jeśli zajdzie taka potrzeba). Możesz po prostu zacząć budować ściany, dodawać piętra i dachy, bez definiowania struktury IFC lub nawet bez zajmowania się IFC.

Tryb zablokowany oznacza tryb ostrożności: Kiedy otwierasz plik stworzony przez kogoś innego, nie chcesz niczego zepsuć, chcesz zbadać plik, a może naprawić coś lub dokonać kilku lokalnych zmian. Chcesz mieć pewność, że wprowadzone zmiany są ściśle określone i możliwe do śledzenia.

We wszystkich innych przypadkach nie ma rzeczywistej potrzeby ani korzyści zablokowania modelu. W rzeczywistości, możesz zmienić domyślne zachowanie, aby otwierać modele IFC w trybie odblokowanym, jeśli wolisz, w '''Edycja → Preferencje → BIM → Natywne IFC'''.

Przy przechodzeniu na model IFC, często chcesz zweryfikować '''co zostało zmienione w danych IFC''' od ostatniego zapisania. Robi się to za pomocą '''Narzędzia → Różnice IFC''' (lub klikając prawym przyciskiem myszy na projekt w Widoku drzewa i wybierając '''IFC → Diff'''). Zmiany są prezentowane w formacie [https://pl.wikipedia.org/wiki/Diff diff], z sekcjami wyróżnionymi na czerwono i zielono. Ten format jest również zrozumiały dla systemów komputerowych, takich jak Git, które potrafią śledzić duże zestawy zmian, przez co twoje pliki IFC stają się obiektami pierwszoklasowymi takich systemów.

[[Image:Nativeifc-tutorial-08.jpg]]

<span id="Model_structure"></span>
=== Struktura modelu ===

Jak wspomniano powyżej, większość plików IFC korzysta ze standardowej struktury '''Site → Building → Storey'''. Jest to tak powszechne, że często uważa się to za obowiązkowe, choć nie jest to wyraźnie określone w standardzie IFC. Można równie dobrze mieć wszystkie elementy bezpośrednio powiązane z IfcProject. Jednakże, ponieważ standaryzacja działa, gdy wszyscy decydują się używać tego samego systemu, zaleca się, aby w modelu znajdowało się przynajmniej jedno miejsce (site), jeden budynek i jedno piętro (nazywane '''Level''' we FreeCAD).

[[Image:Nativeifc-tutorial-09.jpg]]

We FreeCAD można używać '''Grup''' do dalszej organizacji obiektów w obrębie poziomu. Na przykład, w obrębie pierwszego piętra, można utworzyć grupę 'Walls' do dodania wszystkich ścian, grupę 'Carpentry' do dodania drewnianych belek, itd. Grupy są obsługiwane przez IFC, jednakże nie jest standardem umieszczanie grup wewnątrz elementów strukturalnych budynku, takich jak piętro. Z tego powodu grupy domyślnie są zapisywane jako '''IfcBuildingElementAssemblies''' zamiast IfcGroups. We FreeCAD jednak wierzymy, że takie zachowanie jest przydatne i powinno być dozwolone. Dlatego istnieje opcja preferencji, która na to pozwala. Większość aplikacji BIM z powodzeniem otworzy pliki z grupami wewnątrz innych elementów. Ta opcja preferencji ma na celu szerzenie naszej wizji i ewentualne przekonanie innych.

Zaczynajmy więc od praktyki i rozpracowania naszego modelu...

<span id="Adding_and_modifying_elements"></span>
== Dodawanie i modyfikowanie elementów ==

<span id="Modifying_attributes_and_properties"></span>
=== Modyfikowanie atrybutów i właściwości ===

Po otwarciu modelu możemy zacząć modyfikować jego zawartość. Należy jednak pamiętać, że w momencie pisania tego poradnika, nie ma '''graficznego edytora geometrii''' dla elementów IFC (choć znajduje się to na liście planów i powinien pojawić się wkrótce). Sposób modyfikacji geometrii elementów polega na edytowaniu ich '''właściwości geometrycznych'''.

Gdy elementy IFC są ładowane z pliku, ich atrybuty są wyświetlane w [[Property_editor/pl|edytorze właściwości]] w grupie '''IFC'''. Tam można zmieniać takie rzeczy, jak nazwa, opis, a nawet klasa elementów.

Podwójne kliknięcie elementu w widoku drzewa spowoduje najpierw ujawnienie elementów podrzędnych tego elementu. Podwójne kliknięcie po raz drugi załaduje dodatkowe dane, takie jak '''zbiory właściwości''', '''własne właściwości''', '''materiały''' i '''dane kształtu'''. Dodatkowo utworzy zestaw '''właściwości geometrii''', które pozwolą na modyfikację geometrii tego elementu. Te właściwości geometrii tworzą również podstawy przyszłego edytora graficznego.

[[Image:Nativeifc-tutorial-10.jpg]]

Wszystkie te dodatkowe właściwości można zmieniać bezpośrednio, a nowe własne właściwości można dodać za pomocą dwóch przycisków znajdujących się pod edytorem właściwości.

<span id="Modifying_geometry"></span>
=== Modyfikowanie geometrii ===

Możesz zmienić pozycję dowolnego elementu, zmieniając jego właściwość '''Umiejscowienie''' (lub używając narzędzi [[Draft_Move/pl|Przesuń]] lub [[Draft_Rotate/pl|Obróć]]).

Aby zmodyfikować geometrię, na przykład szerokość ściany, musisz najpierw dwukrotnie kliknąć, aby ujawnić jej '''właściwości geometrii'''. Jeśli ta ściana została skonstruowana w standardowy sposób, jako wyciągnięty prostokąt, zobaczysz szerokość i długość prostokąta, a także wysokość wyciągnięcia wśród tych właściwości.

Oczywiście, wszystko zależy od tego, jak ściana została zdefiniowana w pliku IFC. Może to nie być wyciągnięty prostokąt. W takim przypadku dostępnych może być mniej lub inne właściwości geometrii.

<span id="Adding_new_BIM_objects"></span>
=== Dodawanie nowych obiektów BIM ===

Sposób dodawania nowych obiektów zależy od bieżącego trybu: zablokowanego lub odblokowanego. W trybie zablokowanym wszystko, co narysujesz, takie jak ściana lub kolumna, jest automatycznie tworzone w samym pliku IFC. Może być konieczne przypisanie jej do odpowiedniego poziomu lub budynku po utworzeniu, co odbywa się po prostu przez przeciągnięcie nowej ściany do odpowiedniego poziomu w widoku drzewa.

W trybie odblokowanym, twoja nowa ściana nie będzie jeszcze elementem IFC. Zawsze musisz ręcznie przeciągnąć ścianę w odpowiednie miejsce po jej utworzeniu.

<span id="Types"></span>
=== Typy ===

W IFC, każdy element może być zdefiniowany przez [https://standards.buildingsmart.org/IFC/RELEASE/IFC4_1/FINAL/HTML/schema/ifckernel/lexical/ifctypeproduct.htm typ]. Typ (np. IfcWallType, IfcWindowType) to element IFC, który może zawierać wspólne cechy, właściwości, a nawet geometrię, które będą automatycznie używane przez wszystkie obiekty tego typu. W niektórych aplikacjach BIM, jest to czasem określane jako rodziny.

We FreeCAD, w projektach BIM bez IFC, zwykle robiliśmy to za pomocą klonowania. W natywnym IFC, pełne wsparcie dla typów jest dostępne. Aby zdefiniować typ, najłatwiej jest zbudować obiekt pożądanej klasy, na przykład ścianę, a następnie kliknąć prawym przyciskiem myszy na obiekcie w widoku drzewa i wybrać '''IFC → konwertuj na typ'''.

<div lang="en" dir="ltr" class="mw-content-ltr">
When an object is converted to a type, it is moved to a special ''Types'' group under the project. It can then be referenced by any other wall in the project.
</div>

[[Image:Nativeifc-tutorial-11.jpg]]

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Caption|The above image shows our wall that is now using the 'My Wall Type' as its type}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Adding downloadable contents ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In a BIM project, one often needs to add downloadable contents, such as pieces of furniture, appliances or elements such as prefabricated window frames. These elements are typically downloaded from manufacturers websites, or BIM library websites.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In all those cases, the quality and format of the elements you download, are of importance. You should care (in that order) about using a file format well supported by FreeCAD, getting models with good geometric quality, and enough metadata (color, materials, manufacturer info, etc…). Some good ideas are:
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* STEP files from [https://grabcad.com/library?page=1&time=this_month&sort=popular&softwares=step-slash-iges GrabCAD]: STEP files are very well supported by FreeCAD and usually always contain high-quality geometry, as it is a favorite engineering format. They usually convert very well to IFC too.
* IFC files from model libraries like [https://bimobject.com BIMObject]: While using the IFC format might sound interesting, the IFC files made available by these website are often converted automatically from other (proprietary) formats, and the quality can be very low.
* Exporting models from BIM proprietary applications such as Revit or ArchiCAD to the SAT format, and open these in FreeCAD using the [https://github.com/jmplonka/InventorLoader Inventor Loader] addon (installable from the [[Std_AddonMgr|Addon manager]]). While these applications will allow to export parts and elements to IFC, they will often degrade the geometry. Exporting types and families to SAT format often gives a similar quality as STEP files. The Inventor Loader, though, is a work in progress and might not work with each and every file.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Saving and handling files ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
A FreeCAD file containing a native IFC project, be it locked or unlocked, will always have an attached IFC file, where the IFC data is stored. When you create a new project, and you did not save the file yet, the IFC contents lives in the memory. As soon as you save the file, a companion IFC file is created and from now on attached to the FreeCAD file.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In '''locked mode''', the FreeCAD document contains in its ''IFC File Path'' property the path to the companion IFC file. Since everything that happens in FreeCAD happens directly in the IFC file, there is no more need of the FreeCAD file anymore. The 'Save' and 'Save as' entries in the FreeCAD file menu are replaced with 'Save file IFC' and 'Save IFC file as'. When you save the file, you will be saving the IFC file, and no FreeCAD file is written. Literally, you only work with the IFC file.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In '''unlocked mode''', a ''project'' object exists in the FreeCAD document, that also has a ''IFC file Path'' property that points to its companion IFC file. If you distribute your file to someone else, you will need to give them the IFC file too. If you move the IFC file, you will need to fix the ''IFC File Path'' property of the project object.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
It is possible to distribute the FreeCAD file without the IFC file, though: Set the ''Shape Mode'' property of all objects to 'Shape'. This will make the FreeCAD file retain the shape of all objects, and open correctly even if the IFC file is not present. The objects, however, will not be editable in that case.
</div>


<div lang="en" dir="ltr" class="mw-content-ltr">
== Creating output ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Creating views and 2D content ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
2D views, to be put on [[TechDraw_Workbench|TechDraw sheets]], can still be created the [[BIM_Workbench|same way as before]]: Adding [[Arch_SectionPlane|section planes]], creating [[BIM_Shape2DView|2D views]], filling them with annotations, then [[BIM_TDView|placing them]] on [[BIM_TDPage|sheets]]. The process is exactly the same with non-IFC BIM models as with native IFC models.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
By default, though, native IFC objects are loaded without their shape (their ''Shape Mode'' property is set to 'Coin'). This saves a lot of time when loading. But the cutting algorithms used to generate 2D views need the full shape, so when including native IFC objects in a section plane, their Shape Mode will automatically be set to 'Shape'.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
While the final sheet itself cannot currently be saved to the IFC file, the 2D views, section planes and their annotations can. When adding (by drag and dropping in unlocked mode, or automatically in locked mode) a section plane to a project, a group will automatically be created under the project. That group represents a 2D view (its ''Object Type'' property is set to 'DRAWING'), and everything you add to that group will be part of that 2D view.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
<div class="figure">
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
[[Image:Nativeifc-tutorial-12.jpg|Screenshot of a 2D view created from an IFC project]]
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
</div>
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Creating sheets ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
At the moment, sheets are not saved in the IFC file. So in case of locked files, the sheets will need to be recreated.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Creating schedules ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Schedules and all kinds of queries can be created the same way for native IFC as for non-IFC projects, using the [[Arch_Schedule|Schedule tool]]. Schedules can also be added to a native IFC project. In that case, their companion spreadsheet is not saved in the IFC file and must be re-created when opening the file.
</div>


<div lang="en" dir="ltr" class="mw-content-ltr">
== Python scripting ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== IfcOpenShell ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
[https://ifcopenshell.org/ IfcOpenShell] is the software component used in all IFC-related operations in FreeCAD. The BIM workbench can function without it, but in that case all IFC operations are disabled. IfcOpenShell is responsible for creating and modifying IFC files and IFC objects, as well as producing BREP geometry for the FreeCAD objects that represent IFC elements. FreeCAD currently uses IfcOpenShell only via its Python interface.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
IfcOpenShell offers a [https://docs.ifcopenshell.org/ broad documentation] that explains in detail how to use it.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
You can also use both IfcOpenShell and ifc_tools to manipulate IFC data directly. Below is a short example of how to use IfcOpenShell to open an IFC file and analyze its contents:
</div>

{{Code|code=
import ifcopenshell
my_ifc_file = ifcopenshell.open("/path/to/some/file.ifc")
walls = my_ifc_file.by_type("IfcWall") # get a list of all IfcWalls
some_specific_object = my_ifc_file[66] # get an object by its ID
some_specific_object = my_ifc_file.by_id(66) # alternative way
print(some_specific_object.Name) # you can access attributes that way
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
IfcOpenShell itself has no specific FreeCAD functionality (yet), so you would use it basically to do non-FreeCAD operations on objects, for example retrieve or modify objects and attributes, modify attributes, or even directly add objects. Be sure to have a look at the [https://docs.ifcopenshell.org/ifcopenshell-python.html IfcOpenShell Python documentation] to know more.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In FreeCAD, once you load an IFC file, an IfcOpenShell file object is created and attached to the project (the project object for unlocked files or the FreeCAD document itself for locked projects). Everything you do in FreeCAD actually manipulates that object. You can easily get access and manipulate the IfcOpenShell file object of a FreeCAD native IFC project. For example, in locked mode, you do:
</div>

{{Code|code=
import FreeCAD
my_doc = FreeCAD.loadFile("/path/to/some/file.ifc")
my_ifc_file = my_doc.Proxy.ifcfile
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
In unlocked mode, each project object also has a {{Incode|Proxy.ifcfile}} member.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== The ifc_tools module ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The [https://github.com/FreeCAD/FreeCAD/blob/main/src/Mod/BIM/nativeifc/ifc_tools.py ifc_tools] module is the main tool to use IfcOpenShell in FreeCAD's BIM module. It contains many tools and functions to do everything FreeCAD needs to do with IFC files and objects, such as creating new files, opening files, creating elements, modifying attributes, etc.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
When working with FreeCAD objects, using ifc_tools is much more convenient as it handles for you all the relationship between the FreeCAD object and the IFC object it represents. For example:
</div>

{{Code|code=
from nativeifc import ifc_tools
selection = FreeCADGui.Selection.getSelection()
my_obj = selection[0] # just get the first selected object
project = ifc_tools.get_project(my_obj)
ifcfile = ifc_tools.get_ifcfile(project)
ifc_elem = ifc_tools.get_ifc_element(my_obj)
my_obj.LongName = "Changed long name" # this updates the IFC data too
print(ifc_elem.LongName) 
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
There is much more in ifc_tools, such as utilities to create and modify FreeCAD objects (and their underlying IFC elements). Below are a few simple examples to get you started:
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Load the shape of selected objects ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
By default, opening an IFC file will only load a lightweight 3D representation of each element. To do more serious work with them, we might need to load their full shape:
</div>

{{Code|code=
for obj in FreeCADGui.Selection.getSelection():
    obj.ShapeMode = "Shape"
FreeCAD.ActiveDocument.recompute()
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Load the property sets of selected objects ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Property sets and their included properties are rendered as object properties in FreeCAD. Once they are loaded, you can simply manipulate the values through the properties editor in FreeCAD (or via Python):
</div>

{{Code|code=
from nativeifc import ifc_psets
for obj in FreeCADGui.Selection.getSelection():
    ifc_psets.show_psets(obj)
my_object.FireResistanceClass = "1B" # manipulate properties once loaded
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Saving an IFC file ====
</div>

{{Code|code=
ifc_tools.save(project)
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Add a new IFC document ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Use the '''Project''' tool from the [[BIM_Workbench|BIM workbench]] to produce a native IFC project object. It is not mandatory to save your new IFC project immediately, but it is a good practice anyway. If you forget to do so, you will get notified and be able to do it when saving the FreeCAD document.
</div>

{{Code|code=
doc = FreeCAD.ActiveDocument
new_project = ifc_tools.create_document(doc)
ifc_tools.save(new_project, "/path/for/our/new/file.ifc")
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Modifying the IFC class of an object ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Changing the class is very easy, one can simply select another one in the object's '''class''' property. Be warned, this might also change the predefined attributes of that object, so some attributes might vanish.
</div>

{{Code|code=
my_object.Class = "IfcWall"
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Aggregate (and convert) any FreeCAD object to an IFC project ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Suppose we built a new wall, and we need to add it to an IFC project. We can do that graphically by dragging it and dropping it onto the project in the tree view, but it is as easy in Python:
</div>

{{Code|code=
import Arch
my_new_wall = Arch.makeWall(None, 200, 20, 300)
ifc_tools.aggregate(my_new_wall, project)
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Add a new model structure ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
When creating a new project, you can also have a basic structure automatically created for you by answering 'yes' on the dialog that will pop up. But you can also easily do that in Python:
</div>

{{Code|code=
import Arch
doc = FreeCAD.ActiveDocument
project = ifc_tools.create_document(doc)
site = Arch.makeSite()
site = ifc_tools.aggregate(site, project)
building = Arch.makeBuilding()
building = ifc_tools.aggregate(building, site)
level = Arch.makeFloor()
level = ifc_tools.aggregate(floor, building)
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Change the schema of an IFC document ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Simply change the 'Schema' property of the project. Be warned, this can have deep consequences (some object types might have changed in the new schema version), so use with care and check your data afterwards.
</div>

{{Code|code=
project.Schema = "IFC4"
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
There is much more to explore, as more functionality is available through the different [https://github.com/FreeCAD/FreeCAD/tree/main/src/Mod/BIM/nativeifc native IFC submodules], each one provides tools to deal with a certain aspect of IFC (property sets, geometry, layers…). Be sure to explore them if needed!
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
I hope you now have a good idea of where to start and what can be done with native IFC in FreeCAD. Be sure to head to the [https://forum.freecad.org/viewforum.php?f=23 BIM section on the FreeCAD forum] if you need some help!
</div>