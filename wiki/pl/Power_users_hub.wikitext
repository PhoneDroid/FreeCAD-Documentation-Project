<languages/>
{{TOCright}}
[[Image:Power_user_hub.png|64px]]
----

To jest miejsce, do którego możesz przyjść, jeśli jesteś doświadczonym użytkownikiem i chcesz dowiedzieć się więcej o dostosowywaniu i rozszerzaniu funkcjonalności programu FreeCAD.

FreeCAD jest rozszerzalny o kod [[Python|Python]], który jest uruchamiany bezpośrednio w [[Python_console|konsoli Python]], lub który jest ładowany z modułów podczas uruchamiania. Oznacza to, że możesz modyfikować FreeCAD bez konieczności rekompilacji programu. Na przykład, możesz:
* '''Tworzyć i modyfikować geometrie''': można utworzyć nowy typ obiektu, od podstaw lub poprzez dostosowanie istniejącego typu.
* '''Tworzyć własne narzędzia i polecenia''': Dodaj swój własny zestaw narzędzi pozwalających uruchamiać kod.
* '''Modyfikacja interfejsu''': tworzyć paski narzędzi do umieszczania swoich narzędzi, tworzyć specjalne okna, panele lub interfejsy do interakcji z narzędziami.
*'''Modyfikuj reprezentację sceny''': FreeCAD posiada oddzielne procesy do budowania geometrii i wyświetlania jej na ekranie. Masz pełny dostęp do sposobu wyświetlania zawartości sceny na ekranie, dzięki czemu możesz modyfikować tę reprezentację, wchodzić z nią w interakcję lub dodawać do niej własne zachowania. Możesz również dodać niestandardowe widżety ekranu, takie jak informacje, narzędzia do przeciągania, kotwice lub obiekty tymczasowe.

<div class="mw-translate-fuzzy">
Jeśli chcesz dodać treść do tych stron, poproś o konto Wiki z uprawnieniami edytora [https://forum.freecadweb.org/viewtopic.php?f=21&t=6830 na forum], i przeczytaj [[WikiPages|WikiPages]], aby uzyskać ogólne wytyczne, których powinieneś przestrzegać. Aby dowiedzieć się więcej o innych sposobach pomocy w projekcie, zobacz stronę [[Help_FreeCAD/pl|Pomóż w rozwoju FreeCAD]].
</div>

<span id="Customizing_FreeCAD"></span>
==Dostosowanie FreeCAD==

* [[Interface Customization|Dostosowywanie interfejsu]]: zaczynając od początku: Paski narzędzi i skróty,
* [[Macros|Praca z makrami]]: łatwe nagrywanie często powtarzanych zadań lub kodu Pythona,
* [[Macros_recipes|Receptury makr]],
* [[Customize_Toolbars|Dostosuj paski narzędzi]],
* [[Installing_more_workbenches|Instalowanie większej liczby Środowisk pracy]],

<span id="Scripting_in_FreeCAD"></span>
==Tworzenie skryptów dla FreeCAD==

<span id="General"></span>
===Informacje ogólne===

* [[Scripting_and_macros/pl|Skrypty i makrodefinicje]] - Lista istotnych stron Wiki,
* [[Introduction_to_Python/pl|Wprowadzenie do Python]] - Zobacz także inne samouczki dotyczące języka Python na dole tej strony,
* [[Python_scripting_tutorial/pl|FreeCAD poradnik tworzenia skryptów]] - Ogólne spojrzenie na pisanie skryptów Pythona w programie FreeCAD,
* [[FreeCAD_Scripting_Basics/pl|FreeCAD podstawy tworzenia skryptów]]: No cóż, podstawy.
* [[Manual:A_gentle_introduction|FreeCAD Manual - Sekcja Skrypty w języku Python]]: Wielorozdziałowe wprowadzenie do skryptów środowiska Python w programie FreeCAD,
* [[Gui_Command/pl|Polecenia Gui]]: Dodawanie niestandardowych poleceń do GUI,
* Używanie mieszanych [[Units/pl|jednostek]] we FreeCAD.
* [[Profiling/pl|Tworzenie profili]] kod środowiska Python,
* [[Debugging/pl#Debugowanie_w_Python|Debugowanie]] kod środowiska Python.

<span id="Modules"></span>
===Moduły===

Funkcjonalność FreeCAD została rozdzielona w Modułach, które zajmują się specjalnymi typami danych i aplikacjami. FreeCAD posiada wbudowane moduły i moduły rozszerzeń ''(plug-ins)''. Po zainstalowaniu pluginów, stają się one dostępne dla Ciebie tak samo łatwo jak moduły wbudowane. Moduły opisane poniżej są modułami domyślnymi, dołączanymi do każdej instalacji FreeCAD.

* [[Builtin modules|Moduły wbudowane]] są głównymi modułami FreeCAD. Zawierają one narzędzia do manipulowania ogólnymi konfiguracjami FreeCAD, dokumentami i ich zawartością.
* [[Workbench creation|Tworzenie Środowiska pracy]], pokaże Ci jak stworzyć własne stanowisko pracy.

<span id="Working_with_Meshes"></span>
====Praca z siatkami====

* [[Mesh_Scripting/pl|Skrypty siatek]]: Jak wchodzić w interakcje z [[Mesh_Workbench/pl|Modułem siatek]].

<span id="Working_with_Parts"></span>
====Praca przy użyciu środowiska Część====

* Środowisko pracy [[Part_Workbench/pl|Część]]: Jak  narzędzia i struktura [http://en.wikipedia.org/wiki/Open_CASCADE Open CASCADE Technology] są używane w programie FreeCAD.
* [[Topological_data_scripting/pl|Tworzenie skryptów danych topologicznych]]: Jak korzystać z Modułu Part.
* [[PythonOCC/pl|PythonOCC]]: Jak wyzwolić całą moc Open CASCADE.
* [[Mesh_to_Part/pl|Siatka na Część]]: Konwersja między typami obiektów.

<span id="Accessing_the_Coin_scenegraph"></span>
====Dostęp do scenografii Coin====

* [[Scenegraph/pl|Scenografia Coin/Inventor]]: Jak działa reprezentacja sceny FreeCAD.
* [[Pivy/pl|Pivy]]: Jak uzyskać dostęp do scenografii i modyfikować ją.

<span id="Controlling_the_Qt_interface"></span>
===Sterowanie interfejsem Qt===

* [[PySide/pl|PySide]] Jak uzyskać dostęp do interfejsu i zmodyfikować zawartość tego interfejsu.
* [[Embedding_FreeCADGui/pl|Używanie GUI programu FreeCAD]] w innej aplikacji Qt z PyQt.

<span id="Working_with_parametric_objects"></span>
===Praca z obiektami parametrycznymi===

* [[Scripted objects|Obiekty skryptowe]]: Jak zrobić w FreeCAD 100% obiektów napisanych w Pythonie.
** [[Scripted objects with attachment|Obiekty utworzone skryptami z załącznikiem]]: Jak sprawić, by obiekty utworzone skryptami mogły być dołączane do innych obiektów w programie FreeCAD.
** [[Scripted_objects_saving_attributes|Atrybuty zapisu obiektów skryptowych]]:jak zapisywać i przywracać atrybuty klasy proxy za pomocą {{incode|dumps}} and {{incode|loads}}.
** [[Scripted_objects_migration|Przeniesienie obiektów skryptowych]]: jak migrować stare obiekty skryptów do nowej klasy.

<span id="Examples"></span>
===Przykłady===

* [[Code_snippets/pl|Wycinki kodu]]: kolekcja kawałków kodu Python dla FreeCAD, które mają służyć jako składniki twoich skryptów...
* [[Line_drawing_function/pl|Funkcja rysowania linii]]: kolekcja fragmentów kodu FreeCAD Pythona..: Jak zbudować proste narzędzie do rysowania linii
* [[Dialog_creation/pl|Tworzenie dialogu]]: jak konstruować okna dialogowe z projektantem Qt, i używać ich we FreeCAD.
* [[Embedding_FreeCAD/pl|Osadzenie FreeCAD]]: jak zaimportować FreeCAD jako moduł Pythona w innych aplikacjach.
* Środowisko pracy [[Draft_Workbench/pl|Rysunek Roboczy]]: dodaje podstawowe funkcje rysunkowe 2D do FreeCAD. Jest on napisany w całości w Pythonie, więc może być dobrym przykładem, jeśli chcesz napisać swoje własne moduły.
* [[FreeCAD_vector_math_library/pl|Biblioteka matematyki wektorowej FreeCAD]]: kilka przydatnych funkcji do manipulowania wektorami we FreeCAD. Biblioteka ta jest również dołączona do modułu Draft.

<span id="API_Functions"></span>
==Funkcje API==

<div class="mw-translate-fuzzy">
Pełna dokumentacja API FreeCAD znajduje się na stronie http://www.freecadweb.org/api/ . Zawiera ona zarówno opis dla C++ jak i Python API, i nie jest jeszcze do końca dobrze sformatowana, co może być mylące przy szukaniu kodu tylko dla Pythona.  Wersje łatwiejsze do przeglądania można znaleźć [[:Category:API|tutaj]].  Zauważ, że może ona być niekompletna, ponieważ jest aktualizowana ręcznie. Aby uzyskać bardziej dokładne informacje, przeglądaj moduły bezpośrednio z konsoli Python we FreeCAD.
</div>

Temat powiązany: [[Exposing_C%2B%2B_to_Python|Udostępnianie języka C++ Pythonowi]]

<span id="Advanced_modification"></span>
==Zaawansowana modyfikacja==

* [[Start_up_and_Configuration|Uruchomienie i konfiguracja]]: Uruchomienie i opcje wiersza poleceń.
* [[Install_on_Windows|Instalacja w systemie Windows]]: Użycie instalatora Windows.
* [[Compile_on_Linux/Unix/pl|Kompilacja FreeCAD w systemie Linux/Unix]] oraz [[Compile_on_Windows|Kompilacja FreeCAD w systemie Windows]].
* [[Branding|Kształtowanie marki]]: Proste modyfikacje, które możesz zrobić w kodzie źródłowym, aby zmienić niektóre cechy FreeCAD.
* [[Extra_python_modules/pl|Dodatkowe moduły Python]]: Rozszerz interpreter FreeCAD Python o te potężne moduły!

<span id="Python_tutorials"></span>
==Poradniki Python==

Są to dobre ogólne samouczki, nie specyficzne dla FreeCAD, które mogą cię zainteresować, jeśli jesteś zupełnie nowy w Pythonie.

'''Python'''
* [https://docs.python.org/2.7/tutorial/index.html Oficjalny samouczek Pythona] - Niezwykle obszerny samouczek do odkrywania Pythona.
* [https://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_3 Samouczek Pythona dla osób nie będących programistami] - doskonały Wikibook.
* [http://npt.cc.rsu.ru/user/wanderer/ODP/Python_for_Newbies.htm Python dla nowicjuszy] - jeden obszerny poradnik obejmujący wszystkie podstawy.

'''PySide''' - Jak tworzyć i zarządzać interfejsem Qt UI FreeCADa z poziomu konsoli Python.
* [http://zetcode.com/gui/pysidetutorial/ Samouczek PySide]: Niezależny od platformy samouczek pokazujący użycie PySide z przykładami.
* [http://www.pythoncentral.io/series/python-pyside-pyqt-tutorial/ PySide/PyQt tutorial]: Łatwy do zrozumienia poradnik, który obejmuje PySide i PyQt z przykładami.
* [http://qt-project.org/wiki/PySideDocumentation dokumentacja PySide]: z projektu Qt ''(ludzie, którzy to wszystko napisali)''.
* [http://qt-project.org/wiki/QtCreator_and_PySide Korzystanie z QtCreator w PySide]: również z projektu Qt.
* [http://srinikom.github.io/pyside-docs/index.html Odniesienie do PySide]: niekończące się szczegóły na temat drobiazgów PySide i Qt, wiarygodnego źródła odniesienia.
* [http://nullege.com/codes/search?cq=PySide fragmenty kodu PySide]: przeszukiwalna baza danych fragmentów kodu PySide.

Poniższe dwa odnośniki są specyficzne dla PyQt ''(nie PySide)'', ale mogą oferować pewne informacje użytkowe:
* [http://www.cs.usfca.edu/~afedosov/qttut/ Basic PyQt tutorial]: Przyjazny i krótki, oparty na platformie Linux poradnik, który wyjaśni jak pracować z PyQt i Qt Designer.
* [http://vizzzion.org/?id=pyqt Programowanie aplikacji Qt w Python]: Bardziej szczegółowy poradnik obejmujący cały proces pracy ze środowiskiem Qt i Python.

'''Pivy''' - Jak wchodzić w interakcję ze scenami 3D w programie FreeCAD.
* [http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.108.947&rep=rep1&type=pdf Pivy - Osadzanie dynamicznego języka skryptowego w bibliotece wykresów scenograficznych] : Teza, która objaśnia Pivy w szczegółach.
* [http://ftp.ntua.gr/mirror/python/pycon/dc2004/papers/47/ Programowanie wysokiego poziomu, grafiki 3D w Pythonie] : Przykład Pivy z Pycon 2004.
* [https://www.semanticscholar.org/paper/Integrating-Pivy-into-Studierstube-4.2-Gruber/08c9a89c8326c87f81c2d83428029fbfb6c2ae64 Introducing Pivy into studierstube] [https://www.researchgate.net/publication./228737136_Integrating_Pivy_into_Studierstube_42 ''(Mirror)''] : Artykuł, który tak naprawdę nie jest samouczkiem, ale dobrze ilustruje, jak działa Pivy ''(wymaga konta akademickiego)''.

<span id="Community_projects"></span>
==Projekty społeczności== 

Na [[FreeCAD Community Portal|Portalu Społeczności]] możesz znaleźć inne projekty oparte na FreeCAD prowadzone przez społeczność użytkowników FreeCAD. Jeśli rozpoczynasz nowy projekt FreeCAD, upewnij się, że możesz go tam wymienić! Mamy także stronę z rzeczami, które możesz zrobić, jeśli chciałbyś [[Help FreeCAD|Pomóc FreeCAD]].


{{Powerdocnavi{{#translation:}}}}
[[Category:Hubs{{#translation:}}]]