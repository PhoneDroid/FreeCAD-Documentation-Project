<languages/>

<span id="Description"></span>
==Descripción==

{{TOCright}}

[[IfcOpenShell/es|IfcOpenShell]] es una biblioteca de software de código abierto (LGPL 3) que ayuda a los desarrolladores a trabajar con el formato de archivo [http://www.buildingsmart-tech.org/specifications/ifc-overview industry foundation classes] ([[Arch_IFC/es|IFC]]). El formato de archivo IFC puede utilizarse para describir datos de construcción y edificación. El formato se utiliza habitualmente para [https://en.wikipedia.org/wiki/Building_information_modeling building information modelling] (BIM), por ejemplo, para el análisis de cargas mecánicas y para los estudios de eficiencia térmica y energética. IfcOpenShell es principalmente una colección de librerías C++, sin embargo, como tiene enlaces [[Python/es|Python]], puede integrarse con programas como FreeCAD y Blender.

IfcOpenShell utiliza [[OpenCASCADE/es|OpenCASCADE]] internamente para convertir la geometría implícita de los archivos IFC en geometría explícita que otros paquetes CAD pueden entender, por ejemplo, STEP, [[Arch_OBJ/es|OBJ]], y [[Arch_DAE/es|DAE]].

<div class="mw-translate-fuzzy">
A partir de la v0.19, FreeCAD es capaz de importar archivos IFC siempre que el módulo {{incode|ifcopenshell}} [[Python/es|Python]] esté disponible en el sistema. Asimismo, los [[Arch_Workbench/es|Arquitectura]] y [[BIM_Workbench/es|BIM ambientes de trabajo]] pueden exportar un modelo de edificio al formato IFC para que pueda ser utilizado en otras aplicaciones.
</div>

Para verificar que IfcOpenShell está instalado en su sistema, intente importarlo desde la [[Python_console/es|Consola de Python]]; la biblioteca está correctamente instalada si no se devuelve ningún mensaje de error.

{{Code|code=
import ifcopenshell
}}

<span id="Installation"></span>
== Instalación ==

IfcOpenShell puede instalarse de varias maneras, dependiendo de su sistema operativo y del entorno de Python. En el pasado, IfcOpenShell era un poco difícil de instalar, ya que tenía que ser compilado para su sistema específico; sin embargo, a partir de este escrito (2020) es más fácil empezar a usarlo, ya que ahora se incluye junto con FreeCAD en muchas distribuciones de FreeCAD. En general, es aconsejable utilizar una de estas distribuciones precompiladas, y sólo compilarlo tú mismo si eres un usuario avanzado.

<div lang="en" dir="ltr" class="mw-content-ltr">
=== From BlenderBIM ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
[https://blenderbim.org BlenderBIM] is another project that uses IfcOpenShell. They provide up-to-date IfcOpenShell packages for several platforms. This is the best way to make sure you have a recent version of IfcOpenShell.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
BlenderBIM IfcOpenShell install page: https://blenderbim.org/docs-python/ifcopenshell-python/installation.html
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Pip ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The easiest way to install IfcOpenShell is using [https://pypi.org/project/pip/ pip]. Once pip is installed on your system, you can [https://datatofish.com/install-package-python-using-pip/ install] IfcOpenShell easily by issuing from a terminal window:
</div>

{{Code|code=
pip install ifcopenshell
}}

=== Conda ===

Para los sistemas Windows y MacOS, las distribuciones de FreeCAD que se han creado con el gestor de paquetes [[Conda/es|Conda]] suelen incluir ya IfcOpenShell, por lo que no es necesaria ninguna instalación adicional. Obtén la distribución apropiada desde la página [[Download/es|Download]].

La [[AppImage/es|AppImage]] para Linux también se basa en [[Conda/es|Conda]], y también incluye IfcOpenShell.

=== Linux ===

Si está disponible, puede instalar IfcOpenShell utilizando el gestor de paquetes de su distribución.

{{Code|code=
sudo apt install ifcopenshell
}}

Sin embargo, tenga en cuenta que los paquetes proporcionados por muchos repositorios de Linux tienden a ser antiguos, y pueden no contener los últimos desarrollos del software. Si quieres estar seguro de que estás utilizando el software más reciente, utiliza una distribución de FreeCAD basada en [[Conda/es|Conda]], una distribución precompilada de IfcOpenShell, o compila tú mismo IfcOpenShell.

<span id="Using_a_pre-compiled_IfcOpenShell_package"></span>
=== Utilizar un paquete IfcOpenShell precompilado ===

Hay un repositorio especial del proyecto IfcOpenShell que compila regularmente las bibliotecas de IfcOpenShell para varios sistemas (Linux, Windows, MacOS), arquitecturas (32 y 64 bits), y versiones de Python (2.7, 3.x). Para utilizar estas librerías precompiladas, debes elegir la versión correcta que coincida con tu sistema operativo, arquitectura, y los números mayor y menor del [[Python/es|Python]] que se utiliza con FreeCAD. Esto significa que los dos primeros números deben coincidir (Python 3.6 y 3.7 se consideran versiones distintas) mientras que el tercero (micro) no importa (Python 3.6.5 y 3.6.12 se consideran iguales a efectos de compatibilidad).

# Dirígete al repositorio de construcción [https://github.com/IfcOpenBot/IfcOpenShell IfcOpenBot/IfcOpenShell]. Este repositorio no es para desarrollo, sólo contiene una copia del repositorio principal así como paquetes precompilados.
# En el momento de escribir este artículo (2020), la rama maestra del proyecto IfcOpenShell no contiene el último código, por lo que debemos seleccionar la rama deseada, por ejemplo, {{incode|v0.6.0}}.
# Haga clic en el número de commit, que le llevará a la lista de commits de la rama, por ejemplo, {{incode|IfcOpenBot/IfcOpenShell/commits/v0.6.0}}.
# Retrocede en el historial hasta encontrar un commit que tenga un comentario. Esto indicará el momento en que las bibliotecas precompiladas fueron liberadas.
# Haga clic en el commit. Verás un comentario de IfcOpenBot que muestra una tabla de combinaciones de sistema operativo, arquitectura y versión de Python. Elige el enlace correcto para "Python" que coincida con tu [[Std_About/es|versión de FreeCAD]]. Los paquetes "Blender", "IfcConvert" e "IfcGeomServer" no son necesarios para el uso de FreeCAD.
# El paquete descargado necesita ser extraído, y el directorio extraído necesita ser colocado en la ruta de búsqueda de Python para encontrar los nuevos módulos.

{{Emphasis|Nota:}} los siguientes ejemplos suponen un sistema basado en Debian/Ubuntu, pero el procedimiento general debería funcionar para otros sistemas operativos.

:* Al descomprimir el paquete descargado se crea una carpeta {{incode|ifcopenshell/}}.
{{Code|code=
unzip ifcopenshell-python-36-v0.6.0-4baec57-linux64.zip
}}

:* La ruta de búsqueda se puede encontrar inspeccionando la variable {{incode|sys.path}} en la [[Python_console/es|consola de Python]].
{{Code|code=
import sys
print(sys.path)
}}

:* Si quieres instalar la librería IfcOpenShell sólo para tu usuario, y que no afecte a los directorios del sistema, debes colocar la carpeta extraída {{incode|ifcopenshell/}} en el directorio principal de tu propio usuario.
{{Code|code=
mv -t $HOME/.local/lib/python3.6/site-packages/ ifcopenshell/
}}

Si desea instalar la biblioteca IfcOpenShell en todo el sistema, normalmente necesitará privilegios de superusuario para escribir en los directorios del sistema; normalmente se trata de un directorio {{incode|site-packages/}}, o un directorio {{incode|dist-packages/}} para las distribuciones Debian/Ubuntu.
{{Code|code=
sudo mv -t /usr/local/lib/python3.6/dist-packages/ ifcopenshell/
}}

Si el directorio se ha movido correctamente, comprueba que el módulo {{incode|ifcopenshell}} es accesible desde la [[Python_console/es|Consola de Python]].
{{Code|code=
>>> import ifcopenshell
>>> print(ifcopenshell.version)
0.6.0b0
>>> print(ifcopenshell.__path__)
['/home/user/.local/lib/python3.6/site-packages/ifcopenshell']
}}

Para eliminar la biblioteca instalada, basta con eliminar el directorio correspondiente con todos los módulos dentro.
{{Code|code=
rm -rf $HOME/.local/lib/python3.6/site-packages/ifcopenshell/
sudo rm -rf /usr/local/lib/python3.6/dist-packages/ifcopenshell/
}}

<span id="Compiling"></span>
== Compilación ==

<div lang="en" dir="ltr" class="mw-content-ltr">
Compiling IfcOpenShell is recommended only for advanced users. The process is similar to [[Compile_on_Linux|compiling FreeCAD on Linux]], so if you have done this already, then you may already have the necessary requisites like the [[OpenCASCADE|OpenCASCADE's]] development files. The process uses the CMake configuration tool to produce a custom {{incode|Makefile}} for use with the Make tool.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The general instructions are outlined in the [https://github.com/IfcOpenShell/IfcOpenShell IfcOpenShell repository], and are as follows:
# Get the source code of IfcOpenShell from its main repository.
# Gather all dependencies for compiling, including a C++ compiler, CMake, and Make, and the development files for Boost, libxml2, [[OpenCASCADE|OpenCASCADE]], SWIG, Python, and OpenCOLLADA (optional). Most of these components are strictly optional, however, for use with FreeCAD they should all be installed. OpenCOLLADA is optional as it only provides [[Arch_DAE|DAE]] support for the {{incode|IfcConvert}} binary.
# Run {{incode|cmake}} to generate a {{incode|Makefile}}, then start the compilation by running {{incode|make}}.
# Install the {{incode|ifcopenshell}} [[Python|Python]] module in the appropriate {{incode|site-packages/}} directory so that it is found by FreeCAD.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Emphasis|Note:}} the following examples assume a Debian/Ubuntu based system, but the general procedure should work for other operating systems. For example, in Debian shared libraries are normally located in {{incode|/usr/lib/x86_64-linux-gnu/}} while in other distributions this may be {{incode|/usr/lib64/}} so the paths should be adjusted accordingly.
</div>

<span id="Prerequisites"></span>
=== Prerequisitos ===

Instale las herramientas básicas de compilación.
{{Code|code=
sudo apt install git cmake gcc g++ libboost-all-dev
}}

Obtenga el código fuente del proyecto y colóquelo en un directorio personalizado al que tenga acceso total de escritura.

<div lang="en" dir="ltr" class="mw-content-ltr">
As of this writing (2020), the master branch of the IfcOpenShell project does not contain the latest code, so we need to clone a specific branch.
</div>
{{Code|code=
git clone https://github.com/IfcOpenShell/IfcOpenShell -b v0.6.0 IfcOpenShell-source
}}

=== OpenCASCADE ===

<div lang="en" dir="ltr" class="mw-content-ltr">
Install the development files of [[OpenCASCADE|OpenCASCADE]].
</div>
{{Code|code=
sudo apt install libocct*-dev
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Which expands to
</div>
{{Code|code=
sudo apt install libocct-data-exchange-dev libocct-draw-dev libocct-foundation-dev libocct-modeling-algorithms-dev libocct-modeling-data-dev libocct-ocaf-dev libocct-visualization-dev
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
You may use the community edition (OCE) of OpenCASCADE as well, however, please notice that this version is old and no longer recommended by FreeCAD as of 2020.
</div>

=== OpenCOLLADA ===

<div lang="en" dir="ltr" class="mw-content-ltr">
Install the development files of OpenCOLLADA.
</div>
{{Code|code=
sudo apt install opencollada-dev
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
If the files are too old in your distribution, you may also compile the libraries yourself. The procedure is outlined in the main repository, [https://github.com/KhronosGroup/OpenCOLLADA KhronosGroup/OpenCOLLADA], and it's very straight forward as it only requires the {{incode|libpcre3}} and {{incode|libxml2}} development files.
</div>

{{Code|code=
sudo apt install libpcre3-dev libxml2-dev
git clone https://github.com/KhronosGroup/OpenCOLLADA OpenCOLLADA-source

mkdir -p OpenCOLLADA-build
cd OpenCOLLADA-build
cmake ../OpenCOLLADA-source

make -j 3
sudo make install
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Python wrapper ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
For usage with FreeCAD you need the [[Python|Python]] wrapper which uses SWIG to generate the proper interfaces from the C++ classes.
</div>

{{Code|code=
sudo apt-get install python-all-dev swig
}}

<span id="CMake_configuration"></span>
=== CMake configuración ===

<div lang="en" dir="ltr" class="mw-content-ltr">
It is recommended to perform the configuration and compilation in a specific build directory separate from the source directory.
</div>

{{Code|code=
mkdir -p IfcOpenShell-build
cd IfcOpenShell-build

cmake ../IfcOpenShell-source/cmake/
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Notice that the {{incode|CMakeLists.txt}} file that drives CMake is inside the {{incode|cmake/}} subdirectory in the source directory.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Depending on your Linux distribution, and the way you installed the dependencies, you may have to define some CMake variables so that the libraries are found properly.
</div>

<span id="Specifying_the_OpenCASCADE_libraries"></span>
==== Especificación de las bibliotecas OpenCASCADE ====

<div lang="en" dir="ltr" class="mw-content-ltr">
If you manually compiled OpenCASCADE, or if the libraries are not in a standard directory, you may have to set the proper variables.
</div>

{{Code|code=
cmake \
    -DOCC_INCLUDE_DIR=/usr/include/opencascade \
    -DOCC_LIBRARY_DIR=/usr/lib/x86_64-linux-gnu \
    ../IfcOpenShell-source/cmake/
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
By default the build system expects the community edition (OCE) of OpenCASCADE ({{incode|/usr/include/oce/}}), however, please notice that this version is old and no longer recommended by FreeCAD as of 2020. For this reason installing the development files of the main version of [[OpenCASCADE|OpenCASCADE]] (OCCT) is recommended.
</div>

<span id="Without_OpenCOLLADA"></span>
==== Sin OpenCOLLADA ====

<div lang="en" dir="ltr" class="mw-content-ltr">
If you don't need OpenCOLLADA support ([[Arch_DAE|DAE]] files) you need to turn it off explicitly with the {{incode|COLLADA_SUPPORT}} variable.
</div>

{{Code|code=
cmake \
    ...
    -DCOLLADA_SUPPORT=FALSE \
    ../IfcOpenShell-source/cmake/
}}

<span id="With_OpenCOLLADA"></span>
==== Con OpenCOLLADA ====

<div lang="en" dir="ltr" class="mw-content-ltr">
If you manually compiled OpenCOLLADA, or if the libraries are not in a standard directory, you may have to set the proper variables for OpenCOLLADA and for the {{incode|libpcre}} library.
</div>

{{Code|code=
cmake \
    ...
    -DOPENCOLLADA_INCLUDE_DIR=/usr/include/opencollada \
    -DOPENCOLLADA_LIBRARY_DIR=/usr/lib/opencollada \
    -DPCRE_LIBRARY_DIR=/usr/lib/x86_64-linux-gnu \
    ../IfcOpenShell-source/cmake/
}}

<span id="Specifying_the_libxml2_libraries"></span>
==== Especificación de las bibliotecas libxml2 ====

<div lang="en" dir="ltr" class="mw-content-ltr">
If the {{incode|libxml2}} libraries are not found during compilation and linking, or if the libraries are not in a standard directory, you may have to set the proper variables.
</div>

{{Code|code=
cmake \
    ...
    -DLIBXML2_INCLUDE_DIR=/usr/include/libxml2 \
    -DLIBXML2_LIBRARIES=/usr/lib/x86_64-linux-gnu/libxml2.so \
    ../IfcOpenShell-source/cmake/
}}

<span id="Specifying_installation_in_the_user&#039;s_home_directory"></span>
==== Especificando la instalación en el directorio personal del usuario ====

<div lang="en" dir="ltr" class="mw-content-ltr">
By default, the Python module {{incode|ifcopenshell}} will be installed in a system {{incode|site-packages/}} directory, so it requires superuser privileges. By setting the {{incode|USERSPACE_PYTHON_PREFIX}} variable, the installation of the Python module will be done to the user's home directory.
</div>

{{Code|code=
cmake \
    ...
    -DUSERSPACE_PYTHON_PREFIX=ON \
    ../IfcOpenShell-source/cmake/
}}

<span id="Specifying_Python_version"></span>
==== Especificando la versión de Python ====

<div lang="en" dir="ltr" class="mw-content-ltr">
If you want to generate a binding for a particular Python version, set the {{incode|PYTHON_EXECUTABLE}} variable to the specific executable. Remember that this version must be the same Python version against which FreeCAD was compiled.
</div>
{{Code|code=
cmake \
    ...
    -DPYTHON_EXECUTABLE=/usr/bin/python3.6 \
    ../IfcOpenShell-source/cmake/
}}

<span id="Single_configuration_line"></span>
==== Línea de configuración única ====

<div lang="en" dir="ltr" class="mw-content-ltr">
In a typical Debian/Ubuntu system you may use this line to configure the compilation. Adjust it as necessary.
</div>
{{Code|code=
cmake -DOCC_INCLUDE_DIR=/usr/include/opencascade -DOCC_LIBRARY_DIR=/usr/lib/x86_64-linux-gnu -DLIBXML2_INCLUDE_DIR=/usr/include/libxml2 -DLIBXML2_LIBRARIES=/usr/lib/x86_64-linux-gnu/libxml2.so -DUSERSPACE_PYTHON_PREFIX=ON ../IfcOpenShell-source/cmake/
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Without OpenCOLLADA:
</div>
{{Code|code=
cmake -DOCC_INCLUDE_DIR=/usr/include/opencascade -DOCC_LIBRARY_DIR=/usr/lib/x86_64-linux-gnu -DCOLLADA_SUPPORT=FALSE -DLIBXML2_INCLUDE_DIR=/usr/include/libxml2 -DLIBXML2_LIBRARIES=/usr/lib/x86_64-linux-gnu/libxml2.so -DUSERSPACE_PYTHON_PREFIX=ON ../IfcOpenShell-source/cmake/
}}

<span id="Actual_compilation"></span>
=== Compilación actual ===

<div lang="en" dir="ltr" class="mw-content-ltr">
If there were no error messages during configuration with CMake, a {{incode|Makefile}} should have been created in the build directory, so you can proceed to compile the libraries by running {{incode|make}}.
</div>
{{Code|code=
make -j N
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
{{incode|N}} is the number of processors that you assign to the compilation process; choose at least one fewer than the total number of CPU cores that you have.
</div>

<span id="Troubleshooting_and_other_options"></span>
=== Solución de problemas y otras opciones ===

<div lang="en" dir="ltr" class="mw-content-ltr">
All configuration options are available in the {{incode|CMakeLists.txt}} file located inside the {{incode|IfcOpenShell-source/cmake/}} directory. If there are problems when running CMake or Make, look here for other options that may need to be set.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In all instructions above, instead of {{incode|cmake}}, the graphical interface {{incode|cmake-gui}} can be used. This will quickly show the available options in the configuration.
</div>

{{Code|code=
cmake-gui ../IfcOpenShell-source/cmake/
}}

<span id="Testing_the_compilation_in_the_build_directory"></span>
=== Probar la compilación en el directorio de construcción ===

<div lang="en" dir="ltr" class="mw-content-ltr">
If the build was successful you should have an {{incode|examples/}} subdirectory with the newly compiled {{incode|IfcOpenHouse}} executable. Run this utility from the build directory to generate a sample IFC file.
</div>
{{Code|code=
example/IfcOpenHouse
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The sample [[Arch_IFC|IFC]] file should appear in the build directory, and can be used as input to the also newly compiled {{incode|IfcConvert}} executable. This utility takes as input an IFC file, and produces as output a different format including [[Arch_OBJ|OBJ]], [[Arch_DAE|DAE]] if OpenCOLLADA support was enabled, STEP, IGS, XML, [[Draft_SVG|SVG]], or another [[Arch_IFC|IFC]].
</div>
{{Code|code=
./IfcConvert IfcOpenHouse.ifc
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
If no output file is specified, by default it will create an [[Arch_OBJ|OBJ]] file and its accompanying material table (MTL).
</div>

<span id="Installation_of_the_compiled_libraries"></span>
=== Instalación de las bibliotecas compiladas ===

<div lang="en" dir="ltr" class="mw-content-ltr">
If the compilation doesn't report any errors, you may run {{incode|make install}} to copy the headers, compiled libraries, and binaries to their corresponding installation directories.
</div>

{{Code|code=
sudo make install
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
By default, the {{incode|CMAKE_INSTALL_PREFIX}} is {{incode|/usr/local/}}, so all compiled files will be placed under this directory, which normally requires elevated privileges.
</div>
{{Code|code=
/usr/local/bin/IfcConvert
/usr/local/bin/IfcGeomServer
/usr/local/include/ifcparse/*.h
/usr/local/include/ifcgeom/*.h
/usr/local/include/ifcgeom_schema_agnostic/*.h
/usr/local/include/serializers/{*.h,*.cpp}
/usr/local/include/serializers/schema_dependent/{*.h,*.cpp}
/usr/local/lib/libIfcGeom*.a
/usr/local/lib/libIfcParse.a
/usr/local/lib/libSerializers*.a
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The {{incode|ifcopenshell}} Python module that is required for FreeCAD is not actually present in the build directory; this package is created only when {{incode|make install}} is run. The resulting package is placed in a {{incode|site-packages/}} directory, or a {{incode|dist-packages/}} directory for Debian/Ubuntu distributions.
</div>
{{Code|code=
/usr/lib/python3/dist-packages/ifcopenshell/
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
If the {{incode|USERSPACE_PYTHON_PREFIX}} variable was set during the CMake configuration step, {{incode|ifcopenshell}} will be placed in the user's {{incode|site-packages/}} directory.
</div>
{{Code|code=
$HOME/.local/lib/python3.6/site-packages/ifcopenshell/
}}

<span id="Removing_the_compiled_libraries"></span>
=== Eliminar las bibliotecas compiladas ===

<div lang="en" dir="ltr" class="mw-content-ltr">
To remove the installed libraries, just remove the corresponding files that were installed, and the {{incode|ifcopenshell/}} directory with all modules inside.
</div>
{{Code|code=
sudo rm -rf /usr/local/bin/IfcConvert
sudo rm -rf /usr/local/bin/IfcGeomServer
sudo rm -rf /usr/local/include/ifcparse/
sudo rm -rf /usr/local/include/ifcgeom/
sudo rm -rf /usr/local/include/ifcgeom_schema_agnostic/
sudo rm -rf /usr/local/lib/libIfcGeom*
sudo rm -rf /usr/local/lib/libIfcParse*
sudo rm -rf /usr/local/lib/libSerializers*
}}

{{Code|code=
sudo rm -rf /usr/lib/python3/dist-packages/ifcopenshell/
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Or if the {{incode|USERSPACE_PYTHON_PREFIX}} variable was set.
</div>
{{Code|code=
sudo rm -rf $HOME/.local/lib/python3.6/site-packages/ifcopenshell/
}}

<span id="Manual_installation"></span>
=== Instalación manual ===

<div lang="en" dir="ltr" class="mw-content-ltr">
Compilation of the entire IfcOpenShell distribution produces binaries like {{incode|IfcConvert}} and {{incode|IfcGeomServer}}, as well as many static libraries ({{incode|lib*.a}}) in the build directory. However, for FreeCAD we only need the {{incode|ifcopenshell}} Python module. This module is not a single file, but a "package", that is, a directory with various files. This {{incode|ifcopenshell}} package is put together from the Python wrappers built inside {{incode|IfcOpenShell-build/ifcwrap/}}, and from the Python modules in the original source directory {{incode|IfcOpenShell-source/src/ifcopenshell-python/ifcopenshell/}}.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* Produced by the compilation process:
</div>
{{Code|code=
../IfcOpenShell-build/ifcwrap/ifcopenshell_wrapper.py
../IfcOpenShell-build/ifcwrap/_ifcopenshell_wrapper.so
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
* Existing in the source directory:
</div>
{{Code|code=
../IfcOpenShell-source/src/ifcopenshell-python/ifcopenshell/
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The {{incode|ifcopenshell}} module is created by copying the original source directory, and adding the two {{incode|*ifcopenshell_wrapper*}} files to it.
</div>

{{Code|code=
cp -rt . ../IfcOpenShell-source/src/ifcopenshell-python/ifcopenshell/
cp -t ifcopenshell/ ifcwrap/ifcopenshell_wrapper.py ifcwrap/_ifcopenshell_wrapper.so
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Now this directory can be moved to the user-specific or system {{incode|site-packages/}} ({{incode|dist-packages/}} for Debian/Ubuntu) to make it available for all Python applications.
</div>
{{Code|code=
mv -t $HOME/.local/lib/python3.6/site-packages/ ifcopenshell/
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Or for system-wide installation:
</div>
{{Code|code=
sudo mv -t /usr/lib/python3/dist-packages/ ifcopenshell/
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Now the {{incode|ifcopenshell}} module should be available to be imported from a [[Python_console|Python console]].
</div>
{{Code|code=
>>> import ifcopenshell
>>> print(ifcopenshell.version)
0.6.0b0
>>> print(ifcopenshell.__path__)
['/home/user/.local/lib/python3.6/site-packages/ifcopenshell']
}}

<span id="IFC_viewer_application"></span>
== Aplicación del visor IFC ==

<div lang="en" dir="ltr" class="mw-content-ltr">
The IfcOpenShell library actually includes a small graphical viewer for IFC files that uses PyQt5 and PythonOCC.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
To launch this viewer from the Python console, the {{incode|application}} class needs to be instantiated and started:
</div>
{{Code|code=
from ifcopenshell.geom.app import application
application().start()
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
If the library is already installed, the entire module can also be run from the terminal:
</div>
{{Code|code=
python3 /home/user/.local/lib/python3.6/site-packages/ifcopenshell/geom/app.py
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
At the time of writing (2020), only the [[PythonOCC|PythonOCC]] version compiled for the [[OpenCASCADE|OpenCASCADE]] community edition (OCE) was supported.
</div>

<span id="IFC_online_viewer"></span>
== Visor en línea del IFC ==

<div lang="en" dir="ltr" class="mw-content-ltr">
The IfcOpenShell project has also developed "IFC Pipeline", a self-hosted IFC processing and visualization program. It also provides a small web application that accepts file uploads, which anybody can use. This means that to visualize IFC data you don't need to have IfcOpenShell, or other viewers, installed locally; you can just load your IFC file into this system to see the result.
* Online viewer: https://view.ifcopenshell.org/
* Repository: [https://github.com/AECgeeks/ifc-pipeline AECgeeks/ifc-pipeline]
</div>

<span id="More_information"></span>
== Más información ==

<div class="mw-translate-fuzzy">
* Página web: [http://ifcopenshell.org/ ifcopenshell.org]
* Repositorio de código: [https://github.com/IfcOpenShell/IfcOpenShell IfcOpenShell/IfcOpenShell]
* Academia con ejemplos y artículos: [http://academy.ifcopenshell.org/ academy.ifcopenshell.org]
* [https://view.ifcopenshell.org/ Visor en línea de IfcOpenShell]
* Comunidad OSArch con recursos para la arquitectura de código abierto: [https://wiki.osarch.org/index.php?title=Main_Page wiki.OSArch.org]
* [https://forum.freecadweb.org/viewtopic.php?f=39&t=48971 Instalación de IfcOpenShell]; discusión principal en el foro.
* [https://forum.freecadweb.org/viewtopic.php?f=39&t=12368&start=10#p117883 Instalación de IFC]; discusión antigua en el foro.
* [https://forum.freecadweb.org/viewtopic.php?f=39&t=33254 IfcPlusPlus compilado en Gentoo - ¿preguntas y alternativas?]
* [[Import/Export_IFC_-_compiling_IfcOpenShell/es|Compilación de IfcOpenShell para MacOS]]; una guía antigua que describe el proceso general. Puede que ya no sea necesaria ya que IfcOpenShell se distribuye ahora junto con FreeCAD gracias a [[Conda/es|Conda]].
* Qué páginas enlazan con [[Special:WhatLinksHere/IfcOpenShell/es|esta página]].
</div>

{{BIM_Tools_navi{{#translation:}}}}
{{FEM_Tools_navi{{#translation:}}}}
{{Userdocnavi{{#translation:}}}}
[[Category:3rd_Party{{#translation:}}]]