<languages/>

<div class="mw-translate-fuzzy">
{{Docnav/es
|
|[[Draft_SVG/es|SVG]]
|[[Draft_Workbench/es|Modulo Borrador]]
|IconC=Workbench_Draft.svg
}}
</div>

{{TOCright}}

<span id="Description"></span>
==Descripción==

El borrador DXF es un módulo de software utilizado por el [[File:Std_Open.svg|24px]] [[Std_Open/es|Std Abrir]], [[File:Std_Import.svg|24px]] [[Std_Import/es|Std Importar]] y [[File:Std_Export.svg|24px]] [[Std_Export/es|Std Exportar]] para manejar el formato de archivo DXF.

From the user's point of view, the DXF import/export module will be loaded automatically when any of those commands are invoked and the file to open, import or export is a DXF file. The main difference between [[Std_Open|Std Open]] and the import command is that the former will create a new FreeCAD document and then do the import, whereas the later will import the DXF file and insert the result in the currently active document.

[[Image:Screenshot qcad.jpg]]
{{Caption|Dibujo Qcad exportado a DXF, que posteriormente se abre en FreeCAD}}

<span id="Importing"></span>
==Importación==

Two importers are available, which one is used can be specified under {{MenuCommand|Edit → Preferences... → Import-Export → DXF}}. One is built-in, C++-based and fast, the other is legacy, coded in Python, slower, and requires the installation of an add-on, but can handle some entities better and can create more refined FreeCAD objects. Both support all DXF versions starting from R12.

<div class="mw-translate-fuzzy">
Los objetos 3D dentro de un archivo DXF se almacenan bajo un blob binario ACIS/SAT, que por el momento no puede ser leído por FreeCAD. Sin embargo, entidades más sencillas como los 3DFACEs son soportados.
</div>


{| class="wikitable" style="text-align:left;"
|+ DXF importer entity support comparison
|-
! Entity
! C++ importer
! Legacy importer
|-
| Lines
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Polylines <small>(and LWPOLYLINES)</small>
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Arcs
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Circles
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Ellipses
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Splines
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Texts & MTexts
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Leaders
| style="text-align:center; color:red;" | '''✗'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Layers
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Points
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Dimensions
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Blocks
| style="text-align:center; color:green;" | '''✓''' <br><small>(Geometry only; texts, dimensions, and attributes inside blocks are skipped)</small>
| style="text-align:center; color:green;" | '''✓'''
|-
| Paper space objects
| style="text-align:center; color:green;" | '''✓'''
| style="text-align:center; color:green;" | '''✓'''
|-
| 3D Faces
| style="text-align:center; color:red;" | '''✗'''
| style="text-align:center; color:green;" | '''✓'''
|}

<span id="Exporting"></span>
==Exportación==

<div class="mw-translate-fuzzy">
Los archivos se exportan en el formato DXF R14, que puede ser manejado por muchas aplicaciones.
</div>

{| class="wikitable" style="text-align:left;"
|+ DXF exporter entity support comparison
|-
! Feature
! C++ exporter (R14)
! Legacy exporter (R12)
|-
| Supported 2D Geometry
| All except Bezier curves. Ellipses and Splines are exported natively.
| All except Points. Ellipses and B-splines may be inaccurate or exported as polylines.
|-
| Points
| style="text-align:center; color:green;" | '''✓''' <br><small>(If the "Export points" preference is enabled)</small>
| style="text-align:center; color:red;" | '''✗'''
|-
| 3D Objects
| Edges from faces are exported. Curved edges only if on XY plane. May create duplicate lines.
| Exported as flattened 2D views.
|-
| Texts and Dimensions
| style="text-align:center; color:red;" | '''✗'''
| style="text-align:center; color:green;" | '''✓'''
|-
| Colors
| style="text-align:center; color:red;" | '''✗'''
| style="text-align:center; color:green;" | '''✓''' <br><small>(Based on object line color)</small>
|-
| Layers
| style="text-align:center; color:green;" | '''✓''' <br><small>(Mapped from object names)</small>
| style="text-align:center; color:green;" | '''✓''' <br><small>(Mapped from layers and nested groups)</small>
|-
| Compounds
| style="text-align:center; color:red;" | '''✗'''
| style="text-align:center; color:green;" | '''✓''' <br><small>(Exported as blocks)</small>
|}

<span id="Installing"></span>
==Instalación==

Por razones de licencia, las librerías de importación/exportación [[DXF/es|DXF]] necesarias para la versión antigua del importador no forman parte del código fuente de FreeCAD.
Para más información ver: [[FreeCAD_and_DXF_Import/es|Importación FreeCAD y DXF]].

<span id="Preferences"></span>
==Preferencias== 

<div class="mw-translate-fuzzy">
Para más información, consulte: [[Import_Export_Preferences/es|Preferencias de exportación]].
</div>

== DWG ==

Because the DWG format is a proprietary, closed and undocumented format it is hard for open-source projects like FreeCAD to support it. That is why FreeCAD relies on external converters to read and write DWG files. To import a DWG file a converter is used to create a DXF first, which can then be processed by the FreeCAD DXF importer. When exporting to DWG the opposite conversion happens: the DXF created by the FreeCAD DXF exporter is turned into a DWG.

Note that the DXF format allows a 1:1 conversion of the DWG format. All applications that can read and write DWG files can do the same with DXF files, with no data loss. So asking for DXF files instead of DWG files, and supplying DXF files in turn, should not cause any problems.

There is built-in support for the following DWG converters:
* [https://www.gnu.org/software/libredwg LibreDWG] (open-source, lacks support for some DWG entities).
* [https://www.opendesign.com/guestfiles/oda_file_converter ODA File Converter] (free).
* [https://qcad.org/en/qcad-command-line-tools#dwg2dwg QCAD pro] (commercial).

See [[Import_Export_Preferences#DWG|Import Export Preferences]] and [[FreeCAD_and_DWG_Import|FreeCAD and DWG Import]] for more information.

==Scripting==

See also: [https://freecad.github.io/SourceDoc/ Autogenerated API documentation] and [[FreeCAD Scripting Basics|FreeCAD Scripting Basics]].

To export objects to DXF use the {{incode|export}} method of the importDXF module.

{{Code|code=
importDXF.export(objectslist, filename, nospline=False, lwPoly=False)
}}

* For the Windows OS: use a {{FileName|/}} (forward slash) as the path separator in {{Incode|filename}}.

Ejemplo:

{{Code|code=
import FreeCAD as App
import Draft
import importDXF

doc = App.newDocument()

polygon1 = Draft.make_polygon(3, radius=500)
polygon2 = Draft.make_polygon(5, radius=1500)

doc.recompute()

objects = [polygon1, polygon2]
importDXF.export(objects, "/home/user/Pictures/myfile.dxf")
}}


<div class="mw-translate-fuzzy">
{{Docnav/es
|
|[[Draft_SVG/es|SVG]]
|[[Draft_Workbench/es|Modulo Borrador]]
|IconC=Workbench_Draft.svg
}}
</div>

{{Draft Tools navi{{#translation:}}}}
{{Userdocnavi{{#translation:}}}}
[[Category:File Formats{{#translation:}}]]