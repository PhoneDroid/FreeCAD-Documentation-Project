<languages/>

{{TOCright}}

==Introducción==

Para obtener acceso al módulo {{incode|Malla}} hay que importarlo primero:

{{Code|code=
import Mesh
}}

==Creación==

Para crear un objeto de malla vacío basta con utilizar el constructor estándar:

{{Code|code=
mesh = Mesh.Mesh()
}}

También puede crear un objeto a partir de un archivo:

{{Code|code=
mesh = Mesh.Mesh("D:/temp/Something.stl")
}}

O crearla a partir de un conjunto de triángulos descritos por sus puntos de esquina:

{{Code|code=
triangles = [
# triangle 1
[-0.5000, -0.5000, 0.0000], [0.5000, 0.5000, 0.0000], [-0.5000, 0.5000, 0.0000],
#triangle 2
[-0.5000, -0.5000, 0.0000], [0.5000, -0.5000, 0.0000], [0.5000, 0.5000, 0.0000],
]
meshObject = Mesh.Mesh(triangles)
Mesh.show(meshObject)
}}

El Núcleo-Malla se encarga de crear una estructura de datos topológicamente correcta ordenando los puntos y aristas coincidentes.
{{Top}}
==Modelización==

Para crear geometrías regulares se puede utilizar uno de los métodos {{incode|create*()}}. Un toroide, por ejemplo, se puede crear de la siguiente manera:

{{Code|code=
m = Mesh.createTorus(8.0, 2.0, 50)
Mesh.show(m)
}}

Los dos primeros parámetros definen los radios del toroide y el tercer parámetro es un factor de submuestreo para saber cuántos triángulos se crean. Cuanto mayor sea este valor, más suave será la malla.

El módulo {{incode|Malla}} también proporciona tres métodos booleanos: {{incode|union()}}, {{incode|intersection()}} y {{incode|difference()}}:

{{Code|code=
m1, m2              # are the input mesh objects
m3 = Mesh.Mesh(m1)  # create a copy of m1
m3.unite(m2)        # union of m1 and m2, the result is stored in m3
m4 = Mesh.Mesh(m1)
m4.intersect(m2)    # intersection of m1 and m2
m5 = Mesh.Mesh(m1)
m5.difference(m2)   # the difference of m1 and m2
m6 = Mesh.Mesh(m2)
m6.difference(m1)   # the difference of m2 and m1, usually the result is different to m5
}}

Este es un ejemplo que crea una tubería utilizando el método {{incode|difference()}}:

{{Code|code=
import FreeCAD, Mesh
cylA = Mesh.createCylinder(2.0, 10.0, True, 1.0, 36)
cylB = Mesh.createCylinder(1.0, 12.0, True, 1.0, 36)
cylB.Placement.Base = (FreeCAD.Vector(-1, 0, 0)) # move cylB to avoid co-planar faces
pipe = cylA
pipe = pipe.difference(cylB)
pipe.flipNormals() # somehow required
doc = FreeCAD.ActiveDocument
obj = d.addObject("Mesh::Feature", "Pipe")
obj.Mesh = pipe
doc.recompute()
}}
{{Top}}
==Notas==

Una fuente extensa, aunque difícil de usar, de scripts relacionados con la malla son los scripts de pruebas unitarias del módulo {{incode|Mesh}}. 
En estas pruebas unitarias se llaman literalmente todos los métodos y se ajustan todas las propiedades/atributos.
Así que si eres lo suficientemente audaz, echa un vistazo al módulo [https://github.com/FreeCAD/FreeCAD/blob/master/src/Mod/Mesh/App/MeshTestsApp.py Unit Test].

Ver también: [[Mesh_API|Interfaz de programación de aplicaciones Malla]].
{{Top}}
{{Powerdocnavi{{#translation:}}}}
[[Category:Developer Documentation{{#translation:}}]]
[[Category:Python Code{{#translation:}}]]
{{Mesh Tools navi{{#translation:}}}}
{{clear}}