<languages/>

{{Docnav/it
|[[License/it|Licenza]]
|[[Compile_on_Linux/it|Compilazione in Linux]]
}}

{{TOCright}}

Questa pagina spiega passo dopo passo '''come compilare FreeCAD 0.19 o più recente su Windows''' utilizzando il compilatore MSVC di Microsoft. Per informazioni sull'utilizzo di MSYS2/MinGW, vedere [[Compile_on_MinGW/it|Compilare su MinGW]]. Per altre piattaforme vedere [[Compiling/it|Compilare FreeCAD]].

<span id="Prerequisites"></span>
== Prerequisiti ==

La compilazione di FreeCAD su Windows richiede diversi strumenti e librerie.

<span id="Required"></span>
===Programmi richiesti===

* Un compilatore. FreeCAD è testato con Visual Studio (MSVC): altri compilatori potrebbero funzionare, ma le istruzioni per l'uso non sono incluse qui. Per maggiori dettagli, vedere la sezione [[#Compilatore|Compilatore]] di seguito.

* [http://git-scm.com/ Git] (Sono disponibili anche frontend GUI per Git, vedere la sezione successiva.)

* [https://cmake.org/download/ CMake] versione 3.11.x o successiva. </br> ''Suggerimento:'' Scegliendo l'opzione ''Add CMake to the system PATH for all users'', durante l'installazione di CMake, si renderà CMake accessibile dal prompt dei comandi di Windows, il che può essere utile.

* Il [https://github.com/FreeCAD/FreeCAD-LibPack LibPack]. Questo è un singolo pacchetto contenente tutte le librerie necessarie per compilare FreeCAD su Windows. Scaricare la versione del LibPack che corrisponde alla versione di FreeCAD che si desidera compilare. Per compilare FreeCAD 0.20 scaricare il [https://github.com/FreeCAD/FreeCAD-LibPack/releases/tag/2.6 LibPack versione 2.6], per FreeCAD 0.19 scaricare il [https://github.com/FreeCAD/FreeCAD-LibPack/releases/tag/1.0 LibPack versione 1.0]. Estrarre il LibPack in una posizione facilmente accessibile. (Se il tuo computer non riconosce l'estensione .7z, installare il programma [https://www.7-zip.org 7-zip].) </br> '''Nota''': Si consiglia caldamente di compilare FreeCAD con la versione del compilatore per cui è progettato il LibPack. Ad esempio, si potrebbero riscontrare problemi durante la compilazione di FreeCAD 0.20 utilizzando MSVC&nbsp;2017 perché il LibPack è progettato per essere compilato con MSVC&nbsp;2019 o versioni successive.</br>Per aggiornare il LibPack in un secondo momento, consultare la sezione [[#Aggiornamento_del_Libpack|Aggiornamento del Libpack]].

<span id="Optional_programs"></span>
===Programmi opzionali===

* Un frontend GUI per Git. Ci sono diversi frontend disponibili, vedere [https://en.wikipedia.org/wiki/Comparison_of_Git_GUIs questa lista]. Il vantaggio principale di un frontend è che non si devono imparare i comandi Git per scaricare il codice sorgente di FreeCAD o per inviare patch al repository GitHub di FreeCAD.

Di seguito descriviamo la gestione del codice sorgente usando il frontend [https://tortoisegit.org/ TortoiseGit]. Questo frontend si integra direttamente in Windows con Esplora file e dispone di una grande comunità di utenti per ricevere assistenza in caso di problemi.

* [http://sourceforge.net/projects/nsis/ NSIS] viene utilizzato per generare il programma di installazione di Windows di FreeCAD.

<span id="Source_code"></span>
===Codice sorgente===

A questo punto si può scaricare il codice sorgente di FreeCAD:

<span id="Using_a_frontend"></span>
====Utilizzo di un frontend====

Quando si utilizza il [https://en.wikipedia.org/wiki/Comparison_of_Git_GUIs frontend di Git] TortoiseGit:
# Creare una nuova cartella in cui verrà scaricato il codice sorgente.
# Fare clic con il tasto destro su questa cartella in Esplora file di Windows e selezionare nel menu contestuale '''Git Clone'''.
# Apparirà una finestra di dialogo. In esso, inserisci l'URL per il repository Git di FreeCAD

''https://github.com/FreeCAD/FreeCAD.git''

e clicca '''OK'''.

L'ultimo codice sorgente verrà scaricato dal repository Git di FreeCAD e la cartella verrà tracciata da Git.

<span id="Using_the_command_line"></span>
====Usando la riga di comando====

Per creare un ramo locale e scaricare il codice sorgente è necessario aprire un terminale (prompt dei comandi) e portarsi nella directory in cui si desidera creare il sorgente, quindi digitare:

{{Code|code=
git clone --recurse-submodules https://github.com/FreeCAD/FreeCAD.git
}}

<span id="Compiler"></span>
===Compilatore===

Il compilatore predefinito (consigliato) è MS Visual Studio (MSVC). Sebbene sia possibile utilizzare altri compilatori, ad esempio gcc tramite Cygwin o MinGW, questi non sono testati o esaminati qui.

È possibile ottenere una versione gratuita di MSVC (per uso individuale) scaricando la [https://visualstudio.microsoft.com/vs/community/ versione ''Community'' di MS Visual Studio].

Per chi vuole evitare l'installazione completa dell'ingombrante MSVC al solo scopo di avere un compilatore  può vedere [[CompileOnWindows - Reducing Disk Footprint/it|Compilare in Windows - Occupare meno spazio]].

'''Nota:''' Sebbene l'edizione ''Community'' di MSVC sia gratuita, per utilizzare l'IDE per un periodo di prova superiore a 30 giorni è necessario creare un account Microsoft. Se compilerai solo utilizzando la riga di comando, non avrai bisogno dell'IDE e quindi di nessun account Microsoft.

Come IDE alternativo gratuito e OpenSource puoi usare [https://www.kdevelop.org/download KDevelop]. Puoi usare KDevelop per modificare e scrivere codice C++, ma devi usare la riga di comando per compilare.

<span id="Optional_system_path_configuration"></span>
===Configurazione opzionale del percorso di sistema===

Facoltativamente è possibile includere i percorsi di alcune cartelle nella variabile PATH di sistema. Ciò è utile se si desidera accedere ai programmi in queste cartelle dalla riga di comando/powershell o se si desidera che il compilatore o CMake trovino programmi speciali. Oltre a questo, potrebbe essere necessario aggiungere cartelle al PATH se non si sono utilizzate le opzioni corrispondenti durante l'installazione del programma.

* Si può includere la cartella del tuo LibPack nella variabile PATH del tuo sistema. Ciò è utile se si prevede di creare più configurazioni / versioni di FreeCAD.
* Se non si ha utilizzato l'opzione per aggiungere CMake al PERCORSO durante l'installazione, aggiungere la sua cartella di installazione

''C:\Program Files\CMake\bin'' to the PATH.
* Se non si ha utilizzato l'opzione per aggiungere TortoiseGit al PERCORSO durante l'installazione, aggiungere la sua cartella d'installazione

''C:\Program Files\TortoiseGit\bin'' to the PATH.

Per aggiungere percorsi di cartelle alla variabile PATH:
# Nel menu Start di Windows, fare clic con il pulsante destro del mouse su "Computer" e scegliere "Proprietà".
# Nella finestra di dialogo visualizzata, fare clic su "Impostazioni di sistema avanzate".
# Si aprirà un'altra finestra di dialogo. Fare clic nella scheda '' Avanzate '' in '''Variabili d'ambiente'''.
# Ancora una volta si aprirà un'altra finestra di dialogo. Selezionare quindi la variabile '' Percorso '' e fare clic su '''Modifica'''.
# Si aprirà un'altra finestra di dialogo. Fare clic su '''Nuovo''' e aggiungere al percorso la cartella di Git o LibPack.
# Infine cliccare '''OK''' e chiudere tutte le finestre di dialogo cliccando ancora '''OK'''.

<span id="Configuration"></span>
== Configurazione ==

Una volta che hai tutti gli strumenti, le librerie e il codice sorgente di FreeCAD necessari, sei pronto per iniziare il processo di configurazione e compilazione. Questo processo procederà in cinque fasi:
# Eseguire CMake una prima volta per esaminare il tuo sistema e iniziare l'avanzamento della configurazione (verrà segnalato che l'operazione non è riuscita).
# Aggiustare le impostazioni CMake necessarie per configurare i percorsi del LibPack e abilitare Qt5.
# Rieseguire CMake per finalizzare la configurazione (questa volta dovrebbe riuscire).
# Utilizzare CMake per generare il sistema di compilazione di Visual Studio.
# Utilizzare Visual Studio per creare FreeCAD.

===CMake===

Inizialmente configurare l'ambiente di compilazione utilizzando CMake:
# Aprire la GUI di CMake
# Specificare la cartella di origine di FreeCAD.
# Specificare una cartella di compilazione. Questa può essere '''build''' nella cartella in cui è stato clonato il repository, perché questo percorso è ignorato da git. Non utilizzare la cartella di origine. CMake creerà questa cartella se non esiste.
# Fare clic su '''Configura'''.
# Nella finestra di dialogo, che appare, specificare il generatore, che si desidera utilizzare: nella maggior parte dei casi verranno utilizzate le impostazioni predefinite in questa finestra di dialogo. Per lo standard MS Visual Studio utilizzare ''Visual Studio xx 2yyy'' dove xx è la versione del compilatore e 2yyy l'anno del suo rilascio. Si consiglia di utilizzare l'opzione predefinita ''Use default native compilers''.

'''Nota:''' È importante specificare la variante col numero di bit corretta. Se hai la variante a 64 bit di LibPack devi usare anche il compilatore x64.

Questo avvierà la configurazione e ''fallirà'' a causa delle impostazioni mancanti. Questo è normale: non hai ancora specificato la posizione del LibPack. Tuttavia, potrebbero verificarsi altri errori, che richiedono ulteriori azioni da parte tua.

Se non riesce, con il messaggio che Visual Studio non è stato trovato, il supporto CMake in MSVC non è ancora installato. Per farlo:
# Aprire l'IDE MSVC
# Utilizzare il menu Strumenti → Ottieni strumenti e funzionalità
# Nella scheda ''Workloads'' abilita ''Desktop development with C++''
# Sul lato destro ora si dovrebbe vedere il messaggio, che il componente ''Visual C++ tools for CMake'' verrà installato.
# Installarlo.

Se fallisce, con un messaggio relativamente alla versione Python errata o Python mancante, allora:
# Usare la casella "Search:" in CMake per cercare la stringa "Python"
# Se si ottiene un percorso come ''C:/Program Files/Python38/python.exe'', CMake ha trovato, che Python è già installato sul tuo PC, ma che quella versione non è compatibile con il LibPack. Poiché il LibPack include una versione compatibile di Python, modificare le seguenti impostazioni Python nei percorsi di CMake (supponendo che il LibPack si trovi nella cartella ''D:/FreeCAD-build/FreeCADLibs_2_8_x64_VC2019''):
[[File:CMake_Python_settings.png]]

Se non appaiono errori da Visual Studio o da Python, va tutto bene, ma CMake non ha ancora tutte le impostazioni necessarie. Pertanto successivamente:
# Cercare in CMake la variabile '''FREECAD_LIBPACK_DIR''' e specificare la posizione della cartella LibPack, che è stata scaricata in precedenza.
# (Se si sta compilando FreeCAD 0.19) Cercare la variabile '''BUILD_QT5''' e abilitare questa opzione.
# (''Se si sta pianificando di eseguire direttamente dalla cartella di compilazione, ad esempio per il debug'') Cercare e attivare le seguenti opzioni:
#* '''FREECAD_COPY_DEPEND_DIRS_TO_BUILD'''
#* '''FREECAD_COPY_LIBPACK_BIN_TO_BUILD'''
#* '''FREECAD_COPY_PLUGINS_BIN_TO_BUILD'''
# Fare di nuovo clic su '''Configure'''.

Ora non dovrebbero apparire errori. Se si continua a riscontrare errori, che non si riesce a diagnosticare, visitare le pagine [https://forum.freecadweb.org/viewforum.php?f=4 Install/Compile forum] sul sito Web del forum di FreeCAD. Se CMake ha terminato correttamente, cliccare su '''Generate'''. Fatto ciò si può chiudere CMake e avviare la compilazione di FreeCAD utilizzando Visual Studio. Tuttavia, per la prima compilazione, tenerlo aperto nel caso in cui si desideri o sia necessario modificare alcune opzioni per il processo di compilazione.

<span id="Options_for_the_build_process"></span>
=== Opzioni per il processo di compilazione ===

Il sistema di generazione CMake offre la flessibilità necessaria per il processo di creazione. Ciò significa che è possibile attivare e disattivare alcune funzionalità o moduli tramite le variabili di CMake.

Ecco una descrizione di alcune di queste variabili:

{| class="wikitable" style="text-align:left"
|-
! Nome Variabile       !! Descrizione  !! Valore di Default
|-
| BUILD_XXX || Fare il Build di FreeCAD con il componente XXX. Se non si vuole o non si ha bisogno di compilare ad es. l'ambiente ''OpenSCAD'', disabilitare la variabile ''BUILD_OPENSCAD''. FreeCAD quindi non avrà questo ambiente di lavoro. '''Nota:''' Alcuni componenti sono necessari per altri componenti. Se per esempio deselezioni ''BUILD_ROBOT'' CMake ti informerà che il componente ''Path'' non può essere compilato correttamente. Pertanto controllare l'output di CMake dopo aver modificato un'opzione BUILD_XXX! || dipende
|-
| BUILD_ENABLE_CXX_STD || La versione standard del linguaggio C++. '''C++14''' è il più alto possibile per FreeCAD 0.19 mentre almeno '''C++17''' è richiesto per FreeCAD 0.20. Vedere anche la nota nella sezione [[#Compilazione_con_Visual_Studio_15_(2017)_e_successive|Compilazione con Visual Studio 15 (2017) e successive]] || dipende
|-
| BUILD_DESIGNER_PLUGIN|| Per creare il plug-in Qt Designer, consultare [[#Plugin_di_Qt_Designer|questa sezione di seguito]] || OFF
|-
| BUILD_FLAT_MESH|| Necessaria per avere una build che includa la [[MeshPart_CreateFlatMesh/it|funzionalità CreateFlatMesh]] || OFF
|-
| CMAKE_INSTALL_PREFIX   || La cartella di output durante la creazione della destinazione ''INSTALL'', vedere anche la sezione [[#Esecuzione e installazione di FreeCAD|Esecuzione e installazione di FreeCAD]] || Cartella d'installazione predefinita del programma in Windows
|-
| FREECAD_COPY_DEPEND_DIRS_TO_BUILD || Copia le librerie dipendenti necessarie per eseguire FreeCAD.exe nella cartella di compilazione. Vedere anche la sezione [[#Esecuzione e installazione di FreeCAD|Esecuzione e installazione di FreeCAD]].</br> '''Nota:''' le opzioni FREECAD_COPY_XXX appaiono solo se le librerie non sono già state copiate. Se si ha solo bisogno di aggiornare/passare a un'altra versione di LibPack, consultare la sezione [[#Aggiornamento_del_Libpack|Aggiornamento del LibPack]]. Se si desidera ripristinare le opzioni per qualche motivo, si devono eliminare tutte le cartelle nella cartella di compilazione, ad eccezione della cartella LibPack. In CMake cancellare la cache e avviare come se si dovesse compilare per la prima volta. || OFF
|-
| FREECAD_COPY_LIBPACK_BIN_TO_BUILD || Copia i file binari LibPack necessari per eseguire FreeCAD.exe nella cartella di compilazione. Vedere anche la sezione [[#Esecuzione e installazione di FreeCAD|Esecuzione e installazione di FreeCAD]]. || OFF
|-
| FREECAD_COPY_PLUGINS_BIN_TO_BUILD|| Copia i file del plugin di Qt necessari per eseguire FreeCAD.exe nella cartella di compilazione. Vedere anche la sezione [[#Esecuzione e installazione di FreeCAD|Esecuzione e installazione di FreeCAD]]. || OFF
|-
| FREECAD_LIBPACK_USE || Attiva o disattiva l'utilizzo di FreeCAD LibPack. || ON
|-
| FREECAD_LIBPACK_DIR || Directory in cui si trova il LibPack. || Cartella del codice sorgente di FreeCAD
|-
| FREECAD_RELEASE_PDB || Crea librerie di debug (*.pdb) anche per build di rilascio. Non influisce sulla velocità (come farebbe una vera build di debug) e può essere molto utile per individuare arresti anomali nel codice di FreeCAD. Nel caso in cui FreeCAD si arresti in modo anomalo, verrà creato un file ''crash.dmp'' che può essere caricato con MSVC e se si dispone dei file PDB corrispondenti più il codice sorgente di quella versione è possibile eseguire il debug attraverso il codice. Senza i file PDB non è possibile eseguire il debug del codice e tutto ciò che il debugger mostra è il nome della DLL in cui si è verificato il crash. || ON
|-
| FREECAD_USE_MP_COMPILE_FLAG || Aggiunge l'opzione /MP (multiprocessore) ai progetti di Visual Studio, abilitando accelerazioni nelle CPU multi-core. Questo può accelerare notevolmente le build sui processori moderni.</br>'''Nota:''' Se disattivi '''FREECAD_USE_PCH''', la compilazione può sovraccaricare rapidamente lo spazio dell'heap, anche se hai 16 GB di RAM. || ON
|-
| FREECAD_USE_PCH || [https://en.wikipedia.org/wiki/Precompiled_header Precompila the headers] per risparmiare tempo di compilazione. || ON
|-
| FREECAD_USE_PYBIND11|| Include la libreria [https://github.com/pybind/pybind11 PyBind11]. Necessario avere una build che includa la [[MeshPart_CreateFlatMesh/it|funzionalità CreateFlatMesh]].</br>'''Nota:''' dopo averla attivata si potrebbe ricevere un errore di configurazione. Basta configurare di nuovo e il problema dovrebbe scomparire. || OFF
|}

<span id="Building_FreeCAD"></span>
== Compilare FreeCAD ==

A seconda del compilatore, il processo per la compilazione di FreeCAD sarà leggermente diverso. Nelle sezioni seguenti sono descritti i flussi di lavoro noti.
Se stai costruendo con Qt Creator, passa a [[#Compilazione_con_Qt_Creator_(obsoleto)|Compilazione con Qt Creator (obsoleto)]], altrimenti procedi direttamente:

<span id="Building_from_cmd.exe_command_line"></span>
=== Compilazione dalla riga di comando cmd.exe ===

Se si vuole compilare dalla riga di comando, l'output di CMake  mostrerà il comando corretto da eseguire (che dipende dalla release directory configurata). Ma questo comando produrrà una compilazione "Debug" che non funziona su Windows e si traduce in un errore di importazione Numpy in FreeCAD (che è un problema noto ma difficile da risolvere). È necessario specificare l'opzione ''--config Release'' per forzare una build ''Release'':

{{Code|code=
cmake --build E:/release --config Release
}}

Tenere presente che l'impostazione delle variabili CMake come ''CMAKE_BUILD_TYPE'' non ha alcun effetto, funziona solo specificando l'opzione ''--config'' come mostrato sopra.

<div class="mw-collapsible mw-collapsed toccolours">

<span id="Building_with_Visual_Studio_15_(2017)_or_newer"></span>
===Compilazione con Visual Studio 15 (2017) e successive===

<div class="mw-collapsible-content">

<span id="Release_Build"></span>
==== Rilascio della Build ====

# Avviare l'IDE di Visual Studio. Questo si può fare cliccando sul pulsante ''Apri progetto'' nella GUI di CMake o facendo doppio clic sul file ''FreeCAD.sln'', che si trova nella cartella di compilazione.
# Nella barra degli strumenti dell'IDE MSVC assicurarsi di utilizzare per la prima compilazione ''Release''.
# C'è una finestra chiamata ''Solution Explorer''. Elenca tutti i possibili target di compilazione. Per avviare una compilazione completa, fare clic con il pulsante destro del mouse sul target '''ALL_BUILD''' e quindi scegliere '''Build'''.
Ci vorrà molto tempo.

Per compilare un FreeCAD pronto all'uso, compila la destinazione '' INSTALLA '', vedere la sezione [[#Esecuzione_e_installazione_di_FreeCAD|Esecuzione e installazione di FreeCAD]].

Se non ricevi errori, hai finito. '''Congratulazioni!''' Puoi uscire da MSVC o tenerlo aperto.

'''Importante:''' A partire da Visual Studio 17.4 non è possibile utilizzare l'ottimizzazione del codice attiva per impostazione predefinita per il target '''SketcherGui'''. In tal caso, i vincoli angolari verranno posizionati in modo errato negli schizzi. Per risolvere questo problema, fare clic con il pulsante destro del mouse su questo target in Esplora soluzioni MSVC e selezionare l'ultima voce '''Proprietà''' nel menu contestuale. Nella finestra di dialogo che appare andare su C/C++ → Ottimizzazione e disabilitare l'impostazione '''Ottimizzazione'''. Infine costruire di nuovo il target '''ALL_BUILD'''.

<span id="Debug_Build"></span>
==== Compilazione di Debug ====

Per una compilazione di debug è necessario utilizzare Python incluso nel LibPack. Per verificarlo:
# Cercare "Python" nella GUI di CMake
# Se si nota un percorso come ''C:/Program Files/Python38/python.exe'', significa che CMake ha riconosciuto il Python, che è installato sul tuo PC, e non quello del LibPack. In questo caso adattare queste diverse impostazioni Python in CMake alle seguenti (assumendo che il LibPack si trovi nella cartella ''D:\FreeCAD-build\FreeCADLibs_12.5.2_x64_VC17''): [[File:CMake_Python_settings.png]]

Come prerequisito per la build di debug, devi fare questo:
# Copiare il contenuto della cartella LibPack ''bind'' nella cartella ''bin'' della cartella build di FreeCAD (sovrascrivere i file esistenti).
# Copiare il contenuto della cartella LibPack ''libd'' nella cartella ''lib'' della cartella build di FreeCAD.

Adesso puoi compilare:
# Avviare l'IDE di Visual Studio. Questo può essere fatto premendo il pulsante ''Apri progetto'' nella GUI di CMake o facendo doppio clic sul file ''FreeCAD.sln'', che si trova nella cartella di build.
# Nella barra degli strumenti dell'IDE MSVC assicurarsi di utilizzare per la prima compilazione ''Debug''.
# C'è una finestra chiamata ''Solution Explorer''. Elenca tutti i possibili obiettivi di compilazione. Per avviare una compilazione completa, fare clic con il pulsante destro del mouse sul target '''ALL_BUILD''' e scegliere '''Build''' nel menu contestuale.
Richiederà molto tempo.

Se non ci sono stati errori di compilazione e se le opzioni '''FREECAD_COPY_*''' menzionate nella [[#CMake|Fase di configurazione di CMake]] sopra sono state abilitate, si può avviare la build di debug:
# Fare clic con il pulsante destro del mouse sull'obiettivo '''FreeCADMain''' e scegliere '''Set as Startup Project''' nel menu contestuale.
# Infine fare clic sulla barra degli strumenti sul pulsante con il triangolo verde indicato '''Local Windows Debugger'''.

Questo avvierà la build di debug di FreeCAD ed è possibile utilizzare l'IDE MSVC per eseguirne il debug.

==== Risorse video ====
Un tutorial in lingua inglese che inizia con la configurazione in CMake Gui e continua con il comando `Build` in Visual Studio 16 2019 è disponibile unlisted su YouTube all'indirizzo [https://youtu.be/s4pHvlDOSZQ Tutorial: Build FreeCAD from source on Windows 10] .
</div>
</div>
<div class="mw-collapsible mw-collapsed toccolours">

<span id="Building_with_Qt_Creator_(outdated)"></span>
===Compilazione con Qt Creator (obsoleto)===

<div class="mw-collapsible-content">

<span id="Installation_and_configuration_of_Qt_Creator"></span>
==== Installazione e configurazione di Qt Creator ====

* Scaricare e installare [https://www.qt.io/offline-installers Qt Creator]
* Strumenti → Opzioni → Editor di testo → scheda Comportamento:
** Codifica dei file → Codifiche predefinite:
** Impostato su: '''ISO-8859-1 /...csISOLatin1''' (Alcuni caratteri creano errori / avvertimenti con Qt Creator se lasciato impostato su UTF-8. Questo sembra risolverlo.)
* Strumenti → Opzioni → Crea ed esegui:
** Scheda CMake
*** Riempire la casella Eseguibile con il percorso di cmake.exe
** Scheda Kit
*** Nome: MSVC 2008
*** Compilatore: Microsoft Visual C++ Compiler 9.0 (x86)
*** Debugger: rilevato automaticamente ...
*** Versione Qt: Nessuna
** Scheda Generale
*** Deselezionare: crea sempre un progetto prima di distribuirlo
*** Deselezionare: distribuire sempre il progetto prima di eseguirlo

<span id="Import_project_and_building"></span>
==== Importare e creare il progetto ====

* File → Apri file o progetto
* Aprire '''CMakeLists.txt''' che si trova nel livello più alto della fonte
* Questo avvierà CMake
* Scegliere la cartella di costruzione e fare clic su Avanti
* Impostare il generatore su '''NMake Generator (MSVC 2008)'''
* Cliccare Esegui CMake. Seguire le istruzioni illustrate sopra per configurare CMake a tuo piacimento.

Ora è possibile creare FreeCAD
* Build → Build All
* Ci vorrà molto tempo ...

Una volta completato, può essere eseguito:
Ci sono 2 triangoli verdi in basso a sinistra. Uno è il debug. L'altro è l'eseguibile. Scegliere quello che si desidera.
</div>
</div>
<div class="mw-collapsible mw-collapsed toccolours">

<span id="Command_line_build"></span>
=== Compilazione dalla riga di comando ===

<div class="mw-collapsible-content">

I passaggi su come compilare dalla riga di comando dipendono dal compilatore. Per MSVC 2017 i passaggi sono:
# Nel menu Start di Windows andare a {{MenuCommand|Visual Studio 2017 → Visual Studio Tools}} e scegliere '''Prompt dei comandi per sviluppatori per VS 2017'''
# Passare alla tua cartella di build.
# Eseguire il comando

{{Code|code=msbuild ALL_BUILD.vcxproj /p:Configuration=Release}}

o

{{Code|code=msbuild INSTALL.vcxproj /p:Configuration=Release}}

Questi passaggi possono anche essere automatizzati. Ecco ad esempio una soluzione per MSVC 2017:
# Scaricare lo script [https://forum.freecadweb.org/download/file.php?id=92135 compile-FC.txt].
# Rinominarlo in ''compile-FC.bat''
# In Esplora file di Windows fare Shift + Click con il tasto destro del mouse sulla cartella di build e utilizzare dal menu di scelta rapida "Command prompt here".
# Eseguire il comando

{{Code|code=compile-FC install}}

Invece di chiamare '''compile-FC''' con l'opzione ''install'' si può anche usare ''debug'' o ''release'':

''debug'' &nbsp; - compila FreeCAD nella configurazione di debug

''release'' - compila FreeCAD nella configurazione della versione

''install'' &nbsp;&nbsp; - compila FreeCAD nella configurazione di rilascio e crea una versione d'installazione

</div>
</div>

<span id="Running_and_installing_FreeCAD"></span>
==Esecuzione e installazione di FreeCAD==

Esistono 2 metodi per eseguire FreeCAD compilato:

''Metodo 1'': Eseguire FreeCAD.exe che si trova nella cartella di compilazione nella sottocartella ''bin''

''Metodo 2'': compilare il target ''INSTALL''

Il metodo 2 è quello più semplice, perché assicura automaticamente che tutte le librerie necessarie per eseguire FreeCAD.exe siano nella cartella corretta. FreeCAD.exe e le librerie verranno emessi nella cartella specificata nella variabile CMake ''CMAKE_INSTALL_PREFIX''.

Per il Metodo 1 devi abilitare le opzioni '''FREECAD_COPY_*''' menzionate nella [[#CMake|Fase di configurazione di CMake]] sopra.

<span id="Troubleshooting"></span>
===Risoluzione dei problemi===

Durante l'esecuzione di FreeCAD è possibile riscontrare DLL mancanti quando si utilizzano determinati ambienti di lavoro o funzionalità di ambienti di lavoro. Il messaggio di errore nella console di FreeCAD non ti dirà quale DLL manca. Per scoprirlo è necessario utilizzare uno strumento esterno:

* Scaricare l'ultima versione del programma '''Dependencies''': https://github.com/lucasg/Dependencies/releases (scegliere il file ''Dependencies_x64_Release.zip'')
* Nella [[console Python]] di FreeCAD eseguire questi comandi:
 <nowiki>import os
os.system(r"~\DependenciesGui.exe")</nowiki>
'''Nota''': invece di ~ si deve specificare il percorso completo di ''DependenciesGui.exe'' sul tuo sistema.
* Ora trascinare il file *.pyd del workbench con il quale si ottengono le DLL mancanti segnalate.

<span id="Updating_the_build"></span>
==Aggiornamento della compilazione==

FreeCAD è sviluppato molto attivamente. Pertanto il suo codice sorgente cambia quasi quotidianamente. Nuove funzionalità vengono aggiunte e i bug corretti. Per beneficiare di queste modifiche al codice sorgente, è necessario ricompilare FreeCAD. Questo avviene in due fasi:
# Aggiornamento del codice sorgente
# Ricompilazione

<span id="Updating_the_source_code"></span>
===Aggiornamento del codice sorgente===

<span id="Using_a_frontend"></span>
====Usando un frontend====

Quando si utilizza il [https://en.wikipedia.org/wiki/Comparison_of_Git_GUIs frontend di Git] TortoiseGit:
# Fare clic con il tasto destro del mouse sulla cartella del codice sorgente di FreeCAD in Esplora file di Windows e selezionare nel menu di scelta rapida '''Pull' ''.
# Apparirà una finestra di dialogo. Selezionare quale ramo di sviluppo vuoi utilizzare. '''master''' è il ramo principale. Pertanto utilizzare questo a meno che non si desideri compilare una nuova funzionalità speciale da un ramo che non è stato ancora unito a "master". (Per ulteriori informazioni sui rami Git, vedere [[Source_code_management/it#Processo_di_sviluppo_Git|Processo di sviluppo Git]]).

Finalmente cliccare su '''OK'''.

<span id="Using_the_command_line"></span>
====Utilizzando la riga di comando====

Aprire un terminale (prompt dei comandi) e passare alla cartella di origine. Quindi digitare:

{{Code|code=
git pull https://github.com/FreeCAD/FreeCAD.git master
}}

dove ''master'' è il nome del ramo di sviluppo principale. Se si vuole ottenere il codice da un altro ramo, usare il suo nome invece di ''master''.

<span id="Recompilation"></span>
===Ricompilazione===

# Aprire l'IDE MSVC facendo doppio clic sul file ''FreeCAD.sln'' o sul file ''ALL_BUILD.vcxproj'' nella cartella di compilazione.
# Continuare con il passaggio 2 dalla sezione [[#Compilazione_con_Visual_Studio_15_(2017)_e_successive|Compilazione con Visual Studio 15 (2017) e successive]].

<span id="Updating_the_LibPack"></span>
==Aggiornamento del Libpack==

Se viene rilasciata una nuova versione principale di una dipendenza di terze parti come Open Cascade o se una dipendenza di terze parti ha importanti correzioni di bug, viene rilasciato un nuovo LibPack. Si può trovare l'ultima versione [https://github.com/FreeCAD/FreeCAD-LibPack/releases/ qui].

Per aggiornare il tuo LibPack, la seguente procedura è la pratica migliore:
# Eliminare la cartella ''bin'' nella tua cartella di compilazione.
# Passare alla tua cartella LibPack locale ed eliminare tutto il contenuto.
# Estrarre il contenuto del nuovo file ZIP LibPack nella cartella LibPack locale esistente, che ora è vuota.
# Aprire CMake e premere il pulsante '''Configure''' e poi il pulsante '''Generate'''. Questo ricrea la cartella ''bin'' appena eliminata e vi copia anche i nuovi file LibPack.
# In CMake fare clic sul pulsante '''Open Project''' e si aprirà l'IDE MSVC.
# Nell'IDE MSVC creare la destinazione ''INSTALL''.

<span id="Tools"></span>
==Strumenti==

Per partecipare allo sviluppo di FreeCAD è necessario compilare e installare i seguenti strumenti:

<span id="Qt_Designer_plugin"></span>
===Plugin di Qt Designer===

FreeCAD usa [https://en.wikipedia.org/wiki/Qt_(software) Qt] come toolkit per la sua interfaccia utente. Tutte le finestre di dialogo sono impostate in file UI che possono essere modificati utilizzando il programma [https://doc.qt.io/qt-5/qtdesigner-manual.html Qt Designer] che fa parte di qualsiasi installazione di Qt ed è anche incluso nel LibPack. FreeCAD ha il proprio set di widget Qt per fornire funzionalità speciali come l'aggiunta di un'unità ai campi di input e per impostare le proprietà delle preferenze.

<span id="Compilation"></span>
====Compilazione====

Il plugin non può essere caricato da Qt Designer se è stato compilato utilizzando una versione di Qt diversa da quella su cui si basa Qt Designer/Qt Creator. Pertanto il plugin deve essere compilato insieme a FreeCAD:

* Nelle opzioni di CMake (vedere [[#Opzioni_per_il_processo_di_compilazione|questa sezione sopra]]) abilitare l'opzione BUILD_DESIGNER_PLUGIN e riconfigurare.
* aprire MSVC e creare il target '''FreeCAD_widgets'''

Come risultato si otterrà il file del plugin '''FreeCAD_widgets.dll'' nella cartella</br>''~\src\Tools\plugins\widget\Release''

<span id="Installation"></span>
====Installazione====

Per installare il plugin, copia la DLL in
* Se si usa il LibPack: nella cartella</br>''~\FreeCADLibs_2_8_x64_VC2019\plugins\designer''
* Se si ha un'installazione Qt completa: si può scegliere tra la cartella</br>''C:\Qt\5.15.2\msvc2019_64\plugins\designer''</br>o</br>''C: \Qt\5.15.2\msvc2019_64\bin\designer'' (si deve prima creare la sottocartella ''designer''.)</br>(adattare i percorsi alla propria installazione!).

Infine (ri)avviare Qt Designer e controllare il suo menu {{MenuCommand|Help → Plugins}}. Se il plugin '''FreeCAD_widgets.dll''' è elencato come caricato, ora si può progettare e modificare i file .ui di FreeCAD. In caso contrario, si deve [[#Compilare_FreeCAD|compilare]] la DLL da se.

Se si preferisce usare [https://en.wikipedia.org/wiki/Qt_Creator Qt Creator] invece di Qt Designer, il file del plugin deve essere posizionato in questa cartella:</br>''C:\Qt\Qt5.15.2 \Tools\QtCreator\bin\plugins\designer''</br>Quindi (ri)avviare Qt Creator, passare alla modalità '''Design''' e controllare il menu {{MenuCommand|Tools → Form Editor → About Qt Designer Plugins}}. Se il plugin '''FreeCAD_widgets.dll''' è elencato tra quelli caricati, si può progettare e modificare i file .ui di FreeCAD. In caso contrario, ci si deve [[#Compilare_FreeCAD|compilare]] la DLL.

<span id="Thumbnail_Provider"></span>
===Creatore di miniature===

FreeCAD ha la funzionalità per fornire miniature di anteprima per i file *.FCStd. Ciò significa, che nel file explorer di Windows i file *.FCStd, sono mostrati con uno screenshot del modello che contiene. Per fornire questa funzionalità, FreeCAD deve avere il file '''FCStdThumbnail.dll''' installato in Windows.

<span id="Installation"></span>
====Installazione====

La DLL viene installata in questo modo:
# Scaricare [https://forum.freecadweb.org/download/file.php?id=13404 questo file ZIP] ed estrarlo.
# Aprire un prompt dei comandi di Windows con privilegi di amministratore (questi privilegi sono un requisito).
# Passare alla cartella in cui si trova la DLL.
# Eseguire questo comando {{Code|code=regsvr32 FCStdThumbnail.dll}}

Quindi controllare se funziona, assicurarsi che in FreeCAD l'opzione delle preferenze '''[[Preferences_Editor/it#Documento|Salva la miniatura nel file di progetto al salvataggio del documento]]''' sia abilitata e salvare il modello. Quindi visualizzare in Windows Explorer la cartella del modello salvato utilizzando una vista simboli. Ora si dovrebbe vedere uno screenshot del modello nella vista delle cartelle.

<span id="Compilation"></span>
====Compilazione====

Per compilare FCStdThumbnail.dll
# Passare alla cartella sorgente di FreeCAD</br>''~\src\Tools\thumbs\ThumbnailProvider''
# Aprire la GUI di CMake
# Specificare come cartella di origine quella in cui ci si trova attualmente.
# Usare la stessa cartella della cartella build.
# Fare clic su '''Configure'''
# Nella finestra di dialogo che appare, specificare il generatore in base a quello che si vuole usare. Per lo standard MS Visual Studio utilizzare ''Visual Studio xx 2yyy'' dove xx è la versione del compilatore e 2yyy l'anno del suo rilascio. Si consiglia di utilizzare l'opzione predefinita ''Use default native compilers''.</br>'''Nota:''' È importante specificare la variante col numero di bit corretta. Se si ha la variante a 64 bit di LibPack si deve usare anche il compilatore x64.
# Cliccare su '''Generate'''.
# Ora si dovrebbe avere il file '''ALL_BUILD.vcxproj''' nella cartella ''~\src\Tools\thumbs\ThumbnailProvider''. Fare doppio clic su di esso e si aprirà l'IDE MSVC.
# Nella barra degli strumenti dell'IDE MSVC assicurarsi di utilizzare l'obiettivo di compilazione ''Release''.
# C'è una finestra chiamata ''Solution Explorer''. Fare clic destro su '''ALL_BUILD''' e poi sceglire '''Build'''.
# Come risultato ora si dovrebbe avere un '''FCStdThumbnail.dll''' nella cartella ''~\src\Tools\thumbs\ThumbnailProvider\release'', che si può installare come descritto sopra.

<span id="Compiling_Open_Cascade"></span>
== Compilazione di Open Cascade==

Il LibPack viene fornito con una versione di [https://en.wikipedia.org/wiki/Open_Cascade Open Cascade] adatta all'uso generale. Tuttavia, in alcune circostanze potresti voler compilare con una versione alternativa di Open Cascade, come ad esempio una delle loro versioni ufficiali o un fork con patch.

Durante la compilazione di Open Cascade per FreeCAD, si tenga presente che non vi è alcuna garanzia che FreeCAD funzioni con tutte le versioni di Open Cascade. Si noti inoltre che quando si utilizza la libreria Netgen, è necessario utilizzare una versione NetGen approvata per la compilazione con la versione Open Cascade che si desidera compilare.

Compilare:
* Per prima cosa si deve ottienere il codice sorgente di Open Cascade, direttamente dal [https://github.com/Open-Cascade-SAS/OCCT repository git di Open Cascade] o clonando il fork di qualcun altro, come ad esempio il [https://gitlab.com/blobfish/occt fork "blobfish"] gestito dal membro del forum di FreeCAD [https://forum.freecadweb.org/memberlist.php?mode=viewprofile&u=208 tanderson69].

* Quindi aprire la GUI di CMake per configurare il sistema di compilazione in modo simile alla creazione di FreeCAD. Queste opzioni di CMake devono essere impostate (o esplicitamente non impostate):
{| class="wikitable" style="text-align:left"
|-
! Nome Variabile       !! Descrizione  !! Valore di Default
|-
| 3RDPARTY_DIR|| Percorso verso i componenti di terze parti. Si consiglia di utilizzare la cartella come input in cui si trova il LibPack utilizzato. Lasciare esplicitamente vuoto questo campo.|| vuoto
|-
| 3RDPARTY_DOXYGEN_EXECUTABLE|| Percorso dell'eseguibile del componente di terze parti [https://en.wikipedia.org/wiki/Doxygen Doxygen]. Si consiglia di installare Doxygen. Così CMake lo troverà automaticamente.|| vuoto
|-
| 3RDPARTY_FREETYPE_DIR|| Percorso del componente di terze parti necessario [https://en.wikipedia.org/wiki/FreeType Freetype]. Si consiglia di utilizzare la cartella come input in cui si trova il LibPack utilizzato.|| vuoto
|-
| 3RDPARTY_RAPIDJSON_DIR|| Disponibile solo se viene utilizzato '''USE_RAPIDJSON'''. Percorso del componente di terze parti [https://rapidjson.org/ RapidJSON]. Si consiglia di NON utilizzare una cartella LibPack esistente come input. Si può usare la cartella RapidJSOn da un LibPack, ma copiata in una nuova cartella e poi usare questa nuova cartella come input.|| vuoto
|-
| 3RDPARTY_TCL_DIR|| Percorso al componente di terze parti necessario [https://it.wikipedia.org/wiki/Tcl TCL]. Si consiglia di NON utilizzare una cartella LibPack esistente come input. Prendere ad esempio una di [https://github.com/teclab-at/tcltk/releases queste versioni], estrarla e prenderla come cartella di input per CMake.|| vuoto
|-
| 3RDPARTY_TK_DIR|| Percorso del componente di terze parti necessario [https://en.wikipedia.org/wiki/Tk_(software) TK]. Si consiglia di NON utilizzare una cartella LibPack esistente come input. Prendere ad esempio una di [https://github.com/teclab-at/tcltk/releases queste versioni], estrarla e prenderla come cartella di input per CMake.|| vuoto
|-
| 3RDPARTY_VTK_DIR|| Disponibile solo se viene utilizzato '''USE_VTK'''. Percorso del componente di terze parti necessario [https://en.wikipedia.org/wiki/VTK VTK]. Si consiglia di utilizzare la cartella come input in cui si trova il LibPack utilizzato. Se si utilizza un'altra cartella, assicurarsi di non utilizzare VTK 9.x o versioni successive.|| vuoto
|-
| BUILD_RELEASE_DISABLE_EXCEPTIONS|| Disabilita la gestione delle eccezioni per le build di rilascio. Per FreeCAD si deve impostarlo su '''OFF'''.|| ON
|-
| INSTALL_DIR|| Cartella di output durante la creazione della destinazione ''INSTALL''. Se la compilazione è andata a buon fine, prendere i file da questa cartella per aggiornare il tuo LibPack.
|| Cartella d'installazione predefinita del programma in Windows 
|-
| INSTALL_DIR_BIN|| Sottocartella di output per la DLL durante la creazione del target ''INSTALL''. Si deve cambiarlo in '''bin'''.|| win64/vc14/bin
|-
| INSTALL_DIR_LIB|| Sottocartella di output per i file .lib durante la creazione della destinazione ''INSTALL''. Si deve cambiarlo in '''lib'''.|| win64/vc14/lib
|-
| USE_RAPIDJSON|| Per compilare Open Cascade con supporto per RapidJSON. L'abilitazione è obbligatoria per ottenere supporto per il formato file [https://en.wikipedia.org/wiki/Gltf glTF].|| OFF
|-
| USE_VTK|| Per compilare Open Cascade con supporto per VTK. Abilitare questo è ottimale. Si può usarlo per costruire il bridge VTK di Open Cascade.
|| OFF
|}

* Aprire il progetto in Visual Studio e per prima cosa creare i target ALL_BUILD e poi INSTALL in modalità '''Release'''.
* Ripetere la creazione dei due target nella modalità '''Debug'''.

Per creare FreeCAD, utilizzando Open Cascade autocompilato, è necessario eseguire le seguenti operazioni:
* Copiare tutte le cartelle da INSTALL_DIR nella tua cartella LibPack (sovrascrivere i file esistenti)
* Passare alla cartella LibPack e andare lì alla sottocartella ''cmake''
* Aprire il file ''OpenCASCADEDrawTargets.cmake'' con un editor di testo
* Cercare i percorsi assoluti della tua cartella LibPack e rimuoverli. Quindi ad es. il percorso assoluto</br>''D:/FreeCADLibs_12.5.4_x64_VC17/lib/freetype.lib''</br>diventerà solo </br>''freetype.lib''</br>
* Fare lo stesso per il file ''OpenCASCADEVisualizationTargets.cmake''

<span id="Compiling_Netgen"></span>
== Compilazione di Netgen==

Il LibPack viene fornito con una versione di [https://ngsolve.org Netgen] che sarà stata testata per essere compilata con la versione Open Cascade del LibPack. Il problema è che ogni nuova versione di Netgen cambia l'API. Anche ogni nuova versione di Open Cascade fa lo stesso. Pertanto non si può semplicemente cambiare in modo semplice la versione di Netgen.

Tuttavia, potresti comunque compliare Netgen. Questa è un'attività semplice:

* Per prima cosa scaricare il codice sorgente di Netgen, direttamente dal repository git di [https://github.com/NGSolve/netgen Netgen].
* Quindi aprire la GUI di CMake, per configurare il sistema di compilazione in modo simile alla creazione di FreeCAD. Devono essere impostate le seguenti opzioni di CMake :
{| class="wikitable" style="text-align:left"
|-
! Nome Variabile       !! Descrizione  !! Valore di Default
|-
| CMAKE_INSTALL_PREFIX|| Cartella di output durante la creazione della destinazione ''INSTALL''. Se la compilazione è andata a buon fine, prendere i file da questa cartella per aggiornare il tuo LibPack.
|| C:/netgen
|-
| OpenCasCade_DIR|| Percorso dei file CMake di Open Cascade. Se si è compilato Open Cascade come descritto nella sezione [[#Compilazione_di_Open_Cascade|Compilazione di Open Cascade]] si può usare la sottocartella ''cmake'' della cartella usata come INSTALL_DIR. In caso contrario, usare la sottocartella ''cmake'' del tuo LibPack. Si noti che il LibPack deve già contenere una corretta build Open Cascade. Indipendentemente dalla cartella utilizzata, si deve creare anche una sottocartella ''lib'' e copiarvi i file ''freetype.lib'' e ''freetyped.lib'' dal tuo LibPack.|| vuoto
|-
| USE_GUI|| Impostarlo a '''OFF'''
|| ON
|-
| USE_NATIVE_ARCH|| Impostarlo su '''OFF'''; questo è necessario solo per supportare le CPU più vecchie che non hanno il set di istruzioni [https://en.wikipedia.org/wiki/Advanced_Vector_Extensions AVX2].
|| ON
|-
| USE_OCC|| Impostarlo a '''ON'''
|| OFF
|-
| USE_PYTHON|| Impostarlo a '''OFF'''
|| ON
|-
| USE_SUPERBUILD|| Impostarlo a '''OFF'''
|| ON
|-
| ZLIB_INCLUDE_DIR|| Percorso del componente di terze parti necessario [https://en.wikipedia.org/wiki/Zlib zlib]. Si consiglia di utilizzare la cartella come input in cui si trova il LibPack utilizzato.
|| vuoto
|-
| ZLIB_LIBRARY_DEBUG|| Percorso del file ZLib ''zlibd.lib''. Si trova nella sottocartella ''lib'' della cartella LibPack.
|| vuoto
|-
| ZLIB_LIBRARY_RELEASE|| Il percorso del file ZLib ''zlib.lib''. Si trova nella sottocartella ''lib'' della cartella LibPack.
|| vuoto
|}

* Inoltre è necessario aggiungere una nuova voce CMake:
nome: ''CMAKE_DEBUG_POSTFIX'', tipo: ''stringa'', contenuto: '''_d'''</br>
Ciò garantisce che i nomi dei file delle librerie di debug abbiano un nome diverso rispetto alle librerie di rilascio e non possano essere successivamente scambiati accidentalmente.

* Premere il pulsante ''Configura'' in CMake per generare i file *.cmake.
* Necessario solo se devono essere supportate CPU precedenti che non dispongono del set di istruzioni AVX2:
** Cercare nella tua cartella di build Netgen il file ''netgen-targets.cmake'' e aprirlo con un editor di testo. Rimuovere l'impostazione '';/arch:AVX2'' nell'opzione INTERFACE_COMPILE_OPTIONS.
** Premere di nuovo il pulsante "Configure" in CMake.
* Premere il pulsante "Generate" in CMake.
* Aprire il progetto in Visual Studio e creare prima i target ALL_BUILD e poi INSTALL in modalità '''Release'''.
* Ripetere la creazione dei due obiettivi nella modalità '''Debug'''.

Per compilare FreeCAD, utilizzando Netgen autocompilato, è necessario eseguire le seguenti operazioni:
* Copiare tutte le cartelle da CMAKE_INSTALL_PREFIX nella tua cartella LibPack (sovrascrivere i file esistenti)

<span id="References"></span>
== Riferimenti ==

Vedere anche 
* [[Compiling_(Speeding_up)/it|Velocizzare la compilazione]]


{{Docnav/it
|[[License/it|Licenza]]
|[[Compile_on_Linux/it|Compilazione in Linux]]
}}

{{Userdocnavi{{#translation:}}}}
[[Category:Developer_Documentation{{#translation:}}]]
[[Category:Developer{{#translation:}}]]