<languages/>
<div class="mw-translate-fuzzy">
{{VeryImportantMessage|(Novembre 2018) Queste informazioni potrebbero essere incomplete e obsolete. Per l'ultima API, consultare [https://www.freecadweb.org/api autogenerated API documentation].}}
Queste funzioni fanno parte di [[TechDraw Workbench/it|TechDraw]] e possono essere utilizzate nelle [[macros/it|macro]] e dalla console [[Python/it|Python]] dopo l'importazione del modulo {{incode|TechDraw}}.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Good examples of basic TechDraw scripting can be found in the [https://github.com/FreeCAD/FreeCAD/tree/master/src/Mod/TechDraw/TDTest unit test scripts].
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
See the [[TechDrawGui API|TechDrawGui API]] for more functions.
</div>

Esempio:

{{Code|code=
import FreeCAD
import TechDraw

page = FreeCAD.ActiveDocument.addObject('TechDraw::DrawPage', 'Page')
FreeCAD.ActiveDocument.addObject('TechDraw::DrawSVGTemplate', 'Template')
FreeCAD.ActiveDocument.Template.Template = templateFileSpec
FreeCAD.ActiveDocument.Page.Template = FreeCAD.ActiveDocument.Template
page.ViewObject.show()
view = FreeCAD.ActiveDocument.addObject('TechDraw::DrawViewPart', 'View')
rc = page.addView(view)
}}

<div class="mw-translate-fuzzy">
{{APIFunction|EdgeWalker|listOfEdges, [bool]|Crea polilinee dai bordi in ingresso tramite grafici planari trasversali. Opzionalmente si può escludere la OuterWire impostando il parametro opzionale su falso.|Elenco dei wire ordinati per dimensione (decrescente)}}
{{APIFunction|findOuterWire|listOfEdges|Trova l'OuterWire (più grande) in un elenco di bordi (che formano un grafo planare).|Outer wire}}
{{APIFunction|findShapeOutline|TopoShape, scale, direction|Proietta la forma nella direzione e trova il wire esterno nel risultato.|Outline wire}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{APIFunction|viewPartAsDxf|DrawViewPart|Return the edges of a DrawViewPart in Dxf format.|String}}
Example:
</div>

{{Code|code=
fileSpecDxf = "fcOut.dxf"
v = App.ActiveDocument.View
s = TechDraw.viewPartAsDxf(v)
dxfEnd = "0\nEOF\n"
dxfFile = open(fileSpecDxf, "w")
dxfFile.write(s)
dxfFile.write(dxfEnd)
dxfFile.close()
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
{{APIFunction|viewPartAsSvg|DrawViewPart|Return the edges of a DrawViewPart in Svg format.|String}}
Example:
</div>

{{Code|code=
fileSpecSvg = "fcOut.svg"
v = App.ActiveDocument.View
s = TechDraw.viewPartAsSvg(v)
head = '<svg\n' + \
       '	xmlns="http://www.w3.org/2000/svg" version="1.1" \n' + \
       '	xmlns:freecad="https://wiki.freecad.org/index.php?title=Svg_Namespace">\n'
tail = '\n</svg>'
svgFile = open(fileSpecSvg, "w")
svgFile.write(head)
svgFile.write(s)
svgFile.write(tail)
svgFile.close()
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
{{APIFunction|writeDXFView|DrawViewPart, FileName|Save the DrawViewPart in Dxf.|File}}
Example:
</div>

{{Code|code=
import TechDraw
TechDraw.writeDXFView(myPart,myFileName)
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
{{APIFunction|writeDXFPage|DrawPage, FileName|Save the DrawPage in Dxf.|File}}
Example:
</div>

{{Code|code=
import TechDraw
TechDraw.writeDXFPage(myPage,myFileName)
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
===DrawViewPart Cosmetics===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
====CosmeticVertex (CV) routines accessible from Python====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
dvp = App.ActiveDocument.View  #CV's belong to views.<br>
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Add a CosmeticVertex at p1 (View coordinates). Returns unique tag.<br>
tag = dvp.makeCosmeticVertex(vector p1)
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
Add a CosmeticVertex at p1 (3d model coordinates). Returns unique tag.<br>
tag = dvp.makeCosmeticVertex3d(vector p1)
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
Returns CosmeticVertex with unique id.<br>
cv = dvp.getCosmeticVertex(string id)
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
Returns CosmeticVertex with name (Vertex6). Used in selections.<br>
cv = dvp.getCosmeticVertexBySelection(string name)
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
Removes CosmeticVertex from View. Returns None.<br>
dvp.removeCosmeticVertex(object cv)
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
Removes all CosmeticVertices from the View. Returns None.<br>
dvp.clearCosmeticVertices()
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
CosmeticView attributes<br>
Tag: unique identifier. String.<br>
Point: location within view. Vector.<br>
</div>

<!--T:28-->
********************************************************************************
{{Code|code=
#!/usr/bin/env python
# -*- coding: utf-8 -*-

<!--T:29-->
# Py CosmeticVertex demo
import FreeCAD
import TechDraw

<!--T:30-->
v = App.ActiveDocument.View
p = App.Vector(-3.0, -3.0, 0.0)

<!--T:31-->
#make CV
tag = v.makeCosmeticVertex(p)
print("t: {}".format(tag))

<!--T:32-->
#retrieve CV
cv = v.getCosmeticVertex(tag)
print("cv: {}".format(cv))
print("Tag: {}".format(cv.Tag))


<!--T:34-->
cv2 = v.getCosmeticVertexBySelection("Vertex4")
print("New Point: {}".format(cv2.Point))

<!--T:35-->
#make CV from 3d
p3d = App.Vector(2.0, 2.0, 2.0)
print("3d point in: {}".format(p3d))
tag3d = v.makeCosmeticVertex3d(p3d)
cv3 = v.getCosmeticVertex(tag3d)
print("3d point out: {}".format(cv3.Point))
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
====CosmeticEdge (CE) routines accessible from Python====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
dvp = App.ActiveDocument.View  #CE's belong to views.<br>
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Make a CosmeticEdge from p1 to p2(View coordinates). Returns unique tag.<br>
tag = dvp.makeCosmeticLine(p1, p2)
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Make a CosmeticEdge at center with radius radius(View coordinates). Returns unique tag.<br>
tag = dvp.makeCosmeticCircle(center, radius)
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Make a CosmeticEdge at center with radius radius(View coordinates) from start angle to end angle. Returns unique tag.<br>
tag = dvp.makeCosmeticCircleArc(center, radius, start, end)
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Returns CosmeticEdge with unique id.<br>
ce = dvp.getCosmeticEdge(id)
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Returns CosmeticEdge by name (Edge25).  Used in selections.<br>
ce = dvp.getCosmeticEdgeBySelection(name)
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Removes CosmeticEdge ce from View. Returns None.<br>
dvp.removeCosmeticEdge(ce)
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Removes all CosmeticLines from the View. Returns None.<br>
dvp.clearCosmeticEdges()
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
CosmeticEdge attributes<br>
Tag: unique identifier. String.<br>
Format: appearance attributes (style, color, weight, visible). Tuple.<br>
</div>

<!--T:47-->
********************************************************************************
{{Code|code=
#!/usr/bin/env python
# -*- coding: utf-8 -*-

<!--T:48-->
# Py CosmeticEdge demo
import FreeCAD
import TechDraw

<!--T:49-->
#points
org = App.Vector(0.0, 0.0, 0.0)
midTop = FreeCAD.Vector (1.0, 5.0, 0.0)   # middle, top
midBot = FreeCAD.Vector(2.0, -5.0, 0.0)      # middle, bottom
stdZ = FreeCAD.Vector(0.0, 0.0, 1.0)
center = FreeCAD.Vector(0.0, 0.0, 0.0)
arcCenter = FreeCAD.Vector(3.0, 3.0, 0.0)
vPt = FreeCAD.Vector(-3.0, 3.0, 0.0)
topRight = FreeCAD.Vector(5.0, 5.0, 0.0)
bottomLeft = FreeCAD.Vector(-5.0, -5.0, 0.0)

<!--T:50-->
#angles
arcStart = -45
arcEnd = 45

<!--T:51-->
#styles
solid = 1 
dashed = 2
dotted = 3
#weights
weight15 = 0.15
weight75 = 0.75
#colors
pyRed = (1.0, 0.0, 0.0, 0.0)
pyBlue = (0.0, 1.0, 0.0, 0.0)
pyGreen = (0.0, 0.0, 1.0, 0.0)
pyBlack = (0.0, 0.0, 0.0, 0.0)
shadow = (0.1, 0.1, 0.1, 0.0)

<!--T:52-->
radius = 5.0
style = dashed
weight = weight75

<!--T:53-->
dvp = App.ActiveDocument.View

<!--T:54-->
print(dvp)

<!--T:55-->
print("making line")
tag = dvp.makeCosmeticLine(midTop,midBot,style, weight, pyBlue)
ce = dvp.getCosmeticEdge(tag)
print("line tag: {}".format(tag))

<!--T:56-->
print("making diagonal")
dvp.makeCosmeticLine(bottomLeft,topRight,solid, weight, pyGreen)

<!--T:57-->
print("making circle")
tag2 = dvp.makeCosmeticCircle(center, radius, style, weight, pyRed)
ce2 = dvp.getCosmeticEdge(tag2)

<!--T:58-->
print("making circleArc")
dvp.makeCosmeticCircleArc(arcCenter, radius, arcStart, arcEnd, style, weight, shadow)

<!--T:59-->
#replace
print("making new format")
oldFormat = ce.Format
newFormat = (dotted,oldFormat[1], pyRed, True)
ce.Format = newFormat

<!--T:61-->
print("removing CE with tag: {}".format(tag2))
dvp.removeCosmeticEdge(tag2)

<!--T:62-->
print("finished")
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
====CenterLine (CL) routines accessible from Python====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Makes a new CenterLine<br>
tag = dvp.makeCenterLine(subObjs, mode)<br>
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Retrieves CenterLine with unique tag.<br>
cl = dvp.getCenterLine(tag)
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Retrieves CenterLine by subobject name. Used in selection.<br>
cl = dvp.getCenterLine("Edge5")
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Removes CenterLine cl from View. Returns None.<br>
dvp.removeCenterLine(cl)
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
CenterLine Attributes<br>
Tag: unique identifier. String. ReadOnly.<br>
Type: 0 - face, 1 - 2 line, 2 - 2 point. Integer. ReadOnly.<br>
Mode: 0 - vert, 1 - horiz, 2 - aligned. Integer.<br>
Format: appearance attributes (style, color, weight, visible). Tuple.<br>
HorizShift: left/right offset. Float.<br>
VertShift: up/down offset. Float.<br>
Rotation: rotation in degrees. Float.<br>
Extension: additional length to be added. Float.<br>
Flip: reverse the order of points for 2 point CenterLine. Boolean.<br>
Edges: names of source edges. List of string.<br>
Faces: names of source faces. List of string.<br>
Points: names of source points (Vertices). List of string.<br>
</div>

<!--T:70-->
********************************************************************************
{{Code|code=
#!/usr/bin/env python
# -*- coding: utf-8 -*-

<!--T:71-->
# Py CenterLine demo
import FreeCAD
import Part
import TechDraw

<!--T:72-->
start = FreeCAD.Vector (1.0, 5.0, 0.0)   # middle, top
end = FreeCAD.Vector(1.0, -5.0, 0.0)      # middle, bottom
faceNames = ["Face0"]
edgeNames = ["Edge2", "Edge3"]
vertNames = ["Vertex1", "Vertex2"]
vMode = 0   #vertical
hMode = 1   #horizontal
aMode = 2   #aligned
#styles
solid = 1 
dashed = 2
dotted = 3
#weights
weight15 = 0.15
weight75 = 0.75
#colors
pyRed = (1.0, 0.0, 0.0, 0.0)
pyBlue = (0.0, 1.0, 0.0, 0.0)
pyBlack = (0.0, 0.0, 0.0, 0.0)
#adjustments
hShift = 1.0
vShift = 1.0
extend = 4.0
rotate = 30.0
flip = False;

<!--T:73-->
dvp = App.ActiveDocument.View

<!--T:74-->
print("making face CenterLine")
tag = dvp.makeCenterLine(faceNames,vMode)
cline = dvp.getCenterLine(tag)
print("cline tag: {}".format(tag))

<!--T:75-->
#replace
print("making new format")
oldFormat = cline.Format
newFormat = (dotted,oldFormat[1], pyRed, True)
cline.Format = newFormat
cline.Extension = 10.0

<!--T:77-->
print("making edgeCenterLine")
cline2 = dvp.makeCenterLine(edgeNames,hMode)

<!--T:78-->
print("making vertexCenterLine")
cline3 = dvp.makeCenterLine(vertNames,aMode)

<!--T:79-->
print("finished")
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
===DrawViewPart Geometry===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
[topoShapeEdge] = dvp.getVisibleEdges()
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
[topoShapeEdge] = dvp.getHiddenEdges()
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
topoShapeEdge = dvp.getEdgeByIndex(i) <br/>
topoShapeEdge = dvp.getEdgeBySelection("Edge1")
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
topoShapeVertex = dvp.getVertexByIndex(i) <br/>
topoShapeVertex = dvp.getVertexBySelection("Vertex1")
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Redraw the graphic for this View.<br>
dvp.requestPaint()
</div>

{{TechDraw Tools navi{{#translation:}}}}
{{Userdocnavi{{#translation:}}}}
[[Category:API{{#translation:}}]]
[[Category:Poweruser Documentation{{#translation:}}]]
{{clear}}