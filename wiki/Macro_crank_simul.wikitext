<languages/>
<translate>
<!--T:1-->
{{Macro
|Name=Crank Simul
|Icon=Macro_crank_simul.png
|Description=My simple animation uses sketch and sketcher solver to determine piston position and conrod position/rotation. 
|Author=kwahoo
|Version=1.0
|Date=2014-06-13
|FCVersion=All
|Download= [https://www.freecadweb.org/wiki/images/0/04/Macro_crank_simul.png ToolBar Icon]<br />The file [http://forum.freecadweb.org/download/file.php?id=5954 crank_simul.fcstd]
}}

==Description== <!--T:2-->
My simple animation uses sketch and sketcher solver to determine piston position and conrod position/rotation.

</translate>
[[File:Crank 00.gif]]
<translate>

==Use== <!--T:4-->
To test the animation:

<!--T:5-->
Download the files and copy the code in the Python console FreeCAD.

<!--T:6-->
1. Open the attached file

<!--T:7-->
To stop animation type : 
</translate>
"'''animation.stop()'''"

<translate>
==The File== <!--T:8-->
</translate>
[http://forum.freecadweb.org/download/file.php?id=5954 crank_simul.fcstd]
<translate>
==Script== <!--T:9-->
</translate>
ToolBar Icon [[Image:Macro_crank_simul.png]]

'''crank_simul.FCMacro'''

{{MacroCode|code=
import FreeCAD as App, FreeCADGui as Gui, Part, time, sys, math, Draft, DraftGeomUtils
from PySide import QtGui,QtCore

class Animation(object):
    def __init__(self):
        App.Console.PrintMessage('init')

        App.ActiveDocument.recompute()

        self.timer = QtCore.QTimer()
        QtCore.QObject.connect(self.timer, QtCore.SIGNAL("timeout()"), self.my_update)
        self.timer.start(50)

        self.an = 0.1

    def my_update(self):
        string = '{0}'.format(self.an)
        self.an = self.an + 0.01 if self.an < (2 * math.pi) else 0.0

        angle = math.degrees(self.an)
        App.ActiveDocument.Sketch.setDatum(5,App.Units.Quantity(str(angle)+' deg'))
        App.ActiveDocument.recompute()
        p1 = App.ActiveDocument.Sketch.Shape.Vertexes[0].Point
        p2 = App.ActiveDocument.Sketch.Shape.Vertexes[1].Point
        conrodangle = math.degrees(Draft.DraftVecUtils.angle(App.Vector(1,0,0),(p1-p2))) - 90
        App.ActiveDocument.getObject("Cylinder").Placement = App.Placement(p1,App.Rotation(App.Vector(1,0,0),-90))
        App.ActiveDocument.getObject("Sketch001").Placement = App.Placement(p1,App.Rotation(App.Vector(0,0,1),conrodangle))

    def stop(self):
        self.timer.stop()
         

animation = Animation()

}}
<translate>

==Links== <!--T:10-->
The forum discussion [https://forum.freecad.org/viewtopic.php?f=24&t=6815&hilit=animation#p55092 Inline-four engine animation]

<!--T:11-->
The blog [http://freecad-tutorial.blogspot.be/ freecad-tutorial.blogspot]

</translate>
{{clear}}