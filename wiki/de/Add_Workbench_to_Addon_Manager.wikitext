<languages/>
{{TOCright}}

<span id="Introduction"></span>
==Einleitung==

Dies ist eine Schritt-für-Schritt-Anleitung, wie man einen Python-Arbeitsbereich zum [[Std_AddonMgr/de|Addon-Manager]] hinzufügt.

Voraussetzungen:
* Eine lokale git-Dateiablage.
* Eine entfernte git-Dateiablage. Unterstützte git-Hosts sind [https://github.com GitHub], [https://about.gitlab.com/ GitLab], [https://framagit.org/public/projects Framagit] und [https://salsa.debian.org/public Debian Salsa].
* Git muss installiert sein.

<span id="Enable_developer_mode"></span>
==Entwicklermodus aktivieren==

# Den [[Preferences_Editor/de|Voreinstellungseditor]] öffnen: Den Menüeintrag {{MenuCommand|Bearbeiten → [[Image:Std_DlgPreferences.svg|16px]] Einstellungen...}} auswählen.
# Die Menüoption {{MenuCommand|[[Image:Std_AddonMgr.svg|16px]] Addon-Manager}} in der linken Leiste auswählen.
# Auf dem Menüreiter {{MenuCommand|Addon-Manager Optionen}} den Haken in der Checkbox {{MenuCommand|Addon-Entwickler-Modus}} setzen. Dies aktiviert die Schaltfläche {{Button|Entwicklerwerkzeuge...}} im Addon-Manager.
# Die Schaltfläche {{Button|OK}} drücken, um den Voreinstellungseditor zu schließen.

<span id="Create_the_package.xml_file"></span>
==Die package.xml-Datei erstellen==

# Open the [[Std_AddonMgr|Addon Manager]]: select the {{MenuCommand|Tools → [[Image:Std_AddonMgr.svg|16px]] Addon manager}} option from the menu.
# Press the {{Button|Developer tools...}} button.
# The {{MenuCommand|Addon Developer Tools}} dialog opens.<br>[[Image:Addon_Manager_Addon_Developer_Tools_Dialog.png|350px]]
# Enter the following:
#* {{MenuCommand|Path to Addon}}: The path to the local git repository.
#* {{MenuCommand|Addon Name}}: This will appear in the listings of the Addon Manager.
#* {{MenuCommand|Description}}: Idem.
#* {{MenuCommand|Version}}: Idem.
#* {{MenuCommand|Repository URL}}
#* {{MenuCommand|Primary branch}}
#* {{MenuCommand|README URL}}: Recommended.
#* {{MenuCommand|Icon}}: The icon must be part of the repository.
# Press the {{Button|[[Image:List-add.svg|16px]]}} button at the bottom of the dialog.
# The {{MenuCommand|Content Item}} dialog opens.<br>[[Image:Addon_Manager_Content_Item_Dialog.png|350px]]
# The {{MenuCommand|Content type}} should be set to {{Value|Workbench}}.
# Check the {{MenuCommand|This is the only item in the Addon}} checkbox.
# Enter the {{MenuCommand|Workbench class name}}. This is the class name specified in the {{FileName|InitGui.py}} file.
# For the {{MenuCommand|Subdirectory}} enter {{Value|./}}.
# Press the {{Button|OK}} button to close the dialog.
# Press the {{Button|Save}} button to close the {{MenuCommand|Addon Developer Tools}} dialog and save the {{FileName|package.xml}} file.
# Press the {{Button|[[Image:Process-stop.svg|16px]] Close}} button to close the Addon Manager.
# Push the created file to your remote repository.

<span id="Add_the_workbench_to_the_.gitmodules_file"></span>
==Den Arbeitsbereich zur .gitmodules-Datei hinzufügen==

# Fork https://github.com/FreeCAD/FreeCAD-addons.
# Create a new branch.
# Edit the {{FileName|.gitmodules}} file to include your new Addon, in alphabetical order.
# Push the new branch to GitHub.
# Submit a Pull Request to the FreeCAD-Addons repository with the new {{FileName|.gitmodules}} file.

<span id="See_also"></span>
==Siehe auch==

* [[Workbench_creation/de|Arbeitsbereiche erstellen]]
* [[Package_Metadata/de|Package Metadata]]: Detaillierte Informationen über die {{FileName|package.xml}}-Datei.


[[Category:Addons{{#translation:}}]]
[[Category:Developer Documentation{{#translation:}}]]