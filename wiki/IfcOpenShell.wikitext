<languages/>
<translate>

==Description== <!--T:1-->

</translate>
{{TOCright}}
<translate>

<!--T:3-->
[[IfcOpenShell|IfcOpenShell]] is an open source (LGPL 3) software library that helps developers work with the [http://www.buildingsmart-tech.org/specifications/ifc-overview industry foundation classes]  ([[Arch_IFC|IFC]]) file format. The IFC file format can be used to describe building and construction data. The format is commonly used for [https://en.wikipedia.org/wiki/Building_information_modeling building information modelling] (BIM), for example, mechanical loading analysis, and thermal and energy efficiency studies. IfcOpenShell is primarily a collection of C++ libraries, however, as it has [[Python|Python]] bindings, it can be integrated with programs like FreeCAD and Blender.

<!--T:4-->
IfcOpenShell uses [[OpenCASCADE|OpenCASCADE]] internally to convert the implicit geometry in IFC files into explicit geometry that other CAD packages can understand, for example, STEP, [[Arch_OBJ|OBJ]], and [[Arch_DAE|DAE]].

<!--T:7-->
As of v0.19, FreeCAD is able to import IFC files as long as the {{incode|ifcopenshell}} [[Python|Python]] module is available in the system. Likewise, the [[BIM_Workbench|BIM Workbench]] can export a building model to the IFC format so that it can be used in other applications.

<!--T:8-->
To verify that IfcOpenShell is installed in your system, try to import it from the [[Python_console|Python console]]; the library is correctly installed if no error message is returned.

</translate>
{{Code|code=
import ifcopenshell
}}
<translate>

== Installation == <!--T:9-->

<!--T:10-->
IfcOpenShell can be installed in various ways depending on your operating system and Python environment. In the past, IfcOpenShell was a bit difficult to install as it needed to be compiled for your specific system; however, as of this writing (2020) it is easier to start using it, as it is now included together with FreeCAD in many FreeCAD distributions. In general, it is advisable to use one of these pre-compiled distributions, and only compile it yourself if you are an advanced user.

=== From BlenderBIM === <!--T:99-->

<!--T:100-->
[https://blenderbim.org BlenderBIM] is another project that uses IfcOpenShell. They provide up-to-date IfcOpenShell packages for several platforms. This is the best way to make sure you have a recent version of IfcOpenShell.

<!--T:101-->
BlenderBIM IfcOpenShell install page: https://blenderbim.org/docs-python/ifcopenshell-python/installation.html

=== Pip === <!--T:97-->

<!--T:98-->
The easiest way to install IfcOpenShell is using [https://pypi.org/project/pip/ pip]. Once pip is installed on your system, you can [https://datatofish.com/install-package-python-using-pip/ install] IfcOpenShell easily by issuing from a terminal window:

</translate>
{{Code|code=
pip install ifcopenshell
}}
<translate>

=== Conda === <!--T:11-->

<!--T:12-->
For Windows and MacOS systems, FreeCAD distributions put together with the [[Conda|Conda]] package manager usually include IfcOpenShell already so no further installation is necessary. Get the appropriate distribution from the [[Download|Download]] page.

<!--T:13-->
The [[AppImage|AppImage]] for Linux is also based on [[Conda|Conda]], and it also includes IfcOpenShell.

=== Linux === <!--T:14-->

<!--T:15-->
If it is available, you may install IfcOpenShell using your distribution's package manager.

</translate>
{{Code|code=
sudo apt install ifcopenshell
}}
<translate>

<!--T:16-->
However, please notice that packages provided by many Linux repositories tend to be old, and may not contain the latest developments in the software. If you want to be sure you are using the newest software, use a [[Conda|Conda]]-based distribution of FreeCAD, a pre-compiled IfcOpenShell distribution, or compile IfcOpenShell yourself.

=== Using a pre-compiled IfcOpenShell package === <!--T:17-->

<!--T:18-->
There is a special repository of the IfcOpenShell project that compiles regularly the IfcOpenShell libraries for various systems (Linux, Windows, MacOS), architectures (32-bit and 64-bit), and Python versions (2.7, 3.x). To use these pre-compiled libraries, you must pick the right version that matches your operating system, architecture, and the major and minor numbers for the [[Python|Python]] that is used with FreeCAD. This means that the first two numbers must match (Python 3.6 and 3.7 are considered distinct versions) while the third one (micro) does not matter (Python 3.6.5 and 3.6.12 are considered to be the same for compatibility purposes).

<!--T:19-->
# Head to the build repository [https://github.com/IfcOpenBot/IfcOpenShell IfcOpenBot/IfcOpenShell]. This repository is not for development, it only contains a copy of the main repository as well as pre-compiled packages.
# As of this writing (2020), the master branch of the IfcOpenShell project does not contain the latest code, so we need to select the desired branch, for example, {{incode|v0.6.0}}.
# Click on the commit number, which will take you to the list of commits for the branch, for example, {{incode|IfcOpenBot/IfcOpenShell/commits/v0.6.0}}.
# Go back in the history until you find a commit that has a comment. This will indicate the moment when pre-compiled libraries were released.
# Click on the commit. You will see a comment by IfcOpenBot showing a table of combinations of operating system, architecture, and Python version. Choose the right link for "Python" to match your [[Std_About|version of FreeCAD]]. The "Blender", "IfcConvert", and "IfcGeomServer" packages are not needed for FreeCAD usage.
# The downloaded package needs to be extracted, and the extracted directory needs to be placed in the Python search path in order to find the new modules.

<!--T:59-->
{{Emphasis|Note:}} the following examples assume a Debian/Ubuntu based system, but the general procedure should work for other operating systems.

<!--T:60-->
:* Unzipping the downloaded package creates an {{incode|ifcopenshell/}} folder.
</translate>
{{Code|code=
unzip ifcopenshell-python-36-v0.6.0-4baec57-linux64.zip
}}
<translate>

<!--T:20-->
:* The search path can be found by inspecting the {{incode|sys.path}} variable in the [[Python_console|Python console]].
</translate>
{{Code|code=
import sys
print(sys.path)
}}
<translate>

<!--T:21-->
:* If you'd like to install the IfcOpenShell library only for your user, and not affect system directories, you should place the extracted {{incode|ifcopenshell/}} folder in your own user's home directory.
</translate>
{{Code|code=
mv -t $HOME/.local/lib/python3.6/site-packages/ ifcopenshell/
}}
<translate>

<!--T:22-->
:* If you'd like to install the IfcOpenShell library system-wide, you typically need superuser privileges to write to system directories; this is usually a {{incode|site-packages/}} directory, or a {{incode|dist-packages/}} directory for Debian/Ubuntu distributions.
</translate>
{{Code|code=
sudo mv -t /usr/local/lib/python3.6/dist-packages/ ifcopenshell/
}}
<translate>

<!--T:23-->
If the directory is correctly moved, test that the {{incode|ifcopenshell}} module is accessible from the [[Python_console|Python console]].
</translate>
{{Code|code=
>>> import ifcopenshell
>>> print(ifcopenshell.version)
0.6.0b0
>>> print(ifcopenshell.__path__)
['/home/user/.local/lib/python3.6/site-packages/ifcopenshell']
}}
<translate>

<!--T:24-->
To remove the installed library, just remove the corresponding directory with all modules inside.
</translate>
{{Code|code=
rm -rf $HOME/.local/lib/python3.6/site-packages/ifcopenshell/
sudo rm -rf /usr/local/lib/python3.6/dist-packages/ifcopenshell/
}}
<translate>

== Compiling == <!--T:25-->

<!--T:26-->
Compiling IfcOpenShell is recommended only for advanced users. The process is similar to [[Compile_on_Linux|compiling FreeCAD on Linux]], so if you have done this already, then you may already have the necessary requisites like the [[OpenCASCADE|OpenCASCADE's]] development files. The process uses the CMake configuration tool to produce a custom {{incode|Makefile}} for use with the Make tool.

<!--T:27-->
The general instructions are outlined in the [https://github.com/IfcOpenShell/IfcOpenShell IfcOpenShell repository], and are as follows:
# Get the source code of IfcOpenShell from its main repository.
# Gather all dependencies for compiling, including a C++ compiler, CMake, and Make, and the development files for Boost, libxml2, [[OpenCASCADE|OpenCASCADE]], SWIG, Python, and OpenCOLLADA (optional). Most of these components are strictly optional, however, for use with FreeCAD they should all be installed. OpenCOLLADA is optional as it only provides [[Arch_DAE|DAE]] support for the {{incode|IfcConvert}} binary.
# Run {{incode|cmake}} to generate a {{incode|Makefile}}, then start the compilation by running {{incode|make}}.
# Install the {{incode|ifcopenshell}} [[Python|Python]] module in the appropriate {{incode|site-packages/}} directory so that it is found by FreeCAD.

<!--T:61-->
{{Emphasis|Note:}} the following examples assume a Debian/Ubuntu based system, but the general procedure should work for other operating systems. For example, in Debian shared libraries are normally located in {{incode|/usr/lib/x86_64-linux-gnu/}} while in other distributions this may be {{incode|/usr/lib64/}} so the paths should be adjusted accordingly.

=== Prerequisites === <!--T:28-->

<!--T:31-->
Install the basic compilation tools.
</translate>
{{Code|code=
sudo apt install git cmake gcc g++ libboost-all-dev
}}
<translate>

<!--T:29-->
Get the source code of the project and place it in a custom directory to which you have full write access.

<!--T:30-->
As of this writing (2020), the master branch of the IfcOpenShell project does not contain the latest code, so we need to clone a specific branch.
</translate>
{{Code|code=
git clone https://github.com/IfcOpenShell/IfcOpenShell -b v0.6.0 IfcOpenShell-source
}}
<translate>

=== OpenCASCADE === <!--T:32-->

<!--T:33-->
Install the development files of [[OpenCASCADE|OpenCASCADE]].
</translate>
{{Code|code=
sudo apt install libocct*-dev
}}
<translate>

<!--T:34-->
Which expands to
</translate>
{{Code|code=
sudo apt install libocct-data-exchange-dev libocct-draw-dev libocct-foundation-dev libocct-modeling-algorithms-dev libocct-modeling-data-dev libocct-ocaf-dev libocct-visualization-dev
}}
<translate>

<!--T:35-->
You may use the community edition (OCE) of OpenCASCADE as well, however, please notice that this version is old and no longer recommended by FreeCAD as of 2020.

=== OpenCOLLADA === <!--T:62-->

<!--T:63-->
Install the development files of OpenCOLLADA.
</translate>
{{Code|code=
sudo apt install opencollada-dev
}}
<translate>

<!--T:64-->
If the files are too old in your distribution, you may also compile the libraries yourself. The procedure is outlined in the main repository, [https://github.com/KhronosGroup/OpenCOLLADA KhronosGroup/OpenCOLLADA], and it's very straight forward as it only requires the {{incode|libpcre3}} and {{incode|libxml2}} development files.

</translate>
{{Code|code=
sudo apt install libpcre3-dev libxml2-dev
git clone https://github.com/KhronosGroup/OpenCOLLADA OpenCOLLADA-source

mkdir -p OpenCOLLADA-build
cd OpenCOLLADA-build
cmake ../OpenCOLLADA-source

make -j 3
sudo make install
}}
<translate>

=== Python wrapper === <!--T:36-->

<!--T:37-->
For usage with FreeCAD you need the [[Python|Python]] wrapper which uses SWIG to generate the proper interfaces from the C++ classes.

</translate>
{{Code|code=
sudo apt-get install python-all-dev swig
}}
<translate>

=== CMake configuration === <!--T:38-->

<!--T:39-->
It is recommended to perform the configuration and compilation in a specific build directory separate from the source directory.

</translate>
{{Code|code=
mkdir -p IfcOpenShell-build
cd IfcOpenShell-build

cmake ../IfcOpenShell-source/cmake/
}}
<translate>

<!--T:40-->
Notice that the {{incode|CMakeLists.txt}} file that drives CMake is inside the {{incode|cmake/}} subdirectory in the source directory.

<!--T:41-->
Depending on your Linux distribution, and the way you installed the dependencies, you may have to define some CMake variables so that the libraries are found properly.

==== Specifying the OpenCASCADE libraries ==== <!--T:42-->

<!--T:43-->
If you manually compiled OpenCASCADE, or if the libraries are not in a standard directory, you may have to set the proper variables.

</translate>
{{Code|code=
cmake \
    -DOCC_INCLUDE_DIR=/usr/include/opencascade \
    -DOCC_LIBRARY_DIR=/usr/lib/x86_64-linux-gnu \
    ../IfcOpenShell-source/cmake/
}}
<translate>

<!--T:65-->
By default the build system expects the community edition (OCE) of OpenCASCADE ({{incode|/usr/include/oce/}}), however, please notice that this version is old and no longer recommended by FreeCAD as of 2020. For this reason installing the development files of the main version of [[OpenCASCADE|OpenCASCADE]] (OCCT) is recommended.

==== Without OpenCOLLADA ==== <!--T:44-->

<!--T:45-->
If you don't need OpenCOLLADA support ([[Arch_DAE|DAE]] files) you need to turn it off explicitly with the {{incode|COLLADA_SUPPORT}} variable.

</translate>
{{Code|code=
cmake \
    ...
    -DCOLLADA_SUPPORT=FALSE \
    ../IfcOpenShell-source/cmake/
}}
<translate>

==== With OpenCOLLADA ==== <!--T:46-->

<!--T:47-->
If you manually compiled OpenCOLLADA, or if the libraries are not in a standard directory, you may have to set the proper variables for OpenCOLLADA and for the {{incode|libpcre}} library.

</translate>
{{Code|code=
cmake \
    ...
    -DOPENCOLLADA_INCLUDE_DIR=/usr/include/opencollada \
    -DOPENCOLLADA_LIBRARY_DIR=/usr/lib/opencollada \
    -DPCRE_LIBRARY_DIR=/usr/lib/x86_64-linux-gnu \
    ../IfcOpenShell-source/cmake/
}}
<translate>

==== Specifying the libxml2 libraries ==== <!--T:48-->

<!--T:49-->
If the {{incode|libxml2}} libraries are not found during compilation and linking, or if the libraries are not in a standard directory, you may have to set the proper variables.

</translate>
{{Code|code=
cmake \
    ...
    -DLIBXML2_INCLUDE_DIR=/usr/include/libxml2 \
    -DLIBXML2_LIBRARIES=/usr/lib/x86_64-linux-gnu/libxml2.so \
    ../IfcOpenShell-source/cmake/
}}
<translate>

==== Specifying installation in the user's home directory ==== <!--T:50-->

<!--T:66-->
By default, the Python module {{incode|ifcopenshell}} will be installed in a system {{incode|site-packages/}} directory, so it requires superuser privileges. By setting the {{incode|USERSPACE_PYTHON_PREFIX}} variable, the installation of the Python module will be done to the user's home directory.

</translate>
{{Code|code=
cmake \
    ...
    -DUSERSPACE_PYTHON_PREFIX=ON \
    ../IfcOpenShell-source/cmake/
}}
<translate>

==== Specifying Python version ==== <!--T:67-->

<!--T:68-->
If you want to generate a binding for a particular Python version, set the {{incode|PYTHON_EXECUTABLE}} variable to the specific executable. Remember that this version must be the same Python version against which FreeCAD was compiled.
</translate>
{{Code|code=
cmake \
    ...
    -DPYTHON_EXECUTABLE=/usr/bin/python3.6 \
    ../IfcOpenShell-source/cmake/
}}
<translate>

==== Single configuration line ==== <!--T:69-->

<!--T:70-->
In a typical Debian/Ubuntu system you may use this line to configure the compilation. Adjust it as necessary.
</translate>
{{Code|code=
cmake -DOCC_INCLUDE_DIR=/usr/include/opencascade -DOCC_LIBRARY_DIR=/usr/lib/x86_64-linux-gnu -DLIBXML2_INCLUDE_DIR=/usr/include/libxml2 -DLIBXML2_LIBRARIES=/usr/lib/x86_64-linux-gnu/libxml2.so -DUSERSPACE_PYTHON_PREFIX=ON ../IfcOpenShell-source/cmake/
}}
<translate>

<!--T:71-->
Without OpenCOLLADA:
</translate>
{{Code|code=
cmake -DOCC_INCLUDE_DIR=/usr/include/opencascade -DOCC_LIBRARY_DIR=/usr/lib/x86_64-linux-gnu -DCOLLADA_SUPPORT=FALSE -DLIBXML2_INCLUDE_DIR=/usr/include/libxml2 -DLIBXML2_LIBRARIES=/usr/lib/x86_64-linux-gnu/libxml2.so -DUSERSPACE_PYTHON_PREFIX=ON ../IfcOpenShell-source/cmake/
}}
<translate>

=== Actual compilation === <!--T:53-->

<!--T:54-->
If there were no error messages during configuration with CMake, a {{incode|Makefile}} should have been created in the build directory, so you can proceed to compile the libraries by running {{incode|make}}.
</translate>
{{Code|code=
make -j N
}}
<translate>

<!--T:72-->
{{incode|N}} is the number of processors that you assign to the compilation process; choose at least one fewer than the total number of CPU cores that you have.

=== Troubleshooting and other options === <!--T:51-->

<!--T:52-->
All configuration options are available in the {{incode|CMakeLists.txt}} file located inside the {{incode|IfcOpenShell-source/cmake/}} directory. If there are problems when running CMake or Make, look here for other options that may need to be set.

<!--T:73-->
In all instructions above, instead of {{incode|cmake}}, the graphical interface {{incode|cmake-gui}} can be used. This will quickly show the available options in the configuration.

</translate>
{{Code|code=
cmake-gui ../IfcOpenShell-source/cmake/
}}
<translate>

=== Testing the compilation in the build directory === <!--T:74-->

<!--T:75-->
If the build was successful you should have an {{incode|examples/}} subdirectory with the newly compiled {{incode|IfcOpenHouse}} executable. Run this utility from the build directory to generate a sample IFC file.
</translate>
{{Code|code=
example/IfcOpenHouse
}}
<translate>

<!--T:76-->
The sample [[Arch_IFC|IFC]] file should appear in the build directory, and can be used as input to the also newly compiled {{incode|IfcConvert}} executable. This utility takes as input an IFC file, and produces as output a different format including [[Arch_OBJ|OBJ]], [[Arch_DAE|DAE]] if OpenCOLLADA support was enabled, STEP, IGS, XML, [[Draft_SVG|SVG]], or another [[Arch_IFC|IFC]].
</translate>
{{Code|code=
./IfcConvert IfcOpenHouse.ifc
}}
<translate>

<!--T:77-->
If no output file is specified, by default it will create an [[Arch_OBJ|OBJ]] file and its accompanying material table (MTL).

=== Installation of the compiled libraries === <!--T:55-->

<!--T:56-->
If the compilation doesn't report any errors, you may run {{incode|make install}} to copy the headers, compiled libraries, and binaries to their corresponding installation directories.

</translate>
{{Code|code=
sudo make install
}}
<translate>

<!--T:57-->
By default, the {{incode|CMAKE_INSTALL_PREFIX}} is {{incode|/usr/local/}}, so all compiled files will be placed under this directory, which normally requires elevated privileges.
</translate>
{{Code|code=
/usr/local/bin/IfcConvert
/usr/local/bin/IfcGeomServer
/usr/local/include/ifcparse/*.h
/usr/local/include/ifcgeom/*.h
/usr/local/include/ifcgeom_schema_agnostic/*.h
/usr/local/include/serializers/{*.h,*.cpp}
/usr/local/include/serializers/schema_dependent/{*.h,*.cpp}
/usr/local/lib/libIfcGeom*.a
/usr/local/lib/libIfcParse.a
/usr/local/lib/libSerializers*.a
}}
<translate>

<!--T:58-->
The {{incode|ifcopenshell}} Python module that is required for FreeCAD is not actually present in the build directory; this package is created only when {{incode|make install}} is run. The resulting package is placed in a {{incode|site-packages/}} directory, or a {{incode|dist-packages/}} directory for Debian/Ubuntu distributions.
</translate>
{{Code|code=
/usr/lib/python3/dist-packages/ifcopenshell/
}}
<translate>

<!--T:78-->
If the {{incode|USERSPACE_PYTHON_PREFIX}} variable was set during the CMake configuration step, {{incode|ifcopenshell}} will be placed in the user's {{incode|site-packages/}} directory.
</translate>
{{Code|code=
$HOME/.local/lib/python3.6/site-packages/ifcopenshell/
}}
<translate>

=== Removing the compiled libraries === <!--T:79-->

<!--T:80-->
To remove the installed libraries, just remove the corresponding files that were installed, and the {{incode|ifcopenshell/}} directory with all modules inside.
</translate>
{{Code|code=
sudo rm -rf /usr/local/bin/IfcConvert
sudo rm -rf /usr/local/bin/IfcGeomServer
sudo rm -rf /usr/local/include/ifcparse/
sudo rm -rf /usr/local/include/ifcgeom/
sudo rm -rf /usr/local/include/ifcgeom_schema_agnostic/
sudo rm -rf /usr/local/lib/libIfcGeom*
sudo rm -rf /usr/local/lib/libIfcParse*
sudo rm -rf /usr/local/lib/libSerializers*
}}
<translate>

</translate>
{{Code|code=
sudo rm -rf /usr/lib/python3/dist-packages/ifcopenshell/
}}
<translate>

<!--T:81-->
Or if the {{incode|USERSPACE_PYTHON_PREFIX}} variable was set.
</translate>
{{Code|code=
sudo rm -rf $HOME/.local/lib/python3.6/site-packages/ifcopenshell/
}}
<translate>

=== Manual installation === <!--T:82-->

<!--T:83-->
Compilation of the entire IfcOpenShell distribution produces binaries like {{incode|IfcConvert}} and {{incode|IfcGeomServer}}, as well as many static libraries ({{incode|lib*.a}}) in the build directory. However, for FreeCAD we only need the {{incode|ifcopenshell}} Python module. This module is not a single file, but a "package", that is, a directory with various files. This {{incode|ifcopenshell}} package is put together from the Python wrappers built inside {{incode|IfcOpenShell-build/ifcwrap/}}, and from the Python modules in the original source directory {{incode|IfcOpenShell-source/src/ifcopenshell-python/ifcopenshell/}}.

<!--T:84-->
* Produced by the compilation process:
</translate>
{{Code|code=
../IfcOpenShell-build/ifcwrap/ifcopenshell_wrapper.py
../IfcOpenShell-build/ifcwrap/_ifcopenshell_wrapper.so
}}
<translate>

<!--T:85-->
* Existing in the source directory:
</translate>
{{Code|code=
../IfcOpenShell-source/src/ifcopenshell-python/ifcopenshell/
}}
<translate>

<!--T:86-->
The {{incode|ifcopenshell}} module is created by copying the original source directory, and adding the two {{incode|*ifcopenshell_wrapper*}} files to it.

</translate>
{{Code|code=
cp -rt . ../IfcOpenShell-source/src/ifcopenshell-python/ifcopenshell/
cp -t ifcopenshell/ ifcwrap/ifcopenshell_wrapper.py ifcwrap/_ifcopenshell_wrapper.so
}}
<translate>

<!--T:87-->
Now this directory can be moved to the user-specific or system {{incode|site-packages/}} ({{incode|dist-packages/}} for Debian/Ubuntu) to make it available for all Python applications.
</translate>
{{Code|code=
mv -t $HOME/.local/lib/python3.6/site-packages/ ifcopenshell/
}}
<translate>

<!--T:88-->
Or for system-wide installation:
</translate>
{{Code|code=
sudo mv -t /usr/lib/python3/dist-packages/ ifcopenshell/
}}
<translate>

<!--T:89-->
Now the {{incode|ifcopenshell}} module should be available to be imported from a [[Python_console|Python console]].
</translate>
{{Code|code=
>>> import ifcopenshell
>>> print(ifcopenshell.version)
0.6.0b0
>>> print(ifcopenshell.__path__)
['/home/user/.local/lib/python3.6/site-packages/ifcopenshell']
}}
<translate>

== IFC viewer application == <!--T:90-->

<!--T:91-->
The IfcOpenShell library actually includes a small graphical viewer for IFC files that uses PyQt5 and PythonOCC.

<!--T:92-->
To launch this viewer from the Python console, the {{incode|application}} class needs to be instantiated and started:
</translate>
{{Code|code=
from ifcopenshell.geom.app import application
application().start()
}}
<translate>

<!--T:93-->
If the library is already installed, the entire module can also be run from the terminal:
</translate>
{{Code|code=
python3 /home/user/.local/lib/python3.6/site-packages/ifcopenshell/geom/app.py
}}
<translate>

<!--T:94-->
At the time of writing (2020), only the [[PythonOCC|PythonOCC]] version compiled for the [[OpenCASCADE|OpenCASCADE]] community edition (OCE) was supported.

== IFC online viewer == <!--T:95-->

<!--T:96-->
The IfcOpenShell project has also developed "IFC Pipeline", a self-hosted IFC processing and visualization program. It also provides a small web application that accepts file uploads, which anybody can use. This means that to visualize IFC data you don't need to have IfcOpenShell, or other viewers, installed locally; you can just load your IFC file into this system to see the result.
* Online viewer: https://view.ifcopenshell.org/
* Repository: [https://github.com/AECgeeks/ifc-pipeline AECgeeks/ifc-pipeline]

== More information == <!--T:5-->

<!--T:6-->
* Website: [http://ifcopenshell.org/ ifcopenshell.org]
* Code repository: [https://github.com/IfcOpenShell/IfcOpenShell IfcOpenShell/IfcOpenShell]
* Academy with examples and articles: [http://academy.ifcopenshell.org/ academy.ifcopenshell.org]
* [https://view.ifcopenshell.org/ IfcOpenShell online viewer]
* OSArch community with resources for open source architecture: [https://wiki.osarch.org/index.php?title=Main_Page wiki.OSArch.org]
* [https://forum.freecadweb.org/viewtopic.php?f=39&t=48971 Installation of IfcOpenShell]; main discussion in the forum.
* [https://forum.freecadweb.org/viewtopic.php?f=39&t=12368&start=10#p117883 IFC installation]; old discussion in the forum.
* [https://forum.freecadweb.org/viewtopic.php?f=39&t=33254 IfcPlusPlus compiled on Gentoo - questions and alternatives?]
* [[Import/Export_IFC_-_compiling_IfcOpenShell|Compiling IfcOpenShell for MacOS]]; an older guide that describes the general process. It may not be needed any more as IfcOpenShell is now distributed together with FreeCAD thanks to [[Conda|Conda]].
* What pages link to [[Special:WhatLinksHere/IfcOpenShell|this page]].

</translate>
{{BIM_Tools_navi{{#translation:}}}}
{{FEM_Tools_navi{{#translation:}}}}
{{Userdocnavi{{#translation:}}}}
[[Category:3rd_Party{{#translation:}}]]