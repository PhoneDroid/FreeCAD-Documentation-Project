<languages/>

{{Docnav/ru
|[[Manual:Creating parametric objects/ru|Создание параметрических объектов]]
|[[Manual:The Community/ru|Сообщество]]
|[[Manual:Introduction/ru|Руководство: Начало]]
|IconC=Crystal Clear manual.png
}}

{{Manual:TOC}}

В последних двух главах мы рассмотрели, как [[Manual:Creating and manipulating geometry/ru|создать геометрию Детали - Part]] и [[Manual:Creating parametric objects/ru|создать параметрические объекты]]. Для получения полного контроля над FreeCAD не хватает последней детали: Создать инструменты, которые будут взаимодействовать с пользователем.

Во многих ситуациях не очень удобно создавать объект с нулевыми значениями, как мы делали с прямоугольником в предыдущей главе, а затем просить пользователя заполнить значения высоты и ширины на панели свойств. Это подходит для очень небольшого количества объектов, но станет очень утомительным, если вам нужно создать много прямоугольников. Лучшим способом будет возможность задавать высоту и ширину уже при создании прямоугольника.

Python предлагает базовый инструмент, позволяющий пользователю вводить текст на экране:

 text = raw_input("Высота прямоугольника?")
 print("Введённая высота равна ",text)

Однако для этого требуется запущенная консоль Python, а при запуске нашего кода из макроса мы не всегда уверены, что консоль Python будет включена на компьютере пользователя.

Графический интерфейс пользователя [https://ru.wikipedia.org/wiki/Графический_интерфейс_пользователя ГИП (рус.)] [https://en.wikipedia.org/wiki/Graphical_user_interface GUI (англ.)] - включающий в себя меню, панели инструментов, 3D-вид и другие визуальные компоненты FreeCAD - разработан для того, чтобы сделать программу интуитивно понятной и доступной. Он служит мостом между пользователем и основной функциональностью FreeCAD, позволяя как обычным пользователям, так и экспертам эффективно взаимодействовать с программой.

Графический интерфейс FreeCAD построен с использованием [https://en.wikipedia.org/wiki/Qt_(software) Qt], мощного набора инструментов графического интерфейса с открытым исходным кодом, который предоставляет широкий спектр возможностей. Qt предлагает основные строительные блоки для проектирования интерфейса, такие как диалоговые окна, кнопки, ярлыки, поля ввода текста и выпадающие меню, известные под общим названием "виджеты". Эти виджеты составляют основу пользовательского интерфейса FreeCAD.

Одним из ключевых преимуществ Qt является его кроссплатформенная совместимость, позволяющая FreeCAD без проблем работать на различных операционных системах, таких как Windows, macOS и Linux. Кроме того, гибкость Qt позволяет разработчикам легко расширять и настраивать интерфейс FreeCAD, создавая новые панели инструментов и меню или создавая совершенно новые модули, интегрируемые в программу. Благодаря такой адаптивности FreeCAD остаётся удобным для пользователя и легко расширяемым.

Для пользователей, заинтересованных в написании скриптов или разработке новых инструментов, Python API FreeCAD также предоставляет доступ ко многим функциям Qt. Это означает, что вы можете не только автоматизировать задачи, но и создавать пользовательские виджеты или диалоговые окна, которые интегрируются непосредственно в среду FreeCAD.

The Qt tools are very easy to use from Python, thanks to a Python module called [https://en.wikipedia.org/wiki/PySide PySide]. PySide is the official Python binding for the Qt library, providing a seamless way to create and interact with widgets programmatically. It allows developers to design interfaces, manage user inputs (such as reading text from input boxes), and define actions based on user interactions, such as responding to a button press. Using PySide, you can build custom dialog boxes, menus, and toolbars directly within FreeCAD, extending its functionality in a way that integrates smoothly with its existing interface.

PySide makes it easy to connect user actions to specific functions in your code. For example, you can set up a button so that when it’s pressed, it triggers a script to execute a command or modify an object in the 3D view. This interactive capability opens up endless possibilities for customizing workflows and automating repetitive tasks.

<div class="mw-translate-fuzzy">
В Qt так же есть другой интересный инструмент, называемый [http://doc.qt.io/qt-4.8/designer-manual.html Qt Designer], полностью встроенный в большое приложение [https://en.wikipedia.org/wiki/Qt_Creator Qt Creator]. Он позволяет проектировать диалоговые боксы и интерфейсные панели графически, вместо того чтобы делать это вручную. В этой главе мы будем использовать Qt Creator для проектирование панельного виджета, который использует панель '''Task''' FreeCAD. Так что Вам надо скачать и установить Qt Creator с их [https://www.qt.io/ide/ официальной страницы], если Вы на Windows или Mac (в Linux он обычно доступен из менеджера приложений).
</div>

В следующем примере мы сначала с помощью Qt Creator создадим панель, которая будет запрашивать длину, ширину и высоту, затем создадим вокруг неё класс Python, который читает введённые значения, и создадим куб с данными размерами. Класс Python затем будет использоваться FreeCAD для показа и управления панели задач:

[[Image:Exercise_python_07.jpg]]

<div class="mw-translate-fuzzy">
Начнём с создания виджета. Запустите Qt Creator, затем меню '''File → New File or Project → Files and Classes → Qt → Qt Designer Form → Dialog without buttons'''. Кликните '''Next''', задайте имя файла для сохранения, кликните '''Next''', оставьте все поля проекта со значениями по умолчанию ("<none>"), затем '''Create'''. Система задач FreeCAD автоматически добавит кнопки OK/Cancel, поэтому мы выбрали здесь диалог без кнопок.
</div>

[[Image:Exercise_python_06.jpg]]

<div class="mw-translate-fuzzy">
* Найдём в списке на левой панели '''Label''', и перетащим её на полотно нашего виджета. Дважды кликнем размещённую метку, и изменим её текст на '''Length'''.
* Правым кликом на холсте виджета выберем '''Lay out→ Lay out in a Grid'''. Это превратит наш виджет в сетку с пока ещё только одной ячейкой, занятой нашей первой меткой. Мы теперь можем добавить следующий элемент слева, справа, сверху или снизу от нашей первой метки, и сетка автоматически расширится.
* Добавим ещё две метки под первой, и изменим их текст на Width и Height:
</div>

[[Image:Exercise_python_08.jpg]]

<div class="mw-translate-fuzzy">
* Теперь поместим 3 виджета '''Double Spin Box''' вблизи наших меток Length, Width и Height. Для каждой из них в нижней правой панели, которые показывают доступные установки для выбранных виджетов, найдите '''Suffix''' и установите суффикс в '''mm'''. У FreeCADа есть более совершенный виджет, который может поддерживать различные единицы, но он не доступен в Qt Creator по умолчанию (но может быть [[Compile_on_Linux/Unix/ru#Qt_designer_plugin|вкомпилирован]]), так что теперь мы будем использовать станданртный Double Spin Box, и мы добавим суффикс "mm", чтобы пользователи знали, в каких единицах они работают:
</div>

[[Image:Exercise_python_09.jpg]]

<div class="mw-translate-fuzzy">
* Теперь наш виджет готов, осталось убедиться в последней вещи. Поскольку FreeCAD должен иметь доступ к нему и читать значения Length, Width и Height, нам надо дать этим виджетам подходящие имена, чтобы мы могли легко получить их из FreeCAD. Кликните каждый из этих полей ввода, и в верхнем правом окне дважды кликните их Object Name, и измените его во что-то лёгкое для запоминания, например: BoxLength, BoxWidth и BoxHeight:
</div>

[[Image:Exercise_python_10.jpg]]

* Сохраните файл, и можете закрыть Qt Creator, остальное будет сделано в Python.
* Откройте FreeCAD и создайте новый макрос из меню '''Макросы → Макрос'''
* Вставьте следующий код. Убедитесь, что Вы изменили путь к файлу на тот, где вы сохранили файл .ui, созданный в QtCreator:

{{Code|code=
import FreeCAD,FreeCADGui,Part
 
# CHANGE THE LINE BELOW
path_to_ui = "C:\Users\yorik\Documents\dialog.ui"
 
class BoxTaskPanel:
   def __init__(self):
       # this will create a Qt widget from our ui file
       self.form = FreeCADGui.PySideUic.loadUi(path_to_ui)
 
   def accept(self):
       length = self.form.BoxLength.value()
       width = self.form.BoxWidth.value()
       height = self.form.BoxHeight.value()
       if (length == 0) or (width == 0) or (height == 0):
           print("Error! None of the values can be 0!")
           # we bail out without doing anything
           return
       box = Part.makeBox(length,width,height)
       Part.show(box)
       FreeCADGui.Control.closeDialog()
        
panel = BoxTaskPanel()
FreeCADGui.Control.showDialog(panel)
}}

<div class="mw-translate-fuzzy">
В вышеуказанном коде мы использовали общую функцию (PySideUic.loadUi) из модуля FreeCADGui. Эта функция загружает файл .ui, создаёт из него виджет Qt, и сопоставляет имена, так что мы можем легко добираться до подвиджетов по их именам (пример: self.form.BoxLength).
</div>

Функция "accept" это так же удобство, предлагаемое Qt. Когда в диалоге есть кнопка "OK" (которая есть по умолчанию при использовании панели задач FreeCAD), любая функция, называемая "accept" автоматически выполняется когда нажата кнопка "OK". Соответственно, Вы можете так же добавить функцию "reject", которая будет исполняться когда будет нажата кнопка "Cancel". В нашем случае мы опустили эту функцию, так что нажатие "Cancel" обрабатывается по умолчанию (ничего не делает и закрывает диалог).

Если мы создадим функции accept или reject, их действие по умолчанию (ничего не делать и закрыть) больше не сработает. Так что нам надо закрывать панель Task самостоятельно. Это делается с помощью:

{{Code|code=
FreeCADGui.Control.closeDialog() 
}}

Когда у нас есть BoxTaskPanel, в которой: 1- виджет "self.form", и 2- при необходимости функции accept и reject, мы можем открыть с её помощью панель задач, что делается этими двумя последними строчками:

{{Code|code=
panel = BoxTaskPanel()
 FreeCADGui.Control.showDialog(panel)
}}

<div class="mw-translate-fuzzy">
Заметьте, что создаваемый PySideUic.loadUi виджет не специффичен для FreeCAD, это стандартный виджет Qt, который может использоваться в других инструментах Qt. Например, мы можем показывать отдельное диалоговое окно с его помощью. Попробуем это в консоли Python FreeCADа (разумеется, используя правильный путь к вашему файлу .ui):
</div>

{{Code|code=
from PySide import QtGui
 w = FreeCADGui.PySideUic.loadUi("C:\Users\yorik\Documents\dialog.ui")
 w.show()
}}

<div class="mw-translate-fuzzy">
Разумеется, мы не добавляем в наш диалог никакую кнопку "OK" или "Cancel", поскольку сделан для использования из панели Task FreeCADа, которая содержит эти кнопки. Так что этот диалог нельзя закрыть (кроме как нажав кнопку закрытия окна). Но функция show() создаёт немодальный диалог, то есть он не блокирует остальной интерфейс. Поэтому, когда диалог всё ещё открыт, мы можем читать значения полей:
</div>

{{Code|code=
w.BoxHeight.value() 
}}

Это очень полезно для тестирования.

В итоге, не забудьте, что в FreeCAD Wiki гораздо больше документации об использовании виджетов Qt, в секции [[Power_users_hub/ru|Python Scripting]], которая содержит [[Dialog_creation/ru|руководство по созданию диалогов]], специальное [[PySide/ru|руководство по PySide]], которое шире описывает тему.

== Связанные ссылки ==
* [https://en.wikipedia.org/wiki/Qt_Creator Документация Qt Creator]
* [https://www.qt.io/ide/ Установка Qt Creator]
* [[Power_users_hub/ru|Документация по скриптам на Python в FreeCAD]]
* [[Dialog_creation/ru|Учебник создания диалогов FreeCAD]]
* [[PySide/ru|Учебник PySide для FreeCAD]]
* [http://srinikom.github.io/pyside-docs/index.html Документация PySide]


{{Docnav/ru
|[[Manual:Creating parametric objects/ru|Создание параметрических объектов]]
|[[Manual:The Community/ru|Сообщество]]
|[[Manual:Introduction/ru|Руководство: Начало]]
|IconC=Crystal Clear manual.png
}}

{{Powerdocnavi{{#translation:}}}}
[[Category:Developer Documentation{{#translation:}}]]
[[Category:Python Code{{#translation:}}]]