<languages/>

{{Docnav/ru
|[[Manual:Creating_renderings/ru|Создание визуализаций (рендеринга)]]
|[[Manual:Creating_and_manipulating_geometry/ru|Создание и манипуляция геометрией]]
|[[Manual:Introduction/ru|Руководство: Начало]]
|IconC=Crystal_Clear_manual.png
}}

{{Manual:TOC}}

[https://ru.wikipedia.org/wiki/Python Python (рус.)][https://en.wikipedia.org/wiki/Python_%28programming_language%29 (англ.)] - широко используемый язык программирования с открытым исходным кодом, признанный за свою простоту, универсальность и наглядность. Он часто встраивается в приложения в качестве языка сценариев, и FreeCAD не является исключением. Такая интеграция позволяет пользователям автоматизировать задачи, настраивать рабочие процессы и расширять функциональность программы далеко за пределы её графического интерфейса.

Python обладает рядом преимуществ, которые делают его особенно подходящим для пользователей FreeCAD. Он дружелюбен к новичкам, имеет ясный и интуитивно понятный синтаксис, что делает его простым в изучении даже для людей, не имеющих опыта программирования. Такая доступность особенно важна в сообществе FreeCAD, где многие пользователи являются представителями различных профессий, таких как инженеры, архитекторы и дизайнеры, и не имеют обширных знаний в области программирования.

Кроме того, широкое распространение Python в других приложениях, таких как [https://www.blender.org Blender] для 3D-моделирования, [https://www.inkscape.org Inkscape] для векторной графики и [https://grass.osgeo.org GRASS GIS] для геопространственного анализа, делает его необходимым навыком для тех, кто хочет расширить свои возможности по написанию скриптов (сценариев). Освоение Python в FreeCAD не только расширит ваши возможности по созданию пользовательских инструментов и макросов, но и позволит получить навыки, которые можно применять в различных программных платформах.

В FreeCAD скрипты Python позволяют тебе:

* Автоматизировать повторяющиеся задачи, чтобы сэкономить время и уменьшить количество ошибок.
* Создавать пользовательские параметрические объекты, которые динамически адаптируются к изменениям.
* Разрабатывать персонализированные макросы и инструменты для конкретных рабочих процессов.
* Взаимодействовать с интерфейсом прикладного программирования (API) FreeCAD для программного доступа и манипулирования геометрией, сценами и элементами пользовательского интерфейса.

Используя Python, пользователи FreeCAD могут раскрыть весь потенциал программы, превратив её в мощный и гибкий инструмент, отвечающий их уникальным потребностям.

FreeCAD включает в себя расширенную консоль Python, доступную через '''Вид → Панели → Python''' Консоль. Этот инструмент позволяет пользователям выполнять операции, выходящие за рамки графического интерфейса, такие как доступ к расширенным функциям, устранение ошибок геометрии и автоматизация задач. Она также регистрирует команды Python для действий в графическом интерфейсе, если включена опция '''Показывать команды сценария в консоли Python''' ({{MenuCommand|Правка → Параметры → Python → Macro}}). Держа консоль открытой, вы можете наблюдать, как код Python разворачивается в процессе работы, предлагая интуитивно понятный способ изучения языка в процессе знакомства с возможностями FreeCAD. Наконец, во FreeCAD есть система [[Macros/ru|макросов]], которая позволяет записывать действия для последующего воспроизведения. Эта система также использует консоль Python, просто записывая всё, что в ней делается.


[[File:FreeCAD Python Console.png]]

В этой главе мы познакомимся с языком Python в общих чертах. Если вы хотите узнать больше, то в вики-документации FreeCAD есть обширный раздел, посвящённый [[Power_users_hub/ru|Python программированию]].

<span id="Writing_Python_code"></span>
=== Написание кода на Python ===

В FreeCAD вы можете писать код на Python двумя основными способами: через консоль Python ({{MenuCommand|Вид → Панели → Консоль Python}}) или с помощью редактора макросов ({{MenuCommand|Макро → Макросы → Создать}}). Консоль Python позволяет вводить команды по одной за раз, которые выполняются сразу после нажатия кнопки Return, что делает её идеальной для быстрого тестирования или интерактивного исследования. Редактор макросов, с другой стороны, используется для написания и сохранения более сложных скриптов, состоящих из нескольких строк кода. Эти макросы могут быть выполнены как единое целое позже из окна Макросов, предоставляя мощный способ автоматизации повторяющихся задач и расширения функциональности FreeCAD. В этой главе вы сможете использовать оба метода, но настоятельно рекомендуется использовать Консоль Python, так как она немедленно сообщит вам о любых ошибках, допущенных при вводе текста.

Если вы впервые используете Python, прочтите это краткое [[Introduction_to_Python/ru|введение в программирование на Python]], прежде чем двигаться дальше, оно разъяснит основные понятия Python.

<span id="Manipulating_FreeCAD_objects"></span>
=== Манипуляция объектами FreeCAD ===

Начнём с создания нового пустого документа:

{{Code|code=
doc = FreeCAD.newDocument()
}}

В консоли Python FreeCAD, как только вы набираете FreeCAD. (слово «FreeCAD», за которым следует точка), появляется окно автозаполнения. Эта функция не только ускоряет рабочий процесс, предлагая доступные команды, но и помогает открыть для себя новые функции и возможности FreeCAD. Каждый пункт в списке содержит подсказку, объясняющую его назначение, что облегчает понимание и изучение доступных функций. Эта функция автозаполнения особенно полезна для новичков, изучающих скриптинг на Python, и для опытных пользователей, эффективно ориентирующихся в обширном API FreeCAD. Уделите время изучению опций в окне автозаполнения - возможно, вы обнаружите команды, которые упростят ваш рабочий процесс или откроют новые возможности.

[[File:FreeCAD python newDocument.png]]

Набрав '''FreeCAD.newDocument()''', ты создашь новый, пустой документ во FreeCAD, как и при нажатии кнопки '''Новый документ''' на панели инструментов. Когда ты выполняешь команду '''doc = FreeCAD.newDocument()''', новый объект документа присваивается переменной '''doc''', что позволяет манипулировать им программно. Используя doc, ты можешь добавлять объекты, изменять свойства или же сохранять документ.

В Python точка (.) используется для обозначения того, что один элемент содержится внутри другого. Например, '''newDocument''' - это функция внутри '''модуля FreeCAD''', поэтому мы пишем FreeCAD.newDocument. Появившееся окно автозаполнения показывает всё, что доступно в модуле FreeCAD. Если бы вы набрали точку после newDocument (без добавления круглых скобок), то отобразилось бы всё, что относится к функции newDocument. Это иллюстрирует, как Python организует объекты и доступ к ним и их компонентам. Важно отметить, что круглые скобки обязательны при вызове функции Python, так как они указывают на выполнение функции.

Теперь вернёмся назад в документ. Посмотрим, что мы можем с ним сделать. Введи следующее и изучи доступные варианты:

{{Code|code=
doc.
}}

В FreeCAD соглашения об именовании команд Python помогут вам понять их назначение:

* Имена, начинающиеся с заглавной буквы, обычно являются атрибутами, которые хранят значения или данные, например, свойства объекта.
* Имена, начинающиеся со строчной буквы, обычно представляют собой функции (также называемые методами), которые выполняют действия или операции, такие как создание или изменение объектов.
* Имена, начинающиеся с символа подчёркивания (_), обычно предназначены для внутреннего использования внутри модуля и обычно могут быть проигнорированы.

Это различие поможет тебе ориентироваться в API FreeCAD и выбрать подходящую команду для твоих нужд. Например, ты можешь использовать метод для добавления нового объекта в документ. Метод выполняет действия по созданию и добавлению объекта, а атрибуты хранят свойства объекта. Понимание этой структуры облегчает изучение доступных функций, особенно при использовании функции автозаполнения или чтении всплывающих подсказок. Давай добавим куб.

{{Code|code=
box = doc.addObject("Part::Box", "myBox")
}}

Команда '''box = doc.addObject("Part::Box", "myBox")''' добавляет в документ новый объект 3D-куб. Вот простое объяснение:

*„“'doc.addObject'„“: Это указывает FreeCAD на добавление нового объекта в документ.
*„“'Part::Box'„“: Это указывает тип создаваемого объекта, в данном случае 3D-куб.
*„“'myBox'„“: присваивает имя новому объекту, что облегчает его идентификацию и последующее использование.

В результате этой команды в активном документе появляется бокс, а переменная box сохраняет ссылку на него, чтобы вы могли изменять его или взаимодействовать с ним позже. Наш куб добавлен в дерево проекта но в 3D-виде пока ничего не происходит, потому что при работе из Python документ никогда не пересчитывается автоматически. Мы должны делать это вручную, когда это необходимо:

{{Code|code=
doc.recompute()
}}

Теперь наша куб появился в 3D-виде. Многие кнопки панели инструментов, добавляющие объекты в FreeCAD, на самом деле делают две вещи: добавляют объект и пересчитывают. Попробуйте теперь добавить сферу с помощью соответствующей кнопки в верстаке Part - Деталь, и вы увидите, как две строки кода Python выполняются одна за другой.

[[File:FreeCAD python Sphere.png]]

You can get a list of all possible object types like Part::Box:

{{Code|code=
doc.supportedTypes()
}}

Теперь давай изучим содержимое нашего куба:

{{Code|code=
box.
}}

Ты сразу же увидишь несколько очень интересных вещей, таких как:

{{Code|code=
box.Height
}}

Это выведет текущую высоту нашего куба. Теперь давай попробуем изменить её:

{{Code|code=
box.Height = 5
}}

Если ты выделишь свой куб мышью, то увидишь, что на панели свойств, на вкладке '''Данные''', появится наше свойство '''Height - Высота''' с новым значением. Все свойства объекта FreeCAD, которые появляются на вкладках '''Данные''' и '''Вид''', доступны непосредственно через Python, по их именам, как мы это сделали со свойством Height - Высота. Доступ к свойствам данных осуществляется непосредственно из самого объекта, например:

{{Code|code=
box.Length
}}

В FreeCAD визуальными свойствами управляет объект '''ViewObject''' Каждый объект FreeCAD имеет связанный с ним объект ViewObject, который хранит информацию о том, как объект отображается в графическом интерфейсе, например, цвет, прозрачность или видимость. Однако объект ViewObject доступен только тогда, когда FreeCAD запущен с графическим интерфейсом. Если FreeCAD запущен в неграфическом режиме - например, из терминала с опцией командной строки -c или при использовании в качестве библиотеки Python во внешнем скрипте - объект ViewObject будет недоступен. Это происходит потому, что в этих режимах нет визуального представления объекта, так как графический интерфейс не загружен.

Попробуй выполнить следующий пример, чтобы получить доступ к цвету линии нашего куба:

{{Code|code=
box.ViewObject.LineColor
}}

<span id="Vectors_and_Placements"></span>
<div class="mw-translate-fuzzy">
Вектора это фундаментальная концепция в любом приложении трёхмерного моделирования. Это список из 3 чисел (x, y и z), указывающих точку или позицию в трёхмерном пространстве. С векторами могут быть выполнены множество вещей, сложение, вычитание, проекции и многое другое. В FreeCAD векторы работают так:
</div>

<div class="mw-translate-fuzzy">
myvec = FreeCAD.Vector(2,0,0)
 print(myvec)
 print(myvec.x)
 print(myvec.y)
 othervec = FreeCAD.Vector(0,3,0)
 sumvec = myvec.add(othervec)
</div>

<div class="mw-translate-fuzzy">
Другое общее свойство объектов FreeCAD это их размещение '''Placement'''. Как мы видели в предыдущих главах, у каждого объекта есть параметр Placement, содержащий его позицию (Base) и ориентацию (Rotation). Ими легко манипулировать через Python, например, для перемещения нашего объекта:
</div>

<div class="mw-translate-fuzzy">
print(box.Placement)
 print(box.Placement.Base)
 box.Placement.Base = sumvec
 otherpla = FreeCAD.Placement()
 otherpla.Base = FreeCAD.Vector(5,5,0)
 box.Placement = otherpla
</div>

<div class="mw-translate-fuzzy">
'''Читать далее'''
</div>

{{Code|code=
myvec = FreeCAD.Vector(2, 0, 0)
print(myvec)
print(myvec.x)
print(myvec.y)
othervec = FreeCAD.Vector(0, 3, 0)
sumvec = myvec.add(othervec)
}}

<div class="mw-translate-fuzzy">
{{Docnav/ru
|[[Manual:Creating renderings/ru|Создание визуализаций]]
|[[Manual:Creating and manipulating geometry/ru|Creating and manipulating geometry]]
|[[Manual:Introduction/ru|Manual start]]
|IconC=Crystal Clear manual.png
}}
</div>

<div class="mw-translate-fuzzy">
{{Docnav/ru
|[[Manual:Creating renderings/ru|Создание визуализаций]]
|[[Manual:Creating and manipulating geometry/ru|Creating and manipulating geometry]]
|[[Manual:Introduction/ru|Manual start]]
|IconC=Crystal Clear manual.png
}}
</div>

{{Code|code=
print(box.Placement)
print(box.Placement.Base)
box.Placement.Base = sumvec
otherpla = FreeCAD.Placement()
otherpla.Base = FreeCAD.Vector(5, 5, 0)
box.Placement = otherpla
}}

Here is a short breakdown of the above commands:

* '''print(box.Placement)''': Prints the placement of the box, which includes its position, rotation, and orientation in 3D space.
* '''print(box.Placement.Base)''': Prints the position (Base) of the box, which is a vector representing its location in 3D space.
* '''box.Placement.Base = sumvec''': Sets the base position (location) of the box to the vector sumvec, effectively moving the box to this new position.
* '''otherpla = FreeCAD.Placement()''': Creates a new placement object named otherpla.
* '''otherpla.Base = FreeCAD.Vector(5,5,0)''': Sets the base position of otherpla to a vector at coordinates (5, 5, 0).
* '''box.Placement = otherpla''': Applies otherpla to the box, updating its placement to the new position and orientation defined by otherpla.

'''Read more'''

* [https://www.python.org Python]
* [[Macros|Macros]]
* [[Introduction_to_Python|Introduction to Python]]
* [[Python_scripting_tutorial|Python scripting tutorial]]
* [[Power_users_hub|Power users hub]]


{{Docnav/ru
|[[Manual:Creating_renderings/ru|Создание визуализаций (рендеринга)]]
|[[Manual:Creating_and_manipulating_geometry/ru|Создание и манипуляция геометрией]]
|[[Manual:Introduction/ru|Руководство: Начало]]
|IconC=Crystal_Clear_manual.png
}}

{{Powerdocnavi{{#translation:}}}}
[[Category:Developer Documentation{{#translation:}}]]
[[Category:Python Code{{#translation:}}]]