<languages/>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Description ==
</div>

<div class="mw-translate-fuzzy">
[[PythonOCC/ru|PythonOCC]] это довольно новый и активный проект с целью привязки всех функций OpenCasCADe Technology (OCCT) к модулю [[Python/ru|Python]]. Этот подход сильно отличается от подхода FreeCAD, где используются лишь некоторые компоненты OpenCasCade, что приводит к куда более простой структуре. Страница проекта есть на [http://www.pythonocc.org/ pythonocc.org].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
PythonOCC, on the other hand, provides access to all OCCT classes and functions so it is complex but also very powerful. Therefore, when you are limited by FreeCAD's OCCT functionality, using {{incode|OCC}} is a good alternative.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Usage ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The [[Part_Workbench|Part Workbench]] has the methods {{incode|Part.__toPythonOCC__()}} and {{incode|Part.__fromPythonOCC__()}} to exchange {{incode|TopoDS_Shape}} ([[Part_TopoShape|Part TopoShape]]) entities to and from PythonOCC. These methods allow us to use the full power of OCCT in Python and then put the resulting shapes back into FreeCAD objects.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
PythonOCC is internally used by the [[Arch_IFC|IFC]] viewer included with the [[IfcOpenShell|IfcOpenShell]] libraries. IfcOpenShell is used to read and write [[Arch_IFC|IFC]] documents with FreeCAD. PythonOCC is only needed to launch IfcOpenShell's integrated viewer, otherwise it is not necessary.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Installation ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
PythonOCC must be compiled from source. For this you need to get the corresponding development files for [[OpenCASCADE|OpenCASCADE Technology]] (OCCT) and SWIG. The older version of PythonOCC was intended to wrap around OCE 0.18, the community edition of OCCT 6.9.x, which is now unmaintained. The newest version of PythonOCC is now intended to work with the recent, official OCCT 7.4 version.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Together with OCCT 7.4, PythonOCC requires fairly recent dependencies like Python 3.7, CMake 3.12, and SWIG 3.0.11. Python 2 is no longer supported.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
It is also possible to install pre-compiled PythonOCC libraries using [[Conda|Conda]]. For more information and compilation instructions, see the main project's repository, [https://github.com/tpaviot/pythonocc-core tpaviot/pythonocc-core].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Compilation ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
You can also self compile pythonOCC (see [https://github.com/tpaviot/pythonocc-core/blob/master/INSTALL.md instructions]). Below is the procedure for Debian/Ubuntu using distro-provided opencascade packages:
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
<pre>
git clone git://github.com/tpaviot/pythonocc-core.git pythonocc
cd pythonocc
mkdir build
cd build
cmake -DOCE_INCLUDE_PATH=/usr/include/opencascade -DOCE_LIB_PATH=/usr/lib/x86_64-linux-gnu ..
make
</pre>
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== More information ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* Project page: [http://www.pythonocc.org/ pythonocc.org]
* Newer version compatible with OCCT 7.4, [https://github.com/tpaviot/pythonocc-core tpaviot/pythonocc-core].
* Older version compatible with OCE 0.18, the community edition of OCCT 6.9.x, [https://github.com/tpaviot/pythonocc tpaviot/pythonocc].
* [https://forum.freecad.org/viewtopic.php?f=39&t=33254 IfcPlusPlus compiled on Gentoo - questions and alternatives?]
</div>

{{Powerdocnavi{{#translation:}}}}
[[Category:Developer Documentation{{#translation:}}]]
[[Category:Python Code{{#translation:}}]]
{{clear}}