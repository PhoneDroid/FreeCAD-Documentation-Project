<languages/>

<span id="Overview"></span>
== Обзор ==

[[Image:Sketcher_helper_constraint_example1.png|thumb|500px|Пример вспомогательного ограничения (Constraint5 - точка на окружности) для касательного ограничения (Constraint6; в режиме касательной-через-точку). В данном случае используется только одно вспомогательное ограничение, так как точка касания является конечной точкой главного диаметра эллипса, который по своей природе лежит на эллипсе.]]

Вспомогательные ограничения - это обычные ограничения скетчера, которые необходимы как часть более сложных ограничений, но выставляются в пользовательском интерфейсе, чтобы помочь справиться с избыточностью. Например, для ограничения [[Sketcher ConstrainSnellsLaw/ru|Закон Снелля]] две линии, представляющие лучи света, должны быть соединены ([[Sketcher ConstrainCoincident|Ограничением Совпадения]]), а их соединение должно лежать на границе раздела сред с ([[Sketcher_ConstrainPointOnObject|Ограничением точки на объекте]]). 

Вспомогательные ограничения будут добавлены автоматически, когда они понадобятся. Решение о том, нужны ли они, в настоящее время принимается путём оценки погрешности вспомогательных ограничений для текущего состояния геометрии (это может измениться в будущих версиях). Если ошибка достаточно мала, ограничение считается ненужным, и оно не будет добавлено. В некоторых случаях такая логика может привести к ошибкам (ограничение может быть выполнено случайно, что легко может произойти при включенной привязке к сетке Скетчера). 

Если это произойдёт (вспомогательное ограничение отсутствует, а необходимые условия не выполняются), сложное ограничение будет нарушено. Оно будет что-то делать, но фактическое поведение не будет определено. Такое сломанное ограничение можно исправить, добавив недостающее вспомогательное ограничение вручную.

Вспомогательные ограничения в настоящее время требуются для:
* [[Sketcher_ConstrainTangent/ru|Ограничить касательную или коллинеарность]] (в режиме касательной через точку необходимы два ограничения Точки на объекте)
* [[Sketcher_ConstrainPerpendicular/ru|Ограничение перпендикулярности]] (в режиме перпендикуляра через точку необходимы два ограничения Точки на объекте)
* [[Sketcher_ConstrainAngle/ru|Ограничение Угла]] (в режиме угол через точку необходимы два ограничения Точки на объекте)
* [[Sketcher_ConstrainSnellsLaw/ru|Ограничение преломления (Закон Снеллиуса)]] (Необходимо ограничение совпадения и ограничение Точка на объекте)

<span id="Scripting"></span>
== Написание скриптов ==

When constraints requiring helpers are added from Python, no helper constraints are automatically added. One can replicate the automatic decision-making of the UI commands in a script by testing the following functions, specifically added for the purpose and used in the UI routines:

{{Code|code=
Sketch.isPointOnCurve(icurve,x,y)
}}

{{Incode|isPointOnCurve}} tests if a virtual point, given by sketch coordinates {{Incode|x,y}} (float values), happens to satisfy a virtual point-on-object constraint - i.e. lies on curve specified by curve index {{Incode|icurve}}. Returns True if the point is on curve, and False if it doesn't.

{{Code|code=
Sketch.calculateConstraintError(iconstr)
}}

{{Incode|calculateConstraintError}} evaluates an error function of a constraint specified by its index {{Incode|iconstr}} in the sketch. If there is only one error function in the constraint, the return value is the signed return value of the error function. If there is more than one error function associated with the constraint (i.e. the constraint removes more than one degree of freedom), the return value is the RMS of all the error functions (always positive).


{{Sketcher_Tools_navi{{#translation:}}}}
{{Userdocnavi{{#translation:}}}}