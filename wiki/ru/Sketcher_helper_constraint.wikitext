<languages/>

<span id="Overview"></span>
== Обзор ==

[[Image:Sketcher_helper_constraint_example1.png|thumb|500px|Пример вспомогательного ограничения (Constraint5 - точка на окружности) для касательного ограничения (Constraint6; в режиме касательной-через-точку). В данном случае используется только одно вспомогательное ограничение, так как точка касания является конечной точкой главного диаметра эллипса, который по своей природе лежит на эллипсе.]]

Вспомогательные ограничения - это обычные ограничения скетчера, которые необходимы как часть более сложных ограничений, но выставляются в пользовательском интерфейсе, чтобы помочь справиться с избыточностью. Например, для ограничения [[Sketcher ConstrainSnellsLaw/ru|Закон Снелля]] две линии, представляющие лучи света, должны быть соединены ([[Sketcher ConstrainCoincident|Ограничением Совпадения]]), а их соединение должно лежать на границе раздела сред с ([[Sketcher_ConstrainPointOnObject|Ограничением точки на объекте]]). 

Вспомогательные ограничения будут добавлены автоматически, когда они понадобятся. Решение о том, нужны ли они, в настоящее время принимается путём оценки погрешности вспомогательных ограничений для текущего состояния геометрии (это может измениться в будущих версиях). Если ошибка достаточно мала, ограничение считается ненужным, и оно не будет добавлено. В некоторых случаях такая логика может привести к ошибкам (ограничение может быть выполнено случайно, что легко может произойти при включенной привязке к сетке Скетчера). 

Если это произойдёт (вспомогательное ограничение отсутствует, а необходимые условия не выполняются), сложное ограничение будет нарушено. Оно будет что-то делать, но фактическое поведение не будет определено. Такое сломанное ограничение можно исправить, добавив недостающее вспомогательное ограничение вручную.

Вспомогательные ограничения в настоящее время требуются для:
* [[Sketcher_ConstrainTangent/ru|Ограничить касательную или коллинеарность]] (в режиме касательной через точку необходимы два ограничения Точки на объекте)
* [[Sketcher_ConstrainPerpendicular/ru|Ограничение перпендикулярности]] (в режиме перпендикуляра через точку необходимы два ограничения Точки на объекте)
* [[Sketcher_ConstrainAngle/ru|Ограничение Угла]] (в режиме угол через точку необходимы два ограничения Точки на объекте)
* [[Sketcher_ConstrainSnellsLaw/ru|Ограничение преломления (Закон Снеллиуса)]] (Необходимо ограничение совпадения и ограничение Точка на объекте)

<span id="Scripting"></span>
== Написание скриптов ==

Когда ограничения, требующие вспомогательных элементов, добавлены из Python, вспомогательные ограничения автоматически не будут добавлены. Автоматическое принятие решений командами пользовательского интерфейса можно воспроизвести в сценарии, протестировав следующие функции, которые были добавлены специально для этой цели и используются в процедурах пользовательского интерфейса:

{{Code|code=
Sketch.isPointOnCurve(icurve,x,y)
}}

{{Incode|isPointOnCurve}} проверяет, виртуальную точку, заданная координатами эскиза {{Incode|x,y}} (значения float), удовлетворяет-ли ограничению виртуальной точки на объекте - т.е. лежит на кривой, заданной индексом кривой {{Incode|icurve}}. Возвращает True, если точка лежит на кривой, и False, если нет.

{{Code|code=
Sketch.calculateConstraintError(iconstr)
}}

{{Incode|calculateConstraintError}} оценивает функцию ошибки ограничения, указанного индексом {{Incode|iconstr}} в эскизе. Если в ограничении есть только одна функция ошибки, то возвращаемое значение - это знаковое возвращаемое значение функции ошибки. Если с ограничением связано более одной функции ошибки (т.е. ограничение устраняет более одной степени свободы), то возвращаемое значение - среднеквадратичное значение всех функций ошибки (всегда положительное).


{{Sketcher_Tools_navi{{#translation:}}}}
{{Userdocnavi{{#translation:}}}}