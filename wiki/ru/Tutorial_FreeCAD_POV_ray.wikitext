<languages/>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{VeryImportantMessage|The [[Raytracing_Workbench|Raytracing workbench]] is being superseded by the new [https://github.com/FreeCAD/FreeCAD-render Render Workbench], which is intended as its replacement. The Render Workbench can be installed through the [[Std_AddonMgr|Addon Manager]]. The information here is provided because by default FreeCAD is still shipped (as of 0.19-24276) with the Raytracing Workbench, and because the new workbench should basically work in the same way}}
</div>

<div class="mw-translate-fuzzy">
{{TutorialInfo/ru
|Topic=Rendering
|Level=Intermediate
|Time=120 минут
|Author=[https://forum.freecadweb.org/memberlist.php?mode=viewprofile&u=21943 vocx]
|FCVersion=0.18 или выше
|Files=нет
}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==Introduction==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
This tutorial shows how to produce a rendered image in FreeCAD, using the POV-Ray renderer. It assumes that the user already created a part or assembly in FreeCAD, or has imported one into it. It uses the [[Raytracing Workbench]] to produce the file for rendering.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
This tutorial is based on the forum post by schupin [https://forum.freecad.org/viewtopic.php?f=36&t=32745 FreeCAD / pov ray tutorial], which also includes one {{incode|.pov}} file required to produce a rendering.
</div>

[[Image:Povray_before_after.png|600px|center]]

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Caption|align=center|Example by schupin of a 3D model and high quality render produced with FreeCAD and POV-Ray.}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The files used in this tutorial are in post #8 [https://forum.freecad.org/viewtopic.php?f=36&t=32745#p305169 in the same thread].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==Basic setup==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Follow the basic workflow outlined in the [[Raytracing Workbench]] documentation.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
For direct rendering to work, the {{incode|povray}} executable must be set in {{MenuCommand|Edit → Preferences → Raytracing → Render → POV-Ray executable}}; set it to its location in your system, for example, {{incode|/usr/bin/povray}}. Other options used by the renderer can be defined here as well, including the width {{incode|+W}} and height {{incode|+H}} of the image, and the use of antialiasing {{incode|+A}}.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==Setup the .pov file==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
1. Create an assembly using bodies from the [[Part_Workbench|Part]] or [[PartDesign_Workbench|PartDesign Workbenches]], or any other workbench that produces solid objects, for example, the [[Arch Workbench]]. Assign colors or materials to the individual bodies that make the assembly, approximately matching the color that you want in your render.
</div> 

[[Image:01_T04_FreeCAD_POVray_model.png|600px|center]]

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Caption|align=center|Assembly of three bodies created in FreeCAD, and with colors or materials assigned.}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
2. If your model is very detailed, make sure the {{PropertyView|Deviation}} of the body is set to a low value, between {{incode|0.1}} and {{incode|0.01}}, or even smaller. The lower this value is, the more detailed the exported mesh will be, and thus the better the quality of the render will be.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
[[Image:02_T04_FreeCAD_POVray_deviation.png|center]]
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Caption|align=center|Deviation property of the bodies created in FreeCAD; the deviation needs to be small in order to export the parts with good resolution.}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
3. Create a POV-Ray project by clicking {{Button|[[Image:Raytrace_New.svg|16px]] [[Raytracing New|New]]}}. If the viewport is set as [[Std OrthographicCamera|orthographic]], change it to [[Std PerspectiveCamera|perspective]], as the renderer will normally work with a camera with perspective view. Using perspective view will allow you to see better the type of scene that will be rendered.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
4. Select all objects that you want to add to your scene, then select the created {{incode|PovProject}} object, and click on {{Button|[[Image:Raytrace_NewPartSegment.svg|16px]] [[Raytracing_InsertPart|InsertPart]]}}.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Emphasis|Note:}} beware of those objects that are not currently visible in the 3D viewport. If they are invisible but are included in the scene, they will still be rendered. On the other hand, if you really want to omit a body from being rendered, don't select it for inclusion into the POV-Ray project.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Emphasis|Note 2:}} all objects in the POV-Ray project will have a name based on their internal FreeCAD name. It's important to note which is the POV-Ray name, as further options, for example, the material textures, will be assigned to these POV-Ray names.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
5. In the 3D viewport, zoom, pan and rotate the view to setup the scene as you want. Make sure the objects are centered in the viewport, then select the created {{incode|PovProject}} object, and press {{Button|[[Image:Raytrace_ResetCamera.svg|16px]] [[Raytracing ResetCamera|ResetCamera]]}}.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
6. The POV-Ray file is now ready; it contains the selected objects and the camera information. Select the created {{incode|PovProject}} object, and then press {{Button|[[Image:Raytrace_ExportProject.svg|16px]] [[Raytracing ExportProject|ExportProject]]}} to save the {{incode|.pov}} file.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
7. The created {{incode|.pov}} file can now be rendered directly from FreeCAD. Select the created {{incode|PovProject}} object, then press {{Button|[[Image:Raytrace_Render.svg|16px]] [[Raytracing_Render|Render]]}}. When the popup image appears on screen, click on it so that it is sent to FreeCAD in its own window tab.
</div>

[[Image:03_T04_FreeCAD_POVray_first_render.png|600px|center]]

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Caption|align=center|First render of the assembly produced with POV-Ray, with the standard template written by the Raytracing Workbench.}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
7.1. With the {{incode|.pov}} file already created, it is also possible to run {{incode|povray}} from the command line.
</div>
{{Code|code=
povray assembly.pov +W800 +H600 +AM2 +A
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The options {{incode|+WX +HY}} set the horizontal and vertical pixel sizes of the final image.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The options {{incode|+AM2}} (type 2, recursive super-sampling) and {{incode|+A}} trigger antialiasing to produce a smoother image.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
8. By double clicking the {{incode|PovProject}} object it's possible to see that it is using the {{incode|ProjectStd.pov}} template; this template creates a basic {{incode|.pov}} file which will produce a simple and dark image.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
To improve the appearance of the image, use a better template. Double click the {{incode|PovProject}} object and choose the {{incode|RadiosityNormal.pov}} template. Then export a new {{incode|.pov}} file, and run again the renderer. The image should look brighter and generally better.
</div>

[[Image:04_T04_FreeCAD_POVray_first_render_radiosity.png|600px|center]]

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Caption|align=center|Render of the assembly produced with POV-Ray, with the RadiosityNormal template written by the Raytracing Workbench.}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Once again double click the {{incode|PovProject}} object and now choose the {{incode|RadiosityOutdoorHQ.pov}} template. Then export a new {{incode|.pov}} file, and run again the renderer. The image should take longer to produce, but the result should have better quality.
</div>
[[Image:05_T04_FreeCAD_POVray_first_render_radiosity_outdoor.png|600px|center]]

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Caption|align=center|Render of the assembly produced with POV-Ray, with the RadiosityOutdoorHQ template written by the Raytracing Workbench.}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
If the rendered image is good enough, then it can be saved, and there is nothing more to do. However, in order to control precisely the appearance of the materials and produce even better results, the {{incode|.pov}} file needs to be edited manually.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In the following sections, we edit the basic {{incode|.pov}} file produced with the {{incode|ProjectStd}} template.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==Editing the .pov file==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
9. The {{incode|.pov}} file generated by FreeCAD is a simple text file that can be opened with any editor. It loosely resembles a C++ source code file: directives start with a hash {{incode|#}} and are terminated by a semi-colon {{incode|;}}. Curly braces <code>{ }</code> are used to limit section blocks, and indentation is arbitrary white space. Comments are indicated with a double slash {{incode|//}}; block comments can be defined with a pair of {{incode|/*  */}}, like in C.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The file may look complicated at first but 90% of its content is just mesh data that doesn't require many changes, as these meshes represent the geometry of the bodies that we want to render.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The file is structured as follows:
* Includes
* Global settings
* Sky sphere
* Planes
* Finishes and textures
* Camera
* Mesh and body information
* Light source
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The camera information will not be touched, neither most information in the meshes. The main modifications will be made on the other sections.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
As the meshes won't be heavily modified, the file can be re-organized so this information is at the end of the file.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
<div class="toccolours mw-collapsible mw-collapsed">
This is the complete content of the {{incode|.pov}} file, only without the meshes.
<div class="mw-collapsible-content">
</div>
{{Code|code=
// Persistence of Vision Ray Tracer Scene Description File
// for FreeCAD (https://freecad.org)

#version 3.6;

#include "colors.inc"
#include "metals.inc"

// ----------------------------------------

global_settings {
    assumed_gamma 1.0
    ambient_light color rgb <1.0,1.0,1.0>
    max_trace_level 20
}  

// ----------------------------------------


sky_sphere {
  pigment {
    gradient y
    color_map {
      [0.0 rgb <0.6,0.7,1.0>]
      [0.7 rgb <0.0,0.1,0.8>]
    }
  }
}


// ----------------------------------------

plane {
  y, -1
  texture { pigment {rgb <0.0,0.0,0.0>} finish {ambient 0.0 reflection 0.05 specular 0.0} }
}

// Standard finish
//#declare StdFinish = F_MetalA;
//#declare StdFinish = finish { diffuse 0.7 };
//#declare StdFinish = finish { phong 0.5 };
//#declare StdFinish = finish { ambient rgb <0.5,0.5,0.5> };
//#declare StdFinish = finish { crand 0.5 phong 0.9};
#declare StdFinish = finish { ambient 0.01 diffuse 0.9 phong 1.0 phong_size 70 metallic brilliance 1.5} ;

// declares position and view direction

// Generated by FreeCAD (https://freecad.org/)
#declare cam_location =  <-171.753,1229.11,-2667.08>;
#declare cam_look_at  = <636.959,359.955,160.296>;
#declare cam_sky      = <0.068217,0.958943,0.275273>;
#declare cam_angle    = 45; 
camera {
  location  cam_location
  look_at   cam_look_at
  sky       cam_sky
  angle     cam_angle 
  right x*800/600
}
// Written by FreeCAD https://freecad.org/
// face number1 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ... meshes should be defined here until the end of the file ...




//default light
light_source {
  cam_location + cam_angle * 100
  color rgb <10, 10, 10>
}
}}
<div lang="en" dir="ltr" class="mw-content-ltr">
</div>
</div>
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Basic re-organization ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
10. Open the {{incode|.pov}} file with a text editor, go to the end of the file, select and cut the {{incode|light_source}} section, and paste it before the first {{incode|//face number1}} line.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The resulting file should have the {{incode|camera}} and {{incode|light_source}} sections next to each other, for example
</div>

{{Code|code=
// Generated by FreeCAD (https://freecad.org/)
#declare cam_location =  <-171.753,1229.11,-2667.08>;
#declare cam_look_at  = <636.959,359.955,160.296>;
#declare cam_sky      = <0.068217,0.958943,0.275273>;
#declare cam_angle    = 45; 
camera {
  location  cam_location
  look_at   cam_look_at
  sky       cam_sky
  angle     cam_angle 
  right x*800/600
}

//default light
light_source {
  cam_location + cam_angle * 100
  color rgb <10, 10, 10>
}
// Written by FreeCAD https://freecad.org/
// face number1 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
.
.
.
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Prepare lights ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
11. By default, the project file defines one light with a position and color.
</div>
{{Code|code=
light_source {
  cam_location + cam_angle * 100
  color rgb <10, 10, 10>
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The position of the light is defined by a vector {{incode|<x, y, z>}}. The {{incode|color}} can be established like an {{incode|<r, g, b>}} vector or it could also be a named color such as {{incode|White}}. If the RGB values are given, they should be in the range {{incode|0.0}} to {{incode|1.0}} for the light to have normal brightness.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Like other objects, the light can be modified with many options. The {{incode|area_light}} option creates a rectangular source, which is more realistic as it results in diffuse illumination that creates soft shadows. The {{incode|adaptive}} keyword helps reduce the computation time of the light paths; the larger the value the more accurate the result will be; to avoid long rendering times you should use the smallest integer that gives an acceptable result ({{incode|1}} or {{incode|2}} is usually enough); to obtain the best result remove the keyword completely (long rendering time). The {{incode|jitter}} keyword helps improve the shadows by randomly shifting the position of the lights. The keywords {{incode|circular}} and {{incode|orient}} turn the area light into a spherical source, which will produce better shadows when there are rounded objects in the scene. Including {{incode|fade_distance}} and {{incode|fade_power}} is helpful to attenuate the value of the light with distance, just like it happens with a real light source.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Set up the light coming from the right and above.
</div>
{{Code|code=
light_source {
    <1200, 1000, -1300>
    color White
    area_light <100, 0, 0>, <0, 0, 100>, 20, 20
    adaptive 1
    jitter
    circular orient
    fade_distance 1000 fade_power 2
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
If the light source is supposed to be in the scene, it may be useful to see a reference on the screen where this source should be. To this effect, create a sphere of a small radius and assume this sphere represents the light source; position the sphere where you want, then move the light very close to these coordinates, and test the lighting of the scene; when you are satisfied with the position of the light, simply delete the sphere.
</div>
{{Code|code=
sphere {
    <1200, 1000, -1200>, 10
    pigment { color White }
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
12. The {{incode|sky_sphere}} section is used to create a realistic sky background. It is commonly defined as a {{incode|gradient}} and a {{incode|color_map}} of at least two colors in order to produce a smooth transition from the color of the horizon to the color of the zenith of the scene.
</div>

{{Code|code=
sky_sphere {
    pigment {
        gradient y
        color_map {
            [0.0 color Gray50]
            [0.7 color White]
        }
    }
}
}}

[[Image:06_T04_FreeCAD_POVray_render_lights.png|600px|center]]

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Caption|align=center|Starting from the standard template, render of the scene with POV-Ray, with the light source and sky sphere set up.}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Prepare the body textures ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
13. The textures of each body need to be adjusted. This is the most time-consuming job of this process.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In the {{incode|.pov}} file each body is described in this way
* Face1, Face2, Face3, Face4, ...
* Body (union of faces)
* Object
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
A body mesh is defined by faces, and each face is defined by a series of triangular elements that themselves are defined by {{incode|vertex_vectors}}, {{incode|normal_vectors}}, and {{incode|face_indices}}. This information doesn't need to be modified at all. Then, each body is defined as the union of the specified faces. Again, this information doesn't need modification.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Finally, each {{incode|object}} to be rendered is defined as one of the specified bodies, with a particular {{incode|texture}}, which itself is defined by properties like {{incode|pigment}} and {{incode|finish}}.
</div>
{{Code|code=
// instance to render
object {Pov_Body
 texture {
      pigment {color rgb <0.827451,0.827451,0.431373>}
      finish {StdFinish } //definition on top of the project
  }
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
By searching the {{incode|.pov}} file for the keyword {{incode|object}}, it's possible to go directly to the desired part in the file, and modify its {{incode|texture}} appropriately.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
As indicated in the comment, the definition of {{incode|StdFinish}} is at the top of the file, in this case before the camera information. This value can be declared in many ways, as a combination of different properties, as shown in the commented and uncommented lines.
</div>
{{Code|code=
// Standard finish
//#declare StdFinish = F_MetalA;
//#declare StdFinish = finish { diffuse 0.7 };
//#declare StdFinish = finish { phong 0.5 };
//#declare StdFinish = finish { ambient rgb <0.5,0.5,0.5> };
//#declare StdFinish = finish { crand 0.5 phong 0.9};
#declare StdFinish = finish { ambient 0.01 diffuse 0.9 phong 1.0 phong_size 70 metallic brilliance 1.5} ;
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
In general, a {{incode|texture}} is a container that describes a material; it includes information like the {{incode|pigment}} (color or graphic), {{incode|normal}} (how the color changes with the curvature of the surface), {{incode|finish}} (interaction of the surface with the light), {{incode|pattern}} (agate, brick, dents, leopard, radial, ripples, tiling, waves, wood, etc.), and other properties. There are many options that can be combined together to produce a texture. This mixing is not trivial, but there are many examples online to obtain the desired appearance of the material.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Material libraries ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
14. POV-Ray comes with an extensive library of materials that can be used by name. By default, the project template makes available some materials by using {{incode|#include}} statements at the beginning of the file. These materials can be further modified as desired.
</div>
{{Code|code=
#include "colors.inc"
#include "metals.inc"
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The library {{incode|colors.inc}} defines basic colors by name, {{incode|Red}}, {{incode|Green}}, {{incode|Blue}}, {{incode|Yellow}}, {{incode|Cyan}}, {{incode|Magenta}}, {{incode|Clear}}, {{incode|White}}, and {{incode|Black}}. It also defines several other shades as well as functions to transform colors. The library {{incode|metals.inc}} contains copper, silver, chrome, and brass textures, and {{incode|golds.inc}} contains the gold textures.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The standard libraries are located in the installation directory of POV-ray, for example
</div>
{{Code|code=
/usr/share/povray-3.7/include/
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== New textures ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
15. For example, to create a mirror texture, the {{incode|finish}} is given a high value of {{incode|reflection}}.
</div>
{{Code|code=
#declare T_mirror = texture {
    finish { reflection {0.9} }
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Alternatively, for metals, a predefined finish can be used.
</div>
{{Code|code=
#include "metals.inc"
#declare T_mirror = texture {
    finish { F_MetalE }
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Then it can be assigned to the specific object.
</div>
{{Code|code=
object {Pov_Body002
    texture { T_mirror }
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The {{incode|woods.inc}} library defines the {{incode|T_Wood7}} texture (yellow pine, ragged grain). It can be used as the basis of a more complex texture, with some additional scaling and translation.
</div>
{{Code|code=
#include "woods.inc"
#declare T_wood = texture {
    T_Wood7
    scale 50.0
    translate x*1
    translate y*10
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Then it is assigned to the specific object.
</div>
{{Code|code=
object {Pov_Body
    texture { T_wood }
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The {{incode|glass.inc}} library defines {{incode|F_Glass2}} as a finish for transparent acrylic; it also defines {{incode|I_Glass}} as an interior material which, together with the {{incode|caustics}} option, is used to calculate as close as possible the effects of light passing through a transparent material. In this case, the {{incode|material}} section is used, containing external ({{incode|texture}}) and internal ({{incode|interior}}) information of the material.
</div>

{{Code|code=
#declare M_vase = material {
    texture {
        pigment { color rgbf <1.0, 0.73333, 0.0, 0.75> }
        finish { F_Glass2 }
    }
    interior { I_Glass caustics 1.0 }
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Then it is assigned to the specific object.
</div>
{{Code|code=
object {Pov_Body001
    material { M_vase }
}
}}

[[Image:07_T04_FreeCAD_POVray_render_materials.png|600px|center]]

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Caption|align=center|Starting from the standard template, render of the scene with POV-Ray, with the light source and sky sphere set up, and materials assigned.}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Prepare planes ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
16. If not provided by the original 3D model, planes can be added to simulate a floor or table top on which the objects are standing. More planes can be defined to serve as walls or other types of boundaries.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
By default, a single plane is created. It is placed 1 millimeter below the model, so that it appears as a floor. The plane is assigned a basic texture that is black and slightly reflective.
</div>
{{Code|code=
plane {
  y, -1
  texture { pigment {rgb <0.0,0.0,0.0>} finish {ambient 0.0 reflection 0.05 specular 0.0} }
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Notice that in POV-Ray the X axis is defined as horizontal (left-right), the Y axis is defined as vertical (up-down), and the Z axis is defined as depth (front-rear).
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
For a simple gray floor, that is barely reflective use
</div>
{{Code|code=
plane {
  y, -1
  texture { pigment {rgb <0.3, 0.3, 0.3>} finish {ambient 0.0 reflection 0.01 specular 0.0} }
}
}}

[[Image:08_T04_FreeCAD_POVray_render_floor_gray.png|600px|center]]

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Caption|align=center|Starting from the standard template, render of the scene with POV-Ray, with the light source and sky sphere set up, materials assigned, and a floor plane with a basic gray texture.}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
17. The plane can be given a more complex appearance with the help of normals and material libraries.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Define a normal map that will be used to give the plane the appearance of a parquet floor.
</div>

{{Code|code=
#declare Parquet_normal = normal {
    gradient z 2 slope_map { [0 <0,1>][0.05 <1,0>][0.95 <1,0>][1 <0,-1>] }
    scale 80
} ;
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Then define the plane. As {{incode|pigment}} use a wood {{incode|color_map}} defined in {{incode|woods.inc}}, and modify it with {{incode|turbulence}} and {{incode|scale}} so that the wood grain looks random. Then add the created normal, together with another normal; this will result in the texture of the parquet with slight imperfections. Then as {{incode|finish}}, make it a little bit reflective and glossy.
</div>

{{Code|code=
#include "woods.inc"
plane {
    y, -1
    pigment {
        wood color_map { M_Wood8A }
        turbulence 0.5 scale <10, 1, 1>*20
    }
    normal {
        average normal_map {
          [1 Parquet_normal]
          [1 wood 0.5 slope_map { [0 <0,0>][0.5 <0.5,1>][1 <1,0>] }
              turbulence 0.5 scale <10, 1, 1>*20]
        }
    }
    finish { ambient 0.0 reflection 0.1 specular 0.2 }
}
}}

[[Image:09_T04_FreeCAD_POVray_render_floor_wood.png|600px|center]]

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Caption|align=center|Starting from the standard template, render of the scene with POV-Ray, with the light source and sky sphere set up, materials assigned, and a floor plane with a parquet texture.}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
18. Add a second plane, this time perpendicular to the Z direction, to serve as a backwall. Displace it just a little bit behind the model to avoid covering the mirror. Include the {{incode|stones.inc}} library, add a generic granite texture, and scale it a bit. This will result in the appearance off a simple dry wall.
</div>

{{Code|code=
#include "stones.inc"
plane {
    z, 10
    texture {
        T_Grnt1   
        scale 0.02
    }
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
A third plane can be added behind the position of the camera so that the mirror reflects a limited area between the two walls.
</div>

{{Code|code=
#include "stones.inc"
plane {
    z, -3700
    texture {
        T_Grnt1   
        scale 0.02
    }
}
}}

[[Image:10_T04_FreeCAD_POVray_render_floor_wood_walls.png|600px|center]]

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Caption|align=center|Starting from the standard template, render of the scene with POV-Ray, with the light source and sky sphere set up, materials assigned, a floor plane with a parquet texture, and back walls with drywall textures.}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
===Prepare the global settings, radiosity===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
19. The global settings define ambient light.
</div>

{{Code|code=
global_settings {
    assumed_gamma 1.0
    ambient_light color rgb <1.0,1.0,1.0>
    max_trace_level 20
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The {{incode|radiosity}} property inside the {{incode|global_settings}} controls the way POV-Ray computes diffuse light interactions between different objects. It's essential to adjust this property to obtain good rendering results.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Because it can be time consuming to test different {{incode|radiosity}} settings you can use a variable {{incode|Rad_Quality}} and a {{incode|#switch}} statement to quickly set low, medium or high quality render settings. The higher the quality settings the more time is required to render an image.
</div>

{{Code|code=
#declare Rad_Quality = 1;

global_settings {
    assumed_gamma 1.0
    ambient_light color rgb <1.0,1.0,1.0>
    max_trace_level 20

#switch (Rad_Quality)
 #case (1)
    radiosity { // Settings 1 (fast)
        pretrace_start 0.08
        pretrace_end   0.02
        count 50
        error_bound 0.5
        recursion_limit 1
    }
    #break
 #case (2)
    radiosity { // Settings 2 (medium quality)
        pretrace_start 0.08
        pretrace_end   0.01
        count 120
        error_bound 0.25
        recursion_limit 1
    }
    #break
 #case (3)
    radiosity { // Settings 3 (high quality)
        pretrace_start 0.08
        pretrace_end   0.005
        count 400
        error_bound 0.1
        recursion_limit 2
    }
    #break
#end
}
}}

[[Image:11_T04_FreeCAD_POVray_render_floor_wood_walls_radiosity_1.png|600px|center]]

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Caption|align=center|Starting from the standard template, render of the scene with POV-Ray, with the light source and sky sphere set up, materials assigned, a floor plane with a parquet texture, and back walls with drywall textures. Radiosity settings for fast rendering.}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
20. The {{incode|rad_def.inc}} library defines a macro to quickly set up the {{incode|radiosity}} to a predefined configuration.
</div>
{{Code|code=
#include "rad_def.inc"
global_settings {
    radiosity {
        Rad_Settings(Setting, Normal, Media)
    }
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The {{incode|Setting}} value can be one of the predefined constants:
</div>
{{Code|code=
Radiosity_Default
Radiosity_Debug
Radiosity_Fast
Radiosity_Normal
Radiosity_2Bounce
Radiosity_Final
Radiosity_OutdoorLQ
Radiosity_OutdoorHQ
Radiosity_OutdoorLight
Radiosity_IndoorLQ
Radiosity_IndoorHQ
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The {{incode|Normal}} and {{incode|Media}} values are either {{incode|off}} or {{incode|on}}.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Therefore, to test different settings, the {{incode|#switch}} statement could also be written like in the following.
</div>

{{Code|code=
#declare Rad_Quality = 3;

global_settings {
    assumed_gamma 1.0
    ambient_light color rgb <1.0,1.0,1.0>
    max_trace_level 20

#switch (Rad_Quality)
 #case (1)
    radiosity { // Settings 1 (fast)
        Rad_Settings(Radiosity_Fast, off, off)
    }
    #break
 #case (2)
    radiosity { // Settings 2 (medium quality)
        Rad_Settings(Radiosity_2Bounce, on, on)
    }
    #break
 #case (3)
    radiosity{ // Settings 3 (high quality)
        Rad_Settings(Radiosity_Final, on, on)
        recursion_limit 2
    }
    #break
#end
}
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The exact values used by these presets can be found in the {{incode|rad_def.inc}} file which is found in the installation directory of POV-Ray, for example:
</div>
{{Code|code=
/usr/share/povray-3.7/include/
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
The [[Raytracing_Workbench|Raytracing Workbench]] has three default templates:
* {{incode|ProjectStd.pov}}, it doesn't use {{incode|radiosity}} at all.
* {{incode|RadiosityNormal.pov}}, it uses the preset {{incode|Radiosity_Normal}}.
* {{incode|RadiosityOutdoorHQ.pov}}, it uses the preset {{incode|Radiosity_OutdoorHQ}}.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Final render ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
21. The edited {{incode|.pov}} file can be saved when all adjustments have been done.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The final structure is as follows:
* Includes, with additional libraries
* Global settings, with radiosity parameters
* Sky sphere, with lighter color
* Planes, positioned and with textures
* Finishes and textures, with custom definitions
* Camera, not changed
* Light source, with additional properties
* Mesh and body information, using the textures defined previously
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Emphasis|Note:}} the sections of the {{incode|.pov}} file can be in any order, although it is probably easier to work with the file if the mesh information is at the end.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The final rendering can be done by clicking {{Button|[[Image:Raytrace_Render.svg|16px]] [[Raytracing_Render|Render]]}} or by running the executable from the command line.
</div>

{{Code|code=
povray assembly.pov +W800 +H600 +AM2 +A
}}

[[Image:12_T04_FreeCAD_POVray_render_floor_wood_walls_radiosity_final.png|600px|center]]

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Caption|align=center|Starting from the standard template, render of the scene with POV-Ray, with the light source and sky sphere set up, materials assigned, a floor plane with a parquet texture, and back walls with drywall textures. Radiosity settings for high quality result: {{incode|Radiosity_Final}} and {{incode|recursion_limit 2}}.}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
<div class="toccolours mw-collapsible mw-collapsed">
This is the complete content of the {{incode|.pov}} file, only without the last section, that is, without the meshes.
<div class="mw-collapsible-content">
</div>
{{Code|code=
// Persistence of Vision Ray Tracer Scene Description File
// for FreeCAD (https://freecad.org)

#version 3.6;

#include "colors.inc"
#include "metals.inc"
#include "woods.inc"
#include "glass.inc"
#include "stones.inc"
#include "rad_def.inc"

// ----------------------------------------
#declare Rad_Quality = 3;

global_settings {
    assumed_gamma 1.0
    ambient_light color rgb <1.0,1.0,1.0>
    max_trace_level 20

#switch (Rad_Quality)
 #case (1)
    radiosity { // Settings 1 (fast)
        Rad_Settings(Radiosity_Fast, off, off)
    }
    #break
 #case (2)
    radiosity { // Settings 2 (medium quality)
        Rad_Settings(Radiosity_2Bounce, on, on)
    }
    #break
 #case (3)
    radiosity{ // Settings 3 (high quality)
        Rad_Settings(Radiosity_Final, on, on)
        recursion_limit 2
    }
    #break
#end
}

// ----------------------------------------


sky_sphere {
    pigment {
        gradient y
        color_map {
            [0.0 color Gray50]
            [0.7 color White]
        }
    }
}


// ----------------------------------------

#declare Parquet_normal = normal {
    gradient z 2 slope_map { [0 <0,1>][0.05 <1,0>][0.95 <1,0>][1 <0,-1>] }
    scale 80
} ;

// Floor
plane {
    y, -1
    pigment {
        wood color_map { M_Wood8A }
        turbulence 0.5 scale <10, 1, 1>*20
    }
    normal {
        average normal_map {
          [1 Parquet_normal]
          [1 wood 0.5 slope_map { [0 <0,0>][0.5 <0.5,1>][1 <1,0>] }
              turbulence 0.5 scale <10, 1, 1>*20]
        }
    }
    finish { ambient 0.0 reflection 0.1 specular 0.2 }
}

// Back wall
plane {
    z, 10
    texture {
        T_Grnt1   
        scale 0.02
    }
}

// Behind camera wall
plane {
    z, -3700
    texture {
        T_Grnt1   
        scale 0.02
    }
}

#declare T_mirror = texture {
    finish { reflection {0.9} }
//    finish { F_MetalE }
}

#declare T_wood = texture {
    T_Wood7
    scale 50.0
    translate x*1
    translate y*10
}

#declare M_vase = material {
    texture {
        pigment { color rgbf <1.0, 0.73333, 0.0, 0.75> }
        finish { F_Glass2 }
    }
    interior { I_Glass caustics 1.0 }
}
// declares position and view direction

// Generated by FreeCAD (https://freecad.org/)
#declare cam_location =  <-171.753,1229.11,-2667.08>;
#declare cam_look_at  = <636.959,359.955,160.296>;
#declare cam_sky      = <0.068217,0.958943,0.275273>;
#declare cam_angle    = 45; 
camera {
  location  cam_location
  look_at   cam_look_at
  sky       cam_sky
  angle     cam_angle 
  right x*800/600
}
//default light
light_source {
    <1200, 1000, -1300>
    color White
    area_light <100, 0, 0>, <0, 0, 100>, 20, 20
    adaptive 1
    jitter
    circular orient
    fade_distance 1000 fade_power 2
}
// Written by FreeCAD https://freecad.org/
// face number1 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
// ... meshes should be defined here until the end of the file ...
}}
<div lang="en" dir="ltr" class="mw-content-ltr">
</div>
</div>
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Final notes ==
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
POV-Ray is a relatively old piece of software, first released in the early 1990s. Its main advantages over more modern software are
* it is a tested solution that has existed for many years
* runs in many operating systems
* the scene can be set with only one text file
* requires simple computational resources to produce a high quality image, so it works even in relatively old hardware
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The user is advised to read the POV-Ray documentation and more tutorials or examples in order to get the right settings for his or her needs.
* [https://www.povray.org/documentation/3.7.0/index.html POV-Ray for Unix version 3.7]
* [https://www.povray.org/documentation/3.7.0/t2_0.html POV-Ray Tutorial]
* [https://www.povray.org/documentation/3.7.0/r3_0.html POV-Ray Reference]
</div>


{{Raytracing Tools navi{{#translation:}}}}
{{Userdocnavi{{#translation:}}}}