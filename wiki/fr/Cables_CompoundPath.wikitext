<languages/>

{{Docnav/fr
|[[Cables_RemoveVertexAttachment/fr|Supprimer la connexion d'un sommet]]
|[[Cables_Edit/fr|Éditer]]
|[[Cables_Workbench/fr|Cables]]
|IconL=Cables_RemoveVertexAttachment.svg
|IconR=Cables_Edit.svg
|IconC=Cables_workbench_icon.svg
}}

{{GuiCommand/fr
|Name=Cables CompoundPath
|Name/fr=Cables Composé
|MenuLocation=Cable Wires → CompoundPath
|Workbenches=[[Cables_Workbench/fr|Cables]]
|Shortcut={{KEY|C}} {{KEY|P}}
|Version=0.2.0
|SeeAlso=[[Cables_WireFlex/fr|Cables WireFlex]]
}}

==Description==

La commande [[File:Cables_CompoundPath.svg|24px]] [[Cables_CompoundPath|Composé]] permet de créer un objet polyligne à partir d'un groupe d'autres objets polylignes. Sa forme topologique est un composé de polylignes ou d'une polyligne unique.

Il est possible d'utiliser '''Composé''' comme la base pour un [[Cables_Cable/fr|câble]] ou une [[Cables_CableConduit/fr|gaine]]. Une combinaison appropriée de [[Cables_WireFlex/fr|WireFlex]] et de [[Cables_CompoundPath/fr|composés]] peut être utilisée pour simplifier le processus de création de faisceaux de câbles complexes ou de câbles à l'intérieur de gaines de câbles, en évitant les polylignes de base redondants inutiles. Un seul objet '''WireFlex''' peut faire partie de plusieurs objets '''CompoundPath''' différents en influençant leurs formes.

L'exemple ci-dessous illustre l'objectif principal et les possibilités de l'objet '''CompoundPath'''. Le fichier source de l'exemple peut être téléchargé à partir d'ici : [https://github.com/sargo-devel/Cables/blob/master/examples/Harness%20examples/compoundPath_Test2.FCStd compoundPath_Test2.FCStd].

[[File:Cables_CompoundPath_Example1.png]]
{{Caption|Composé construit à partir de deux câbles distants}}

Le ''composé''' ne peut pas être édité directement comme un [[Cables_WireFlex/fr|WireFlex]]. Sa forme est le résultat des algorithmes qui sous-tendent les valeurs de la propriété '''Path Type''' : {{Value|Complex}}, {{Value|Wire}} ou {{Value|Simple}} et d'autres propriétés supplémentaires traitant ses polylignes de base déclarés sous la propriété '''Links'''.

===Path Type: Complex===
L'algorithme '''Path Type''':{{Value|Complex}} crée une polyligne unique basée sur tous les objets listés dans la propriété '''Links''' et partiellement sur la propriété '''Points'''. Par conséquent, l'utilisation de cet algorithme n'est possible que si tous les objets de base répertoriés dans la propriété '''Links''' ont la propriété '''Points'''. Dans le cas contraire, l'algorithme échouera. En outre, l'algorithme utilise d'autres propriétés pour "deviner" les intentions de l'utilisateur afin de créer la forme souhaitée.

Voici quelques règles utilisées par l'algorithme :
* Les espaces entre les objets de base sont autorisés. Ils seront connectés automatiquement avec des lignes et des arcs ou des courbes de Bézier. Une plus petite distance entre les extrémités des objets de base est choisie pour créer la connexion.
* La direction d'un objet de base unique n'est pas importante. Les objets de base seront connectés dans l'ordre de la propriété '''Links'''.
* S'il n'y a pas d'espace entre les objets de base, la connexion sera corrigée avec des filets d'arc.
* Si les propriétés de décalage de connexion sont utilisées, les arêtes des objets de base sont décalés pour atteindre le point de décalage.
* Si deux arêtes consécutives forment une seule ligne, elles sont remplacées par une seule arête.
* La tangence est préservée à travers toutes les connexions si possible (par exemple si '''MinimumFilletRadius''' le permet).

===Path Type: Wire===
L'algorithme '''Path Type''':{{Value|Wire}} crée une polyligne unique à partir de la propriété '''Points''' de tous les objets répertoriés dans la propriété '''Links'''. Par conséquent, l'utilisation de cet algorithme n'est possible que si tous les objets de base répertoriés dans '''Links''' ont la propriété '''Points'''. Dans le cas contraire, l'algorithme échouera. Il produit une polyligne basée sur des points donnés, similaire à la commande [[File:Draft_Wire.png|24px]] [[Draft_Wire/fr|Draft Polyligne]].

Les règles utilisées par l'algorithme sont similaires à celles utilisées par '''Path Type''':{{Value|Complex}} à l'exception de l'utilisation d'une courbe de Bézier. Les seules formes d'arêtes autorisées dans ce mode sont les lignes et les arcs. Si l'objet de base contient d'autres formes (par exemple une B-spline), elles seront remplacées par les deux formes ci-dessus.

===Path Type: Simple===
L'algorithme '''Path Type''':{{Value|Simple}} crée un composé de polylignes listées dans la propriété '''Links'''. Il produit exactement le même résultat que la commande [[File:Part_Compound.svg|24px]] [[Part_Compound/fr|Part Composé]].

<div lang="en" dir="ltr" class="mw-content-ltr">
Here any wire like objects (see [[#Notes|Note 1]]) can be used as a base for '''CompoundPath''' shape not guaranteeing the success of producing the right wire to be useful as a base for a [[Cables_Cable|Cable]] or [[Cables_CableConduit|CableConduit]]. To successfully create such a wire (for [[Cables_CableConduit|CableConduit]]) the base shapes have to touch with their end vertices and additionally (to be useful as a base for [[Cables_Cable|Cable]]) they have to be properly ordered, i.e. the first vertex of the first shape must be the beginning of '''CompoundPath''' and the last vertex of the last shape must be the end of '''CompoundPath'''.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
No additional automatic actions are done with {{Value|Simple}} algorithm. If e.g. tangent connections between base shapes are needed, they have to be done manually.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The {{Value|Simple}} algorithm can be used if results produced by {{Value|Complex}} or {{Value|Wire}} algorithms are not satisfactory. Keeping in mind the above rules, the series of connected [[Sketcher_Workbench|sketches]] freely aligned in a 3D space can be used for example as a base shapes for a '''CompoundPath'''.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==Usage==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
# Select at least two existing wire objects (see [[#Notes|Note 1]]) in the [[3D_view|3D view]] or [[Tree_view|Tree view]].
# Create '''CompoundPath''' by one of these methods:
#* Press the {{Button|[[File:Cables_CompoundPath.svg|16px]] [[Cables_CompoundPath|CompoundPath]]}} button.
#* Select the {{MenuCommand|Cable Wires → [[File:Cables_CompoundPath.svg|16px]] CompoundPath}} option from the menu.
#* Right-click in the [[Tree_view|Tree view]] or the [[3D_view|3D view]] and select the {{MenuCommand|Cable Wires → [[File:Cables_CompoundPath.svg|16px]] CompoundPath}} option from the context menu.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==Example==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The example shows how to create three different '''CompoundPath'''s by using base wires marking the beginning, middle and end of path. Gaps between individual wires are filled in automatically. In addition the middle wire is used by all three paths with a different offset. For details see the example document file: [https://github.com/sargo-devel/Cables/blob/master/examples/Harness%20examples/compoundPath_x3.FCStd compoundPath_x3.FCStd].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
[[File:Cables_CompoundPath_Example2.png]]
{{Caption|(1) Set of base wires, (2) 3x CompoundPath with offsets built upon base wires, (3) Cables based on CompoundPaths}}
</div>

<span id="Notes"></span>
==Remarques==

<div lang="en" dir="ltr" class="mw-content-ltr">
* Note 1: The following wire objects can be safely used for selection as base: [[Cables_WireFlex|WireFlex]], [[Draft_Wire|Draft Wire]] or another existing [[Cables_CompoundPath|CompoundPath]]. Other objects containing '''Points''' property (e.g. [[Draft_BSpline|Draft BSpline]], [[Draft_BezCurve|Draft BezCurve]]) can also be used, but results can be different from the expected outcome (especially when '''Path Type''' property has value: {{Value|Complex}}). Using other objects (e.g.[[Sketcher_Workbench|Sketches]]) can be successful when '''Path Type''' property has value: {{Value|Simple}}. However [[Cables_Cable|Cable]] or [[Cables_CableConduit|Cable Conduit]] creation can fail if there are e.g. gaps between such objects.
* Note 2: There can be some unexpected shape results or errors especially when using '''Connection Offset Dist''' property with relatively high values. When troubleshooting such a shape it is recommended to start with '''Connection Offset Dist''' set to 0 and other parameters close to defaults and increase these values with small steps trying to understand what is happening.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==Properties==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
===Data===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{TitleProperty|Base}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* {{PropertyData|Links|LinkList}}: contains list of objects added to '''CompoundPath'''
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{TitleProperty|Compound Path}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* {{PropertyData|Connection Offset Angle|Angle}}: specifies the angle of a connection offset distance.
* {{PropertyData|Connection Offset Dist|Length}}: specifies the distance of the offset point in relation to the calculated connection point of the boundary edges of two consecutive base wires. It is used e.g. to fit different '''CompoundPath'''s based on the same base wire inside a single cable conduit.
* {{PropertyData|Connection Type|Enumeration}}: specifies the type of curves used to connect base wires. Possible values are: {{Value|Arc}} or {{Value|Bez}} . Valid for {{Value|Complex}} '''Path Type''' only.
* {{PropertyData|Degree|Integer}}: specifies the degree of a Bezier function used in '''Connection Type''' property.
* {{PropertyData|Edge With Smallest Bending Radius|String}}: (read-only) shows the name of edge containing smallest radius or preceding smallest radius if radius is 0. It can be used, together with '''Smallest Bending Radius''', for identification of the edge with the smallest bending radius and comparing it with the specification of the cable built on its basis.
* {{PropertyData|Length|Length}}: specifies the length of this '''CompoundPath'''.
* {{PropertyData|Minimum Fillet Radius|Length}}: specifies the minimum fillet radius in the connections between base wires. The final radius can be longer if possible.
* {{PropertyData|Path Type|Enumeration}}: specifies the type of the '''CompoundPath''' shape. Possible values are: {{Value|Complex}}, {{Value|Wire}} or {{Value|Simple}}. They are presented in the [[#Description|Description]].
* {{PropertyData|Points|VectorList}}: specifies the points of the '''CompoundPath''' in its local coordinate system.
* {{PropertyData|Ratio|Float}}: specifies the proportions of segments in the curve created inside the gap between base wires. Usually the value between 1 and 2 gives the best results.
* {{PropertyData|Smallest Bending Radius|Length}}: (read-only) shows the smallest detected radius across all edges.
</div>


{{Docnav/fr
|[[Cables_RemoveVertexAttachment/fr|Supprimer la connexion d'un sommet]]
|[[Cables_Edit/fr|Éditer]]
|[[Cables_Workbench/fr|Cables]]
|IconL=Cables_RemoveVertexAttachment.svg
|IconR=Cables_Edit.svg
|IconC=Cables_workbench_icon.svg
}}

[[Category:External_Command_Reference{{#translation:}}]]
[[Category:Cables{{#translation:}}]]