<languages/>

{{TutorialInfo/fr
|Topic=Tutoriel NativeIFC
|Level=Intermediaire/avancé
|Time=60 minutes
|Author=yorik
|FCVersion=1.0
|Files=
}}

<span id="FreeCAD_and_native_IFC_tutorial"></span>
== Tutoriel FreeCAD et IFC natif ==

[[Image:Nativeifc-tutorial-01.jpg]]

[https://freecad.org FreeCAD], une plateforme de modélisation CAO 3D libre et gratuite (FOSS), offre des outils [https://fr.wikipedia.org/wiki/Building_information_modeling BIM] depuis de nombreuses années avec l'atelier Arch. À partir de la version 1.0, publiée en novembre 2024, les outils Arch ont été étendus et renommés pour devenir l'[[BIM_Workbench/fr|atelier BIM]], et complétés par un nouveau système IFC natif. Ce tutoriel vous guidera à travers les différents concepts utilisés dans le système IFC natif, et comment les appliquer en travaillant sur un modèle d'exemple.

<span id="The_IFC_format"></span>
=== Le format IFC ===

On ne peut commencer à parler de l'IFC native sans parler d'abord du modèle de données [https://fr.wikipedia.org/wiki/Industry_Foundation_Classes Industry Foundation Classes], mieux connues sous le nom d'IFC. L'IFC est un format de fichier, mais aussi et plus fondamentalement un format de données. C'est une norme (c'est une norme ISO enregistrée) qui spécifie comment les différents composants d'un bâtiment doivent être représentés numériquement, quelles propriétés chacun d'entre eux doit avoir, quelles relations ils peuvent ou doivent avoir avec d'autres éléments, etc. En bref, il s'agit d'une recette pour décrire un bâtiment numériquement.

Le format IFC présente de nombreuses caractéristiques intéressantes. Tout d'abord, il est ouvert et public (il est maintenu par un consortium, comme le format HTML). Il dérive du format STEP, un format de géométrie 3D bien connu et solide comme le roc, largement utilisé dans l'industrie mécanique. Il est lisible par l'homme (vous pouvez l'ouvrir avec un éditeur de texte), et les données peuvent être écrites non seulement dans un, mais dans plusieurs formats de fichiers, et même être utilisées comme base de données.

Ces caractéristiques font de ce format un format géométriquement fiable, grâce à son (grand-)père STEP, mais aussi un choix très judicieux pour confier vos données, car dans 50 ans, vous pourrez toujours ouvrir les fichiers IFC et récupérer les données, même si votre application BIM a disparu. Les fichiers IFC deviennent également de plus en plus le format de fichier préféré demandé par les autorités lors de la délivrance des permis de construire.

Jusqu'à présent, cependant, le format IFC a surtout été utilisé comme format « d'exportation ». Les concepteurs continuaient à enregistrer leurs projets en utilisant le format de fichier natif de leur application BIM et exportaient des fichiers IFC lorsque cela était nécessaire. C'est assez bien pour montrer votre travail, mais c'est assez mauvais si d'autres personnes ont besoin de travailler avec ce modèle, car il y a beaucoup de pertes de données et les données sont entièrement réécrites à chaque exportation, de sorte que l'utilisation d'une nouvelle version du modèle est souvent un casse-tête pour d'autres personnes.

Avec l'IFC native, nous voulons changer cela.

<span id="The_native_IFC_concept"></span>
=== Le concept d'IFC natif ===

L'idée vient d'un [https://github.com/brunopostle/ifcmerge/blob/main/docs/whitepaper.rst papier de Bruno Postle] qui décrit comment le format IFC pourrait être utilisé non seulement comme format d'exportation, mais aussi comme fichier principal du projet, au lieu des formats (généralement propriétaires) utilisés par les applications BIM. Pour y parvenir, il est essentiel que les applications BIM traitent le format IFC de manière native, c'est-à-dire qu'au lieu de convertir à chaque fois leur propre contenu de leur format interne en IFC, elles devraient manipuler directement les données IFC.

[[Image:Nativeifc-tutorial-02.jpg]]

{{Caption|image de l'article de Bruno Postle}}

Concrètement, dans FreeCAD, vous pouvez ouvrir ou créer des modèles IFC, les explorer, modifier leur contenu, et chaque changement sera clairement enregistré, localisable, identifiable, annulable. Les modifications effectuées par d'autres personnes pendant que vous travailliez peuvent être fusionnées, même si elles travaillent avec d'autres applications (natives IFC).

[[Image:Nativeifc-tutorial-03.jpg]]

{{Caption|L'image ci-dessus montre une modification compacte et limitée d'un dossier lors de l'ajout d'un nouveau mur}}

Le travail sur l'IFC natif dans FreeCAD n'est pas terminé, mais il est déjà totalement utilisable « pour une tâche réelle ». Si vous connaissez déjà les outils BIM de FreeCAD, il y a très peu à apprendre, car la plupart du flux de travail utilise les mêmes outils.

<span id="Do_I_need_IFC?"></span>
=== Est-ce que j'ai besoin de l'IFC ? ===

La décision vous appartient. L'IFC est un format strict, où chaque élément (un mur, un étage, une fenêtre) a des attributs et des caractéristiques très stricts, qui ne peuvent pas être modifiés. Cette normalisation garantit sa compatibilité et sa fiabilité. Cela signifie également que l'on ne peut pas faire ce que l'on veut avec l'IFC. Vous devez respecter ce que le format définit. Ce respect est bienvenu et excellent lorsque vous travaillez avec d'autres, car c'est exactement ce que nous demandons à un « standard ». Il y a des garanties sur ce que vous trouverez en ouvrant un fichier IFC, mais cela peut aussi évidemment limiter la créativité.

L'un des axiomes de l'atelier BIM de FreeCAD est de ne pas limiter la créativité. Tout est possible, toute forme géométrique est possible, toute relation paramétrique est possible. Lorsque vous travaillez avec l'atelier BIM sans IFC natif, cette liberté est au bout de vos doigts. En activant l'IFC natif, cette liberté est restreinte. Est-ce une bonne ou une mauvaise chose pour votre projet ? Cela dépend.

Personnellement, je recommanderais de travailler sans IFC lorsque vous travaillez seul et que vous développez encore des concepts, afin de bénéficier d'une liberté maximale. Lorsque votre projet s'est stabilisé et que d'autres personnes sont impliquées, c'est peut-être le moment de passer au format IFC natif, afin de bénéficier de la standardisation. N'oubliez pas que vous pouvez passer à l'IFC natif à tout moment, ou même exporter votre projet IFC non natif vers l'IFC à tout moment. Il est rarement nécessaire de passer immédiatement au format IFC natif.

<span id="Opening_and_creating_IFC_models"></span>
== Ouvrir et créer des modèles IFC ==

<span id="Finding_and_viewing_IFC_models"></span>
=== Trouver et visualiser les modèles IFC ===

Si vous n'avez jamais travaillé avec le format IFC, vous pouvez commencer par jeter un coup d'œil à quelques modèles. Comme il s'agit d'un format ouvert, il est heureusement très facile de trouver des exemples sur l'internet. Une simple recherche de « modèles IFC d'exemple » vous mènera loin. Je suggérerais par exemple cet [https://github.com/buildingSMART/Sample-Test-Files/tree/main/PCERT-Sample-Scene/IFC%204.0.2.1%20(IFC%204) exemple canonique de maison] conservé par le consortium IFC, mais plusieurs sites web ont rassemblé des collections de fichiers d'exemple, comme [https://bimplot.com/free-ifc-project-samples-for-architects-and-bim-enthusists/ celui-ci sur BIMPlot].

[[Image:Nativeifc-tutorial-04.jpg]]

Il existe de nombreuses applications pour visualiser les fichiers IFC. Certaines sont gratuites, d'autres sont même libres et gratuites (FOSS). Parmi les visionneurs IFC propriétaires mais gratuits, on peut citer [https://bimvision.eu/ BIMVision] ou [https://openifcviewer.com/ ODA IFC viewer] (qui fonctionne sur Windows/Mac/Linux). Parmi les visionneurs FOSS, j'utilise beaucoup le simple visionneur [http://www.ifcquery.com/ IFC++], inclus dans les dépôts Debian/Ubuntu. [https://freecad.org FreeCAD] et [https://bonsaibim.org Bonsai] sont également de bons visionneurs rapides d'IFC.

La possibilité d'ouvrir et de visualiser vos fichiers IFC dans une autre application est fondamentale lorsque vous travaillez avec des fichiers IFC, car elle vous permet de vérifier que ce que vous envoyez à vos collègues ou à vos clients contient tout ce qu'il faut.

<span id="What_makes_a_good_IFC_model"></span>
=== Qu'est-ce qui fait un bon modèle IFC ===

Le format IFC est complexe et les applications BIM, même les plus coûteuses, sont notoirement mauvaises, voire très mauvaises, pour traiter les fichiers IFC. Les fichiers IFC que vous rencontrez peuvent donc être de très mauvaise qualité et remplis de déchets, parfois au point d'être à peine utilisables. Les défenseurs des applications BIM propriétaires ont souvent utilisé ce fait pour discréditer le format IFC et tenter de démontrer son inefficacité.

Il n'est pourtant pas difficile de créer des modèles IFC de qualité. Mais il faut une application qui traite le format avec sérieux et qui laisse à l'utilisateur le contrôle de ce qui est exporté et de la manière dont il l'est.

Les choses à savoir sont peu nombreuses :

<ul>
<li><p>Comme le format STEP, un fichier IFC est '''un fichier texte''', où chaque ligne représente un élément, et commence par un numéro d'identification. Par exemple :</p>
<pre>#66=IFCWALL('3JmWkr',$,'MyWall',$,$,(#71),$,$,$,.SOLIDWALL.);</pre>
<p>La ligne ci-dessus définit un élément de la classe '''IfcWall''', avec l'ID 66. Les éléments entre parenthèses sont ses attributs. Nous reviendrons plus loin sur les attributs.</p>
<p>L'élément important est la '''classe''' (comme dans 'Industry Foundation Classes'). Chaque élément a une classe, qui définit le type d'élément : un mur, une fenêtre, mais aussi un sol, un espace, ou même une ligne, un cercle, un point dans l'espace 3D ou même des concepts tels qu'un moment dans le temps ou une tâche à accomplir. La plupart des classes IFC utiles pour les éléments de construction sont dérivées de la classe [https://standards.buildingsmart.org/IFC/RELEASE/IFC4_1/FINAL/HTML/schema/ifcproductextension/lexical/ifcbuildingelement.htm IfcBuildingElement].</p></li>
<li><p>Les modèles IFC suivent généralement une ''structure stricte'' : dans chaque fichier, il doit y avoir un et un seul ''IfcProject''. L'[https://ifc43-docs.standards.buildingsmart.org/IFC/RELEASE/IFC4x3/HTML/lexical/IfcProject.htm IfcProject] est la racine de tous les objets d'un modèle IFC. Sous le projet IfcProject, il y a généralement au moins un '''IfcSite''', qui peut contenir un ou plusieurs '''IfcBuildings''', qui sont à leur tour divisés en '''IfcBuildingStoreys'''. Ces derniers peuvent être divisés en '''IfcZones''' et '''IfcSpaces'''.</p></li>
<li><p>Les éléments de construction, tels que les '''IfcWalls''' ou les '''IfcWindows''', sont alors '''liés''' à l'une des structures ci-dessus, généralement un IfcBuildingStorey, mais ils peuvent également être liés à un autre élément de construction, de sorte qu'un élément peut être composé de plusieurs autres. Ces relations sont toujours explicitement mentionnées dans les fichiers IFC, elles ne sont jamais automatiques ou implicites.</p></li>
<li><p>Les éléments IFC, qu'il s'agisse d'éléments de construction tels que les murs ou les fenêtres, ou d'éléments de structure tels que les sites et les étages, ou de l'une des nombreuses autres [https://ifc43-docs.standards.buildingsmart.org/IFC/RELEASE/IFC4x3/HTML/annex-b1.html classes d'éléments] proposées par le format IFC, disposent tous d'un ensemble prédéfini d'« attributs ». Les attributs sont des éléments tels que le nom, la position dans l'espace ou le numéro d'identification unique, qui sont définis dans le format. Toutes les entités de la même classe doivent avoir les mêmes attributs. Les éléments peuvent également avoir des '''propriétés'''. Contrairement aux attributs, les propriétés ne sont pas définies par le format IFC et peuvent être définies librement par l'utilisateur (ou l'application BIM). Il s'agit en quelque sorte d'attributs personnalisés. Le format IFC propose également des ensembles de propriétés par défaut pour de nombreuses classes d'éléments. Par exemple, pour les poutres, il existe un ensemble appelé [https://ifc43-docs.standards.buildingsmart.org/IFC/RELEASE/IFC4x3/HTML/lexical/Pset_BeamCommon.htm BimCommon] qui contient une série de propriétés typiques pour les poutres.</p></li>
<li><p>La '''géométrie''' des éléments IFC est définie dans des éléments séparés, qui sont attachés à chaque mur, fenêtre, porte, etc. Elle peut également être partagée par plusieurs éléments. Il existe de très nombreuses façons de définir la géométrie, et c'est là que les problèmes commencent. Les éléments de construction peuvent avoir une géométrie 3D et une géométrie 2D (par exemple une vue en plan ou une empreinte), ainsi qu'une géométrie linéaire (utile pour les études de stabilité). Une bonne géométrie est généralement bien définie et construite de manière judicieuse. Par exemple, la géométrie d'un mur simple est définie par un rectangle au sol, avec une largeur et une longueur, qui est ensuite extrudé verticalement d'une hauteur donnée pour produire la forme du mur. Cela représente trois lignes dans le fichier IFC : le rectangle, l'extrusion et la position de l'objet final. Il est reconnaissable par d'autres applications BIM et les paramètres peuvent être modifiés, par exemple la largeur du rectangle de base.</p></li>
<li><p>Dans certains fichiers IFC que vous pouvez recevoir, cette information logique peut être complètement perdue, et la géométrie du mur définie comme un ensemble de facettes triangulaires. C'est souvent le cas des fichiers qui ont été convertis en IFC à partir d'un autre format. Il peut y avoir d'autres problèmes tels que des relations incomplètes, etc. Il suffit de dire que le format IFC permet de définir la géométrie de multiples façons, des plus « stupides » (facettes triangulaires) aux plus « intelligentes » (objets basés sur NURBS), en mettant l'accent sur les solides bien définis (tels que notre rectangle extrudé). Heureusement pour nous, c'est la spécialité de FreeCAD.</p></li></ul>

<span id="Opening,_creating_and_converting_IFC_models"></span>
=== Ouvrir, créer et convertir des modèles IFC ===

Dans FreeCAD, l'ouverture d'un fichier IFC se fait comme n'importe quel autre fichier, via le menu '''Fichier → Ouvrir'''. Par défaut, les fichiers IFC se chargent avec un seul élément apparaissant dans l'arborescence. C'est la façon la plus rapide d'importer, et vous pouvez généralement importer un modèle de 100 Mo en quelques secondes.

[[Image:Nativeifc-tutorial-05.jpg]]

Vous pouvez modifier les préférences d'importation IFC natif sous '''Edition → Préférences → BIM → IFC natifs'''. Vous pouvez par exemple faire en sorte que toute la structure du bâtiment soit révélée lors de l'importation, ou qu'elle soit demandée à chaque fois.

La création d'un nouveau modèle IFC commence simplement par la création d'un nouveau projet IFC dans le menu '''3D/BIM'''.

La conversion d'un modèle FreeCAD non IFC en nativeIFC peut se faire simplement en l'exportant en IFC, en utilisant le menu '''Fichier → Exporter''' ou en utilisant le bouton de verrouillage (plus d'informations à ce sujet ci-dessous).


<span id="Exploring_the_model"></span>
== Explorer le modèle ==

<span id="Expanding_model_contents"></span>
=== Développer le contenu du modèle ===

Par défaut, l'ouverture des fichiers IFC n'affiche que le premier élément extérieur du fichier. Il s'agit généralement de l'IfcSite. Pour voir le contenu de cet élément, et des suivants, vous devez le '''développer'''. Le développement se fait en '''double-cliquant sur l'élément dans l'arborescence''' ou bien via l'option de menu '''Utilitaires → Développer l'IFC'''. Cette commande peut être [[Interface_Personnalisation/fr|personnalisée]] et se voir attribuer un raccourci clavier, de sorte qu'il est possible de naviguer dans l'arborescence à l'aide des touches fléchées et de développer votre modèle là où c'est nécessaire, entièrement à l'aide du clavier.

[[Image:Nativeifc-tutorial-06.jpg]]

Un double-clic sur un élément de l'arborescence permet, la première fois, de faire apparaître ses enfants et, la seconde fois, ou s'il n'y a plus d'enfants à faire apparaître, de '''charger toutes ses propriétés, son matériau et sa forme'''.

Cela permet de charger un modèle aussi rapidement que possible et de développer/définir les éléments en fonction des besoins. Vous pouvez modifier ce comportement sous '''Édition → Préférences → BIM → IFC natifs'''.

<span id="Locking_and_unlocking"></span>
=== Verrouiller et déverrouiller ===

<div class="mw-translate-fuzzy">
Lorsqu'un modèle IFC est chargé dans FreeCAD, il peut être verrouillé ou déverrouillé. Par défaut, l'ouverture des fichiers IFC les verrouille, tandis que leur insertion (en utilisant '''Fichier → Importer''') les laisse déverrouillés.
</div>

Le verrouillage ou le déverrouillage s'effectue simplement à l'aide du bouton de verrouillage dans la barre d'état de FreeCAD :

[[Image:Nativeifc-tutorial-07.jpg]]

* Le '''mode verrouillé''' signifie que le document FreeCAD EST le fichier IFC. Vous ne voyez pas l'IfcProject (c'est le document FreeCAD lui-même dans l'arborescence), et tout ce que vous faites dans ce document est automatiquement, de manière transparente et immédiate, fait dans les données IFC elles-mêmes. L'ajout d'un mur modifiera le fichier IFC, de même que l'ajout d'une ligne ou d'une dimension, tout est fait dans l'IFC. Il ne peut y avoir aucun élément FreeCAD dans le document qui ne fasse pas partie du fichier IFC. Vous pouvez convertir n'importe quel modèle FreeCAD (BIM ou non) en IFC en cliquant sur le bouton de verrouillage.
* Le '''mode déverrouillé''', également appelé mode hybride, signifie que le projet IFC réside à l'intérieur d'un objet ''projet''. Vous pouvez toujours avoir des objets FreeCAD normaux, non IFC, en plus des éléments IFC. Pour ajouter un élément au projet IFC, vous devez l'ajouter vous-même en le faisant glisser sur le projet ou sur l'un des sous-éléments du projet. Vous pouvez créer un nouveau projet IFC vierge en utilisant le menu '''3D/BIM → Projet'''.
* '''Travailler sans projet IFC''' : rappelez-vous qu'il n'est pas nécessaire de créer un projet IFC pour démarrer un projet BIM (vous pouvez le faire plus tard si nécessaire). Vous pouvez simplement commencer à construire des murs, à ajouter des sols et des toits, sans définir de structure IFC ni même vous préoccuper de l'IFC.

Le mode verrouillé est un mode prudent : lorsque vous ouvrez un fichier créé par quelqu'un d'autre, vous ne voulez rien casser, vous voulez explorer le fichier, et peut-être corriger quelque chose ou faire quelques changements localisés. Vous voulez vous assurer que les modifications que vous avez apportées sont strictement localisées et traçables.

Dans tous les autres cas, il n'est pas vraiment nécessaire ou avantageux de verrouiller votre modèle. En fait, vous pouvez modifier le comportement par défaut pour ouvrir les modèles IFC en tant que modèles non verrouillés si vous le souhaitez, sous '''Édition → Préférences → BIM → IFC natifs'''.

Lorsque vous passez à un modèle IFC, vous souhaitez souvent vérifier '''ce que vous avez changé dans les données IFC''' depuis la dernière sauvegarde. Cela se fait en utilisant '''Utilitaires → Comparer deux documents IFC''' (ou en faisant un clic droit sur le projet dans l'arborescence et en sélectionnant '''IFC → Diff'''). Les modifications sont présentées dans le format [https://fr.wikipedia.org/wiki/Diff format diff], avec les sections surlignées en rouge et en vert. Ce format est également compréhensible par des systèmes informatiques tels que Git, qui sont capables de suivre de grands ensembles de modifications, et font donc de vos fichiers IFC reconnaissables dans ces systèmes.

[[Image:Nativeifc-tutorial-08.jpg]]

<span id="Model_structure"></span>
=== Structure du modèle ===

Comme nous l'avons vu plus haut, la plupart des fichiers IFC utilisent une structure standard '''Site → Bâtiment → Étage'''. Cette structure est si courante qu'elle est souvent considérée comme obligatoire, bien qu'elle ne soit pas expressément mentionnée dans la norme IFC. Vous pourriez très bien avoir tous vos éléments directement liés au IfcProject. Cependant, comme la standardisation fonctionne lorsque tout le monde décide d'utiliser le même système, il est conseillé d'avoir au moins un site, un bâtiment et un étage (appelé ''Niveau'' dans FreeCAD) dans votre modèle.

[[Image:Nativeifc-tutorial-09.jpg]]

Dans FreeCAD, il est possible d'utiliser des '''groupes''' pour organiser vos objets sous un étage. Par exemple, à l'intérieur de votre premier étage, vous pouvez créer un groupe « Murs » pour ajouter tous vos murs, un groupe « Charpente » pour ajouter vos poutres en bois, etc. Les groupes sont pris en charge par l'IFC, mais il n'est pas standard de placer des groupes à l'intérieur d'un élément de structure de bâtiment tel qu'un étage. Pour cette raison, les groupes sont écrits par défaut comme '''IfcBuildingElementAssemblies''' au lieu de IfcGroups. Chez FreeCAD, nous pensons qu'un tel comportement est utile et devrait être autorisé. Il existe donc une option de préférence pour l'autoriser. La plupart des applications BIM ouvriront volontiers des fichiers avec des groupes à l'intérieur d'autres éléments. Cette option de préférence est là pour aider à diffuser notre vision et éventuellement convaincre les gens.

Commençons à casser notre modèle...

<span id="Adding_and_modifying_elements"></span>
== Ajouter et modifier des éléments ==

<span id="Modifying_attributes_and_properties"></span>
=== Modifier des attributs et des propriétés ===

Une fois que nous avons ouvert un modèle, nous pouvons commencer à modifier son contenu. Attention, à l'heure où j'écris ce tutoriel, il n'y a pas '''d'éditeur graphique de géométrie''' pour les éléments IFC (c'est sur la feuille de route et cela devrait arriver bientôt). La façon de modifier la géométrie des éléments est de modifier leurs '''propriétés géométriques'''.

Lorsque les éléments IFC sont chargés à partir du fichier, leurs attributs apparaissent dans l'[[Property_editor/fr|éditeur de propriétés]] sous le groupe '''IFC'''. Vous pouvez y modifier des éléments tels que le nom, la description ou même la classe des éléments.

Lorsque vous double-cliquez sur un élément dans l'arborescence, vous faites apparaître d'abord les éléments enfants de cet élément. En double-cliquant une deuxième fois, vous chargez des données supplémentaires telles que des '''jeux de propriétés''', des '''propriétés personnalisées''', des '''matériaux''' et des '''données de forme'''. Il créera en outre un jeu de '''propriétés géométriques''' qui vous permettra de modifier la géométrie de cet élément. Ces propriétés géométriques constituent également les fondements du futur éditeur graphique.

[[Image:Nativeifc-tutorial-10.jpg]]

Toutes ces propriétés supplémentaires peuvent être modifiées directement et de nouvelles propriétés personnalisables peuvent être ajoutées à l'aide des deux boutons situés sous l'éditeur de propriétés.

<span id="Modifying_geometry"></span>
=== Modifier une géométrie ===

Vous pouvez modifier la position de n'importe quel élément en changeant sa propriété '''Placement''' (ou en utilisant les outils [[Draft_Move/fr|Déplacer]] ou [[Draft_Rotate/fr|Pivoter]]).

Pour modifier la géométrie, par exemple la largeur d'un mur, vous devez d'abord double-cliquer deux fois pour faire apparaître ses '''propriétés géométriques'''. Si ce mur a été construit de manière standard, sous la forme d'un rectangle extrudé, vous verrez la largeur et la longueur du rectangle, ainsi que la hauteur d'extrusion, parmi ces propriétés.

Bien entendu, tout dépend de la manière dont le mur a été défini dans le fichier IFC. Il se peut qu'il ne s'agisse pas d'un rectangle extrudé. Dans ce cas, moins de propriétés géométriques ou d'autres propriétés géométriques peuvent être disponibles.

<span id="Adding_new_BIM_objects"></span>
=== Ajouter de nouveaux objets BIM ===

La façon dont vous ajoutez de nouveaux objets dépend du mode en cours : verrouillé ou déverrouillé. En mode verrouillé, tout ce que vous dessinez, comme un mur ou une colonne, est automatiquement créé dans le fichier IFC lui-même. Il se peut que vous deviez le placer sous le bon niveau ou le bon bâtiment après sa création, ce qui se fait simplement en faisant glisser le nouveau mur sous le bon niveau dans l'arborescence.

En mode déverrouillé, votre nouveau mur ne sera pas encore un élément IFC. Vous devez toujours faire glisser le mur vous-même au bon endroit après sa création.

=== Types ===

En IFC, tout élément peut être défini par un [https://standards.buildingsmart.org/IFC/RELEASE/IFC4_1/FINAL/HTML/schema/ifckernel/lexical/ifctypeproduct.htm type]. Un type (ex. IfcWallType, IfcWindowType) est un élément IFC qui peut contenir des caractéristiques, des propriétés ou même une géométrie communes, qui seront automatiquement utilisées par tous les objets de ce type. Dans certaines applications BIM, on parle parfois de familles.

<div lang="en" dir="ltr" class="mw-content-ltr">
In FreeCAD, in non-IFC BIM projects, we used to do this using cloning. In native IFC, there is full support for types. To define a type, the easiest way is to build an object of a desired class, for example a wall, then right-click it in the tree view and choose '''IFC → convert to type'''.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
When an object is converted to a type, it is moved to a special ''Types'' group under the project. It can then be referenced by any other wall in the project.
</div>

[[Image:Nativeifc-tutorial-11.jpg]]

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Caption|The above image shows our wall that is now using the 'My Wall Type' as its type}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Adding downloadable contents ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In a BIM project, one often needs to add downloadable contents, such as pieces of furniture, appliances or elements such as prefabricated window frames. These elements are typically downloaded from manufacturers websites, or BIM library websites.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In all those cases, the quality and format of the elements you download, are of importance. You should care (in that order) about using a file format well supported by FreeCAD, getting models with good geometric quality, and enough metadata (color, materials, manufacturer info, etc…). Some good ideas are:
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* STEP files from [https://grabcad.com/library?page=1&time=this_month&sort=popular&softwares=step-slash-iges GrabCAD]: STEP files are very well supported by FreeCAD and usually always contain high-quality geometry, as it is a favorite engineering format. They usually convert very well to IFC too.
* IFC files from model libraries like [https://bimobject.com BIMObject]: While using the IFC format might sound interesting, the IFC files made available by these website are often converted automatically from other (proprietary) formats, and the quality can be very low.
* Exporting models from BIM proprietary applications such as Revit or ArchiCAD to the SAT format, and open these in FreeCAD using the [https://github.com/jmplonka/InventorLoader Inventor Loader] addon (installable from the [[Std_AddonMgr|Addon manager]]). While these applications will allow to export parts and elements to IFC, they will often degrade the geometry. Exporting types and families to SAT often gives a similar quality as STEP files. The Inventor Loader, though, is a work in progress and might not work with each and every file.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Saving and handling files ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
A FreeCAD file containing a native IFC project, be it locked or unlocked, will always have an attached IFC file, where the IFC data is stored. When you create a new project, and you did not save the file yet, the IFC contents lives in the memory. As soon as you save the file, a companion IFC file is created and from now on attached to the FreeCAD file.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In '''locked mode''', the FreeCAD document contains in its ''IFC File Path'' property the path to the companion IFC file. Since everything that happens in FreeCAD happens directly in the IFC file, there is no more need of the FreeCAD file anymore. The 'Save' and 'Save as' entries in the FreeCAD file menu are replaced with 'Save IFC' and 'Save IFC as'. When you save the file, you will be saving the IFC file, and no FreeCAD file is written. Literally, you only work with the IFC file.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In '''unlocked mode''', a ''project'' object exists in the FreeCAD document, that also has a ''IFC file Path'' property that points to its companion IFC file. If you distribute your file to someone else, you will need to give them the IFC file too. If you move the IFC file, you will need to fix the ''IFC File Path'' property of the project object.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
It is possible to distribute the FreeCAD file without the IFC file, though: Set the ''Shape Mode'' property of all objects to 'Shape'. This will make the FreeCAD file retain the shape of all objects, and open correctly even if the IFC file is not present. The objects, however, will not be editable in that case.
</div>


<div lang="en" dir="ltr" class="mw-content-ltr">
== Creating output ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Creating views and 2D content ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
2D views, to be put on [[TechDraw_Workbench|TechDraw sheets]], can still be created the [[BIM_Workbench|same way as before]]: Adding [[Arch_SectionPlane|section planes]], creating [[BIM_Shape2DView|2D views]], filling them with annotations, then [[BIM_TDView|placing them]] on [[BIM_TDPage|sheets]]. The process is exactly the same with non-IFC BIM models as with native IFC models.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
By default, though, native IFC objects are loaded without their shape (their ''Shape Mode'' property is set to 'Coin'). This saves a lot of time when loading. But the cutting algorithms used to generate 2D views need the full shape, so when including native IFC objects in a section plane, their Shape Mode will automatically be set to 'Shape'.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
While the final sheet itself cannot currently be saved to the IFC file, the 2D views, section planes and their annotations can. When adding (by drag and dropping in unlocked mode, or automatically in locked mode) a section plane to a project, a group will automatically be created under the project. That group represents a 2D view (its ''Object Type'' property is set to 'DRAWING'), and everything you add to that group will be part of that 2D view.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
<div class="figure">
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
[[Image:Nativeifc-tutorial-12.jpg|Screenshot of a 2D view created from an IFC project]]
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
</div>
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Creating sheets ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
At the moment, sheets are not saved in the IFC file. So in case of locked files, the sheets will need to be recreated.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Creating schedules ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Schedules and all kinds of queries can be created the same way for native IFC as for non-IFC projects, using the [[Arch_Schedule|Schedule tool]]. Schedules can also be added to a native IFC project. In that case, their companion spreadsheet is not saved in the IFC file and must be re-created when opening the file.
</div>


<div lang="en" dir="ltr" class="mw-content-ltr">
== Python scripting ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== IfcOpenShell ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
[https://ifcopenshell.org/ IfcOpenShell] is the software component used in all IFC-related operations in FreeCAD. The BIM workbench can function without it, but in that case all IFC operations are disabled. IfcOpenShell is responsible for creating and modifying IFC files and IFC objects, as well as producing BREP geometry for the FreeCAD objects that represent IFC elements. FreeCAD currently uses IfcOpenShell only via its Python interface.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
IfcOpenShell offers a [https://docs.ifcopenshell.org/ broad documentation] that explains in detail how to use it.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
you can also use both IfcOpenShell and ifc_tools to manipulate IFC data directly. Below is a short example of how to use IfcOpenShell to open an IFC file and analyze its contents:
</div>

{{Code|code=
import ifcopenshell
my_ifc_file = ifcopenshell.open("/path/to/some/file.ifc")
walls = my_ifc_file.by_type("IfcWall") # get a list of all IfcWalls
some_specific_object = my_ifc_file[66] # get an object by its ID
some_specific_object = my_ifc_file.by_id(66) # alternative way
print(some_specific_object.Name) # you can access attributes that way
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
IfcOpenShell itself has no specific FreeCAD functionality (yet), so you would use it basically to do non-FreeCAD operations on objects, for example retrieve or modify objects and attributes, modify attributes, or even directly add objects. Be sure to have a look at the [https://docs.ifcopenshell.org/ifcopenshell-python.html IfcOpenShell Python documentation] to know more.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In FreeCAD, once you load an IFC file, an IfcOpenShell file object is created and attached to the project (the project object for unlocked files or the FreeCAD document itself for locked projects). Everything you do in FreeCAD actually manipulates that object. You can easily get access and manipulate the IfcOpenShell file object of a FreeCAD native IFC project. For example, in locked mode, you do:
</div>

{{Code|code=
import FreeCAD
my_doc = FreeCAD.loadFile("/path/to/some/file.ifc")
my_ifc_file = my_doc.Proxy.ifcfile
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
In unlocked mode, each project object also has a {{Incode|Proxy.ifcfile}} member.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== The ifc_tools module ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The [https://github.com/FreeCAD/FreeCAD/blob/main/src/Mod/BIM/nativeifc/ifc_tools.py ifc_tools] module is the main tool to use IfcOpenShell in FreeCAD's BIM module. It contains many tools and functions to do everything FreeCAD needs to do with IFC files and objects, such as creating new files, opening files, creating elements, modifying attributes, etc.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
When working with FreeCAD objects, using ifc_tools is much more convenient as it handles for you all the relationship between the FreeCAD object and the IFC object it represents. For example:
</div>

{{Code|code=
from nativeifc import ifc_tools
selection = FreeCADGui.Selection.getSelection()
my_obj = selection[0] # just get the first selected object
project = ifc_tools.get_project(my_obj)
ifcfile = ifc_tools.get_ifcfile(project)
ifc_elem = ifc_tools.get_ifc_element(my_obj)
my_obj.LongName = "Changed long name" # this updates the IFC data too
print(ifc_elem.LongName) 
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
There is much more in ifc_tools, such as utilities to create and modify FreeCAD objects (and their underlying IFC elements). Below are a few simple examples to get you started:
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Load the shape of selected objects ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
By default, opening an IFC file will only load a lightweight 3D representation of each element. To do more serious work with them, we might need to load their full shape:
</div>

{{Code|code=
for obj in FreeCADGui.Selection.getSelection():
    obj.ShapeMode = "Shape"
FreeCAD.ActiveDocument.recompute()
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Load the property sets of selected objects ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Property sets and their included properties are rendered as object properties in FreeCAD. Once they are loaded, you can simply manipulate the values through the properties editor in FreeCAD (or via Python):
</div>

{{Code|code=
from nativeifc import ifc_psets
for obj in FreeCADGui.Selection.getSelection():
    ifc_psets.show_psets(obj)
my_object.FireResistanceClass = "1B" # manipulate properties once loaded
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Saving an IFC file ====
</div>

{{Code|code=
ifc_tools.save(project)
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Add a new IFC document ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Use the '''Project''' tool from the [[BIM_Workbench|BIM workbench]] to produce a native IFC project object. It is not mandatory to save your new IFC project immediately, but it is a good practice anyway. If you forget to do so, you will get notified and be able to do it when saving the FreeCAD document.
</div>

{{Code|code=
doc = FreeCAD.ActiveDocument
new_project = ifc_tools.create_document(doc)
ifc_tools.save(new_project, "/path/for/our/new/file.ifc")
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Modifying the IFC class of an object ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Changing the class is very easy, one can simply select another one in the object's '''class''' property. Be warned, this might also change the predefined attributes of that object, so some attributes might vanish.
</div>

{{Code|code=
my_object.Class = "IfcWall"
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Aggregate (and convert) any FreeCAD object to an IFC project ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Suppose we built a new wall, and we need to add it to an IFC project. We can do that graphically by dragging it and dropping it onto the project in the tree view, but it is as easy in Python:
</div>

{{Code|code=
import Arch
my_new_wall = Arch.makeWall(None, 200, 20, 300)
ifc_tools.aggregate(my_new_wall, project)
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Add a new model structure ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
When creating a new project, you can also have a basic structure automatically created for you by answering 'yes' on the dialog that will pop up. But you can also easily do that in Python:
</div>

{{Code|code=
import Arch
doc = FreeCAD.ActiveDocument
project = ifc_tools.create_document(doc)
site = Arch.makeSite()
site = ifc_tools.aggregate(site, project)
building = Arch.makeBuilding()
building = ifc_tools.aggregate(building, site)
level = Arch.makeFloor()
level = ifc_tools.aggregate(floor, building)
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Change the schema of an IFC document ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Simply change the 'Schema' property of the project. Be warned, this can have deep consequences (some object types might have changed in the new schema version), so use with care and check your data afterwards.
</div>

{{Code|code=
project.Schema = "IFC4"
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
There is much more to explore, as more functionality is available through the different [https://github.com/FreeCAD/FreeCAD/tree/main/src/Mod/BIM/nativeifc native IFC submodules], each one provides tools to deal with a certain aspect of IFC (property sets, geometry, layers…). Be sure to explore them if needed!
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
I hope you now have a good idea of where to start and what can be done with native IFC in FreeCAD. Be sure to head to the [https://forum.freecad.org/viewforum.php?f=23 BIM section on the FreeCAD forum] if you need some help!
</div>