<languages/>

{{TutorialInfo/fr
|Topic=Tutoriel NativeIFC
|Level=Intermediaire/avancé
|Time=60 minutes
|Author=yorik
|FCVersion=1.0
|Files=
}}

<span id="FreeCAD_and_native_IFC_tutorial"></span>
== Tutoriel FreeCAD et IFC natif ==

[[Image:Nativeifc-tutorial-01.jpg]]

[https://freecad.org FreeCAD], une plateforme de modélisation CAO 3D libre et gratuite (FOSS), offre des outils [https://fr.wikipedia.org/wiki/Building_information_modeling BIM] depuis de nombreuses années avec l'atelier Arch. À partir de la version 1.0, publiée en novembre 2024, les outils Arch ont été étendus et renommés pour devenir l'[[BIM_Workbench/fr|atelier BIM]], et complétés par un nouveau système IFC natif. Ce tutoriel vous guidera à travers les différents concepts utilisés dans le système IFC natif, et comment les appliquer en travaillant sur un modèle d'exemple.

<span id="The_IFC_format"></span>
=== Le format IFC ===

On ne peut commencer à parler de l'IFC native sans parler d'abord du modèle de données [https://fr.wikipedia.org/wiki/Industry_Foundation_Classes Industry Foundation Classes], mieux connues sous le nom d'IFC. L'IFC est un format de fichier, mais aussi et plus fondamentalement un format de données. C'est une norme (c'est une norme ISO enregistrée) qui spécifie comment les différents composants d'un bâtiment doivent être représentés numériquement, quelles propriétés chacun d'entre eux doit avoir, quelles relations ils peuvent ou doivent avoir avec d'autres éléments, etc. En bref, il s'agit d'une recette pour décrire un bâtiment numériquement.

Le format IFC présente de nombreuses caractéristiques intéressantes. Tout d'abord, il est ouvert et public (il est maintenu par un consortium, comme le format HTML). Il dérive du format STEP, un format de géométrie 3D bien connu et solide comme le roc, largement utilisé dans l'industrie mécanique. Il est lisible par l'homme (vous pouvez l'ouvrir avec un éditeur de texte), et les données peuvent être écrites non seulement dans un, mais dans plusieurs formats de fichiers, et même être utilisées comme base de données.

Ces caractéristiques font de ce format un format géométriquement fiable, grâce à son (grand-)père STEP, mais aussi un choix très judicieux pour confier vos données, car dans 50 ans, vous pourrez toujours ouvrir les fichiers IFC et récupérer les données, même si votre application BIM a disparu. Les fichiers IFC deviennent également de plus en plus le format de fichier préféré demandé par les autorités lors de la délivrance des permis de construire.

Jusqu'à présent, cependant, le format IFC a surtout été utilisé comme format « d'exportation ». Les concepteurs continuaient à enregistrer leurs projets en utilisant le format de fichier natif de leur application BIM et exportaient des fichiers IFC lorsque cela était nécessaire. C'est assez bien pour montrer votre travail, mais c'est assez mauvais si d'autres personnes ont besoin de travailler avec ce modèle, car il y a beaucoup de pertes de données et les données sont entièrement réécrites à chaque exportation, de sorte que l'utilisation d'une nouvelle version du modèle est souvent un casse-tête pour d'autres personnes.

Avec l'IFC native, nous voulons changer cela.

<span id="The_native_IFC_concept"></span>
=== Le concept d'IFC natif ===

L'idée vient d'un [https://github.com/brunopostle/ifcmerge/blob/main/docs/whitepaper.rst papier de Bruno Postle] qui décrit comment le format IFC pourrait être utilisé non seulement comme format d'exportation, mais aussi comme fichier principal du projet, au lieu des formats (généralement propriétaires) utilisés par les applications BIM. Pour y parvenir, il est essentiel que les applications BIM traitent le format IFC de manière native, c'est-à-dire qu'au lieu de convertir à chaque fois leur propre contenu de leur format interne en IFC, elles devraient manipuler directement les données IFC.

[[Image:Nativeifc-tutorial-02.jpg]]

{{Caption|image de l'article de Bruno Postle}}

Concrètement, dans FreeCAD, vous pouvez ouvrir ou créer des modèles IFC, les explorer, modifier leur contenu, et chaque changement sera clairement enregistré, localisable, identifiable, annulable. Les modifications effectuées par d'autres personnes pendant que vous travailliez peuvent être fusionnées, même si elles travaillent avec d'autres applications (natives IFC).

[[Image:Nativeifc-tutorial-03.jpg]]

{{Caption|L'image ci-dessus montre une modification compacte et limitée d'un dossier lors de l'ajout d'un nouveau mur}}

Le travail sur l'IFC natif dans FreeCAD n'est pas terminé, mais il est déjà totalement utilisable « pour une tâche réelle ». Si vous connaissez déjà les outils BIM de FreeCAD, il y a très peu à apprendre, car la plupart du flux de travail utilise les mêmes outils.

<span id="Do_I_need_IFC?"></span>
=== Est-ce que j'ai besoin de l'IFC ? ===

La décision vous appartient. L'IFC est un format strict, où chaque élément (un mur, un étage, une fenêtre) a des attributs et des caractéristiques très stricts, qui ne peuvent pas être modifiés. Cette normalisation garantit sa compatibilité et sa fiabilité. Cela signifie également que l'on ne peut pas faire ce que l'on veut avec l'IFC. Vous devez respecter ce que le format définit. Ce respect est bienvenu et excellent lorsque vous travaillez avec d'autres, car c'est exactement ce que nous demandons à un « standard ». Il y a des garanties sur ce que vous trouverez en ouvrant un fichier IFC, mais cela peut aussi évidemment limiter la créativité.

L'un des axiomes de l'atelier BIM de FreeCAD est de ne pas limiter la créativité. Tout est possible, toute forme géométrique est possible, toute relation paramétrique est possible. Lorsque vous travaillez avec l'atelier BIM sans IFC natif, cette liberté est au bout de vos doigts. En activant l'IFC natif, cette liberté est restreinte. Est-ce une bonne ou une mauvaise chose pour votre projet ? Cela dépend.

Personnellement, je recommanderais de travailler sans IFC lorsque vous travaillez seul et que vous développez encore des concepts, afin de bénéficier d'une liberté maximale. Lorsque votre projet s'est stabilisé et que d'autres personnes sont impliquées, c'est peut-être le moment de passer au format IFC natif, afin de bénéficier de la standardisation. N'oubliez pas que vous pouvez passer à l'IFC natif à tout moment, ou même exporter votre projet IFC non natif vers l'IFC à tout moment. Il est rarement nécessaire de passer immédiatement au format IFC natif.

<span id="Opening_and_creating_IFC_models"></span>
== Ouvrir et créer des modèles IFC ==

<span id="Finding_and_viewing_IFC_models"></span>
=== Trouver et visualiser les modèles IFC ===

Si vous n'avez jamais travaillé avec le format IFC, vous pouvez commencer par jeter un coup d'œil à quelques modèles. Comme il s'agit d'un format ouvert, il est heureusement très facile de trouver des exemples sur l'internet. Une simple recherche de « modèles IFC d'exemple » vous mènera loin. Je suggérerais par exemple cet [https://github.com/buildingSMART/Sample-Test-Files/tree/main/PCERT-Sample-Scene/IFC%204.0.2.1%20(IFC%204) exemple canonique de maison] conservé par le consortium IFC, mais plusieurs sites web ont rassemblé des collections de fichiers d'exemple, comme [https://bimplot.com/free-ifc-project-samples-for-architects-and-bim-enthusists/ celui-ci sur BIMPlot].

[[Image:Nativeifc-tutorial-04.jpg]]

Il existe de nombreuses applications pour visualiser les fichiers IFC. Certaines sont gratuites, d'autres sont même libres et gratuites (FOSS). Parmi les visionneurs IFC propriétaires mais gratuits, on peut citer [https://bimvision.eu/ BIMVision] ou [https://openifcviewer.com/ ODA IFC viewer] (qui fonctionne sur Windows/Mac/Linux). Parmi les visionneurs FOSS, j'utilise beaucoup le simple visionneur [http://www.ifcquery.com/ IFC++], inclus dans les dépôts Debian/Ubuntu. [https://freecad.org FreeCAD] et [https://bonsaibim.org Bonsai] sont également de bons visionneurs rapides d'IFC.

La possibilité d'ouvrir et de visualiser vos fichiers IFC dans une autre application est fondamentale lorsque vous travaillez avec des fichiers IFC, car elle vous permet de vérifier que ce que vous envoyez à vos collègues ou à vos clients contient tout ce qu'il faut.

<span id="What_makes_a_good_IFC_model"></span>
=== Qu'est-ce qui fait un bon modèle IFC ===

Le format IFC est complexe et les applications BIM, même les plus coûteuses, sont notoirement mauvaises, voire très mauvaises, pour traiter les fichiers IFC. Les fichiers IFC que vous rencontrez peuvent donc être de très mauvaise qualité et remplis de déchets, parfois au point d'être à peine utilisables. Les défenseurs des applications BIM propriétaires ont souvent utilisé ce fait pour discréditer le format IFC et tenter de démontrer son inefficacité.

Il n'est pourtant pas difficile de créer des modèles IFC de qualité. Mais il faut une application qui traite le format avec sérieux et qui laisse à l'utilisateur le contrôle de ce qui est exporté et de la manière dont il l'est.

Les choses à savoir sont peu nombreuses :

<ul>
<li><p>Comme le format STEP, un fichier IFC est '''un fichier texte''', où chaque ligne représente un élément, et commence par un numéro d'identification. Par exemple :</p>
<pre>#66=IFCWALL('3JmWkr',$,'MyWall',$,$,(#71),$,$,$,.SOLIDWALL.);</pre>
<p>La ligne ci-dessus définit un élément de la classe '''IfcWall''', avec l'ID 66. Les éléments entre parenthèses sont ses attributs. Nous reviendrons plus loin sur les attributs.</p>
<p>L'élément important est la '''classe''' (comme dans 'Industry Foundation Classes'). Chaque élément a une classe, qui définit le type d'élément : un mur, une fenêtre, mais aussi un sol, un espace, ou même une ligne, un cercle, un point dans l'espace 3D ou même des concepts tels qu'un moment dans le temps ou une tâche à accomplir. La plupart des classes IFC utiles pour les éléments de construction sont dérivées de la classe [https://standards.buildingsmart.org/IFC/RELEASE/IFC4_1/FINAL/HTML/schema/ifcproductextension/lexical/ifcbuildingelement.htm IfcBuildingElement].</p></li>
<li><p>Les modèles IFC suivent généralement une ''structure stricte'' : dans chaque fichier, il doit y avoir un et un seul ''IfcProject''. L'[https://ifc43-docs.standards.buildingsmart.org/IFC/RELEASE/IFC4x3/HTML/lexical/IfcProject.htm IfcProject] est la racine de tous les objets d'un modèle IFC. Sous le projet IfcProject, il y a généralement au moins un '''IfcSite''', qui peut contenir un ou plusieurs '''IfcBuildings''', qui sont à leur tour divisés en '''IfcBuildingStoreys'''. Ces derniers peuvent être divisés en '''IfcZones''' et '''IfcSpaces'''.</p></li>
<li><p>Les éléments de construction, tels que les '''IfcWalls''' ou les '''IfcWindows''', sont alors '''liés''' à l'une des structures ci-dessus, généralement un IfcBuildingStorey, mais ils peuvent également être liés à un autre élément de construction, de sorte qu'un élément peut être composé de plusieurs autres. Ces relations sont toujours explicitement mentionnées dans les fichiers IFC, elles ne sont jamais automatiques ou implicites.</p></li>
<li><p>Les éléments IFC, qu'il s'agisse d'éléments de construction tels que les murs ou les fenêtres, ou d'éléments de structure tels que les sites et les étages, ou de l'une des nombreuses autres [https://ifc43-docs.standards.buildingsmart.org/IFC/RELEASE/IFC4x3/HTML/annex-b1.html classes d'éléments] proposées par le format IFC, disposent tous d'un ensemble prédéfini d'« attributs ». Les attributs sont des éléments tels que le nom, la position dans l'espace ou le numéro d'identification unique, qui sont définis dans le format. Toutes les entités de la même classe doivent avoir les mêmes attributs. Les éléments peuvent également avoir des '''propriétés'''. Contrairement aux attributs, les propriétés ne sont pas définies par le format IFC et peuvent être définies librement par l'utilisateur (ou l'application BIM). Il s'agit en quelque sorte d'attributs personnalisés. Le format IFC propose également des ensembles de propriétés par défaut pour de nombreuses classes d'éléments. Par exemple, pour les poutres, il existe un ensemble appelé [https://ifc43-docs.standards.buildingsmart.org/IFC/RELEASE/IFC4x3/HTML/lexical/Pset_BeamCommon.htm BimCommon] qui contient une série de propriétés typiques pour les poutres.</p></li>
<li><p>La '''géométrie''' des éléments IFC est définie dans des éléments séparés, qui sont attachés à chaque mur, fenêtre, porte, etc. Elle peut également être partagée par plusieurs éléments. Il existe de très nombreuses façons de définir la géométrie, et c'est là que les problèmes commencent. Les éléments de construction peuvent avoir une géométrie 3D et une géométrie 2D (par exemple une vue en plan ou une empreinte), ainsi qu'une géométrie linéaire (utile pour les études de stabilité). Une bonne géométrie est généralement bien définie et construite de manière judicieuse. Par exemple, la géométrie d'un mur simple est définie par un rectangle au sol, avec une largeur et une longueur, qui est ensuite extrudé verticalement d'une hauteur donnée pour produire la forme du mur. Cela représente trois lignes dans le fichier IFC : le rectangle, l'extrusion et la position de l'objet final. Il est reconnaissable par d'autres applications BIM et les paramètres peuvent être modifiés, par exemple la largeur du rectangle de base.</p></li>
<li><p>Dans certains fichiers IFC que vous pouvez recevoir, cette information logique peut être complètement perdue, et la géométrie du mur définie comme un ensemble de facettes triangulaires. C'est souvent le cas des fichiers qui ont été convertis en IFC à partir d'un autre format. Il peut y avoir d'autres problèmes tels que des relations incomplètes, etc. Il suffit de dire que le format IFC permet de définir la géométrie de multiples façons, des plus « stupides » (facettes triangulaires) aux plus « intelligentes » (objets basés sur NURBS), en mettant l'accent sur les solides bien définis (tels que notre rectangle extrudé). Heureusement pour nous, c'est la spécialité de FreeCAD.</p></li></ul>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Opening, creating and converting IFC models ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In FreeCAD, opening an IFC file is done like any other file, via menu '''File → Open'''. By default, IFC files will load with only one element appearing in the '''Tree view'''. That is the fastest way to import, and you can usually import a 100Mb model in seconds.
</div>

[[Image:Nativeifc-tutorial-05.jpg]]

<div lang="en" dir="ltr" class="mw-content-ltr">
You can change the native IFC import preferences under '''Edit → Preferences → BIM → Native IFC'''. You can have for example the whole building structure revealed on import, or being asked each time.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Creating a new IFC model simply starts with creating a new IFC project under menu '''3D/BIM'''.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Converting a non-IFC FreeCAD model to nativeIFC can be done simply by exporting it to IFC, using menu '''File → Export''' or using the lock button (more about that below).
</div>


<div lang="en" dir="ltr" class="mw-content-ltr">
== Exploring the model ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Expanding model contents ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
By default, opening IFC files will show only the first, outer element of the file. Usually the IfcSite. To view the contents of that element, and of the subsequent ones, you need to '''expand''' it. Expanding is done by '''double-clicking the element in the Tree view''' or, alternatively, via the '''Utils → IFC expand''' menu option. This command can be [[Interface_Customization|customized]] and be assigned a keyboard shortcut, so it's possible to navigate the Tree view with the arrow keys and expand your model where needed entirely using the keyboard.
</div>

[[Image:Nativeifc-tutorial-06.jpg]]

<div lang="en" dir="ltr" class="mw-content-ltr">
Double-clicking an element in the Tree view will, the first time, reveal its children, and, the second time, or if there are no more children to reveal, '''load its full properties, material and shape'''.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
This allows to load a model as quickly as possible, and expand/define elements as needed. You can change this behavior under '''Edit → Preferences → BIM → Native IFC'''.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Locking and unlocking ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
When an IFC model is loaded in FreeCAD, it can be locked or unlocked. By default, opening IFC files will lock them, while inserting them (using '''File → Insert''') will leave FreeCAD unlocked.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Locking or unlocking is simply done using the lock button in the FreeCAD status bar:
</div>

[[Image:Nativeifc-tutorial-07.jpg]]

<div lang="en" dir="ltr" class="mw-content-ltr">
* '''Locked mode''' means that the FreeCAD document IS the IFC file. You don't see the IfcProject (it is the FreeCAD document itself in the Tree view), and anything you do in that document is automatically, transparently and immediately done in the IFC data itself. Adding a wall will modify the IFC file, as well as adding a line or a dimension, everything is done in IFC. you cannot have any FreeCAD element in the document that is not part of the IFC file. You can convert any FreeCAD model (BIM or not) to IFC by clicking the lock button.
* '''Unlocked mode''', also called hybrid mode, means the IFC project resides inside a '''project''' object. You can still have normal, non-IFC FreeCAD objects besides the IFC elements. To add an element to the IFC project, you must add it yourself to it by dragging it onto the project or one of the sub-elements of the project. You can create a new, blank IFC project using menu '''3D/BIM → Project'''.
* '''Working with no IFC project at all''': Remember you don't need to create an IFC project to start a BIM project (that can be done anytime later if needed). You can simply start building walls, adding floors and roofs, without defining an IFC structure or even caring about IFC.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Locked mode means careful mode: When opening a file by somebody else, you don't want to break anything, you want to explore the file, and maybe fix something or do a few localized changes. You want to make sure the changes you did are strictly located and traceable.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In all other cases, there is no real need or advantage to lock your model. In fact, you can change the default behavior to open IFC models as unlocked if you prefer, under '''Edit → Preferences → BIM → Native IFC'''.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
When changing to an IFC model, you often want to verify '''what you have changed in the IFC data''' since the last save. This is done using '''Utils → IFC Diff''' (or right-clicking the project in the Tree view and selecting '''IFC → Diff'''). The changes are presented in the [https://en.wikipedia.org/wiki/Diff diff format], with sections highlighted in red and green. This format is also understandable by computer systems like Git, which are able to track large change sets, and therefore turn your IFC files first-class citizens under such systems.
</div>

[[Image:Nativeifc-tutorial-08.jpg]]

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Model structure ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
As seen above, most IFC files use a standard '''Site → Building → Storey''' structure. This is so common that it is often considered mandatory, although it is not expressly stated in the IFC standard. You could very well have all your elements directly related to the IfcProject. However, since standardization works when everybody decides to use the same system, it is advisable to have at least one site, one building and one storey (called '''Level''' in FreeCAD) in your model.
</div>

[[Image:Nativeifc-tutorial-09.jpg]]

<div lang="en" dir="ltr" class="mw-content-ltr">
In FreeCAD, it is possible to use '''Groups''' to organize your objects further under a storey. For example, inside your first floor, you could create a 'Walls' group to add all your walls, a 'Carpentry' group to add your wooden beams, etc. Groups are supported by IFC, however it is not standard to put groups inside a building structure element like a storey. For this reason, groups by default are written as '''IfcBuildingElementAssemblies''' instead of IfcGroups. At FreeCAD, though, we believe such behavior is useful and should be permitted. So there is a preference option to allow it. Most BIM applications will happily open files with groups inside other elements. That preference option is there to help spread our vision and possibly convince people.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
So, hands on, let's start breaking our model…
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Adding and modifying elements ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Modifying attributes and properties ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Once we have opened a model, we can start modifying its contents. Be aware that at the moment I'm writing this tutorial, there is '''no graphical geometry editor''' for IFC elements (this is on the roadmap and should land pretty soon, though). The way to modify the geometry of elements is by modifying their '''geometric properties'''.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
When IFC elements are loaded from the file, their attributes are rendered in the [[Property_editor|properties editor]] under the '''IFC''' group. There, you can change things like name, description or even the class of elements.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
When double-clicking an element in the Tree view, you will first reveal the child elements of that element. When double-clicking it a second time, you will load additional data such as '''property sets''', '''custom properties''', '''materials''' and '''shape data'''. It will additionally create a set of '''geometry properties''' that will allow you to modify the geometry of that element. These geometry properties also form the foundations of the future graphical editor.
</div>

[[Image:Nativeifc-tutorial-10.jpg]]

<div lang="en" dir="ltr" class="mw-content-ltr">
All these additional properties can be changed directly, and new custom properties can be added using the two buttons under the properties editor.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Modifying geometry ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
You can change the position of any element by changing its '''Placement''' property (or using the [[Draft_Move|Move]] or [[Draft_Rotate|Rotate]] tools).
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
To modify the geometry, such as the width of a wall, you need first to double-click twice to reveal its '''geometry properties'''. If that wall was constructed the standard way, as an extruded rectangle, you will see the width and length of the rectangle, as well as the extrusion height, among those properties.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Of course, everything depends on how the wall was defined in the IFC file. It might not be an extruded rectangle. In that case, fewer or other geometry properties might be available.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Adding new BIM objects ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
How you add new objects depends on the current mode: locked or unlocked. When locked, anything you draw, such as a wall or a column, is automatically created in the IFC file itself. You might need to put it under the right level or building after creation, which is done simply by dragging the new wall under the right level in the Tree view.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In unlocked mode, your new wall will not be an IFC element yet. You always need to drag the wall yourself to the right place after creation.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Types ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In IFC, any element can be defined by a [https://standards.buildingsmart.org/IFC/RELEASE/IFC4_1/FINAL/HTML/schema/ifckernel/lexical/ifctypeproduct.htm type]. A type (ex. IfcWallType, IfcWindowType) is an IFC element that can hold common characteristics, properties or even geometry, that will automatically be used by all objects of that type. In some BIM applications, this is sometimes referred to as families.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In FreeCAD, in non-IFC BIM projects, we used to do this using cloning. In native IFC, there is full support for types. To define a type, the easiest way is to build an object of a desired class, for example a wall, then right-click it in the tree view and choose '''IFC → convert to type'''.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
When an object is converted to a type, it is moved to a special ''Types'' group under the project. It can then be referenced by any other wall in the project.
</div>

[[Image:Nativeifc-tutorial-11.jpg]]

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Caption|The above image shows our wall that is now using the 'My Wall Type' as its type}}
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Adding downloadable contents ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In a BIM project, one often needs to add downloadable contents, such as pieces of furniture, appliances or elements such as prefabricated window frames. These elements are typically downloaded from manufacturers websites, or BIM library websites.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In all those cases, the quality and format of the elements you download, are of importance. You should care (in that order) about using a file format well supported by FreeCAD, getting models with good geometric quality, and enough metadata (color, materials, manufacturer info, etc…). Some good ideas are:
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* STEP files from [https://grabcad.com/library?page=1&time=this_month&sort=popular&softwares=step-slash-iges GrabCAD]: STEP files are very well supported by FreeCAD and usually always contain high-quality geometry, as it is a favorite engineering format. They usually convert very well to IFC too.
* IFC files from model libraries like [https://bimobject.com BIMObject]: While using the IFC format might sound interesting, the IFC files made available by these website are often converted automatically from other (proprietary) formats, and the quality can be very low.
* Exporting models from BIM proprietary applications such as Revit or ArchiCAD to the SAT format, and open these in FreeCAD using the [https://github.com/jmplonka/InventorLoader Inventor Loader] addon (installable from the [[Std_AddonMgr|Addon manager]]). While these applications will allow to export parts and elements to IFC, they will often degrade the geometry. Exporting types and families to SAT often gives a similar quality as STEP files. The Inventor Loader, though, is a work in progress and might not work with each and every file.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Saving and handling files ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
A FreeCAD file containing a native IFC project, be it locked or unlocked, will always have an attached IFC file, where the IFC data is stored. When you create a new project, and you did not save the file yet, the IFC contents lives in the memory. As soon as you save the file, a companion IFC file is created and from now on attached to the FreeCAD file.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In '''locked mode''', the FreeCAD document contains in its ''IFC File Path'' property the path to the companion IFC file. Since everything that happens in FreeCAD happens directly in the IFC file, there is no more need of the FreeCAD file anymore. The 'Save' and 'Save as' entries in the FreeCAD file menu are replaced with 'Save IFC' and 'Save IFC as'. When you save the file, you will be saving the IFC file, and no FreeCAD file is written. Literally, you only work with the IFC file.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In '''unlocked mode''', a ''project'' object exists in the FreeCAD document, that also has a ''IFC file Path'' property that points to its companion IFC file. If you distribute your file to someone else, you will need to give them the IFC file too. If you move the IFC file, you will need to fix the ''IFC File Path'' property of the project object.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
It is possible to distribute the FreeCAD file without the IFC file, though: Set the ''Shape Mode'' property of all objects to 'Shape'. This will make the FreeCAD file retain the shape of all objects, and open correctly even if the IFC file is not present. The objects, however, will not be editable in that case.
</div>


<div lang="en" dir="ltr" class="mw-content-ltr">
== Creating output ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Creating views and 2D content ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
2D views, to be put on [[TechDraw_Workbench|TechDraw sheets]], can still be created the [[BIM_Workbench|same way as before]]: Adding [[Arch_SectionPlane|section planes]], creating [[BIM_Shape2DView|2D views]], filling them with annotations, then [[BIM_TDView|placing them]] on [[BIM_TDPage|sheets]]. The process is exactly the same with non-IFC BIM models as with native IFC models.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
By default, though, native IFC objects are loaded without their shape (their ''Shape Mode'' property is set to 'Coin'). This saves a lot of time when loading. But the cutting algorithms used to generate 2D views need the full shape, so when including native IFC objects in a section plane, their Shape Mode will automatically be set to 'Shape'.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
While the final sheet itself cannot currently be saved to the IFC file, the 2D views, section planes and their annotations can. When adding (by drag and dropping in unlocked mode, or automatically in locked mode) a section plane to a project, a group will automatically be created under the project. That group represents a 2D view (its ''Object Type'' property is set to 'DRAWING'), and everything you add to that group will be part of that 2D view.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
<div class="figure">
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
[[Image:Nativeifc-tutorial-12.jpg|Screenshot of a 2D view created from an IFC project]]
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
</div>
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Creating sheets ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
At the moment, sheets are not saved in the IFC file. So in case of locked files, the sheets will need to be recreated.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Creating schedules ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Schedules and all kinds of queries can be created the same way for native IFC as for non-IFC projects, using the [[Arch_Schedule|Schedule tool]]. Schedules can also be added to a native IFC project. In that case, their companion spreadsheet is not saved in the IFC file and must be re-created when opening the file.
</div>


<div lang="en" dir="ltr" class="mw-content-ltr">
== Python scripting ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== IfcOpenShell ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
[https://ifcopenshell.org/ IfcOpenShell] is the software component used in all IFC-related operations in FreeCAD. The BIM workbench can function without it, but in that case all IFC operations are disabled. IfcOpenShell is responsible for creating and modifying IFC files and IFC objects, as well as producing BREP geometry for the FreeCAD objects that represent IFC elements. FreeCAD currently uses IfcOpenShell only via its Python interface.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
IfcOpenShell offers a [https://docs.ifcopenshell.org/ broad documentation] that explains in detail how to use it.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
you can also use both IfcOpenShell and ifc_tools to manipulate IFC data directly. Below is a short example of how to use IfcOpenShell to open an IFC file and analyze its contents:
</div>

{{Code|code=
import ifcopenshell
my_ifc_file = ifcopenshell.open("/path/to/some/file.ifc")
walls = my_ifc_file.by_type("IfcWall") # get a list of all IfcWalls
some_specific_object = my_ifc_file[66] # get an object by its ID
some_specific_object = my_ifc_file.by_id(66) # alternative way
print(some_specific_object.Name) # you can access attributes that way
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
IfcOpenShell itself has no specific FreeCAD functionality (yet), so you would use it basically to do non-FreeCAD operations on objects, for example retrieve or modify objects and attributes, modify attributes, or even directly add objects. Be sure to have a look at the [https://docs.ifcopenshell.org/ifcopenshell-python.html IfcOpenShell Python documentation] to know more.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In FreeCAD, once you load an IFC file, an IfcOpenShell file object is created and attached to the project (the project object for unlocked files or the FreeCAD document itself for locked projects). Everything you do in FreeCAD actually manipulates that object. You can easily get access and manipulate the IfcOpenShell file object of a FreeCAD native IFC project. For example, in locked mode, you do:
</div>

{{Code|code=
import FreeCAD
my_doc = FreeCAD.loadFile("/path/to/some/file.ifc")
my_ifc_file = my_doc.Proxy.ifcfile
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
In unlocked mode, each project object also has a {{Incode|Proxy.ifcfile}} member.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== The ifc_tools module ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The [https://github.com/FreeCAD/FreeCAD/blob/main/src/Mod/BIM/nativeifc/ifc_tools.py ifc_tools] module is the main tool to use IfcOpenShell in FreeCAD's BIM module. It contains many tools and functions to do everything FreeCAD needs to do with IFC files and objects, such as creating new files, opening files, creating elements, modifying attributes, etc.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
When working with FreeCAD objects, using ifc_tools is much more convenient as it handles for you all the relationship between the FreeCAD object and the IFC object it represents. For example:
</div>

{{Code|code=
from nativeifc import ifc_tools
selection = FreeCADGui.Selection.getSelection()
my_obj = selection[0] # just get the first selected object
project = ifc_tools.get_project(my_obj)
ifcfile = ifc_tools.get_ifcfile(project)
ifc_elem = ifc_tools.get_ifc_element(my_obj)
my_obj.LongName = "Changed long name" # this updates the IFC data too
print(ifc_elem.LongName) 
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
There is much more in ifc_tools, such as utilities to create and modify FreeCAD objects (and their underlying IFC elements). Below are a few simple examples to get you started:
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Load the shape of selected objects ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
By default, opening an IFC file will only load a lightweight 3D representation of each element. To do more serious work with them, we might need to load their full shape:
</div>

{{Code|code=
for obj in FreeCADGui.Selection.getSelection():
    obj.ShapeMode = "Shape"
FreeCAD.ActiveDocument.recompute()
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Load the property sets of selected objects ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Property sets and their included properties are rendered as object properties in FreeCAD. Once they are loaded, you can simply manipulate the values through the properties editor in FreeCAD (or via Python):
</div>

{{Code|code=
from nativeifc import ifc_psets
for obj in FreeCADGui.Selection.getSelection():
    ifc_psets.show_psets(obj)
my_object.FireResistanceClass = "1B" # manipulate properties once loaded
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Saving an IFC file ====
</div>

{{Code|code=
ifc_tools.save(project)
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Add a new IFC document ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Use the '''Project''' tool from the [[BIM_Workbench|BIM workbench]] to produce a native IFC project object. It is not mandatory to save your new IFC project immediately, but it is a good practice anyway. If you forget to do so, you will get notified and be able to do it when saving the FreeCAD document.
</div>

{{Code|code=
doc = FreeCAD.ActiveDocument
new_project = ifc_tools.create_document(doc)
ifc_tools.save(new_project, "/path/for/our/new/file.ifc")
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Modifying the IFC class of an object ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Changing the class is very easy, one can simply select another one in the object's '''class''' property. Be warned, this might also change the predefined attributes of that object, so some attributes might vanish.
</div>

{{Code|code=
my_object.Class = "IfcWall"
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Aggregate (and convert) any FreeCAD object to an IFC project ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Suppose we built a new wall, and we need to add it to an IFC project. We can do that graphically by dragging it and dropping it onto the project in the tree view, but it is as easy in Python:
</div>

{{Code|code=
import Arch
my_new_wall = Arch.makeWall(None, 200, 20, 300)
ifc_tools.aggregate(my_new_wall, project)
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Add a new model structure ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
When creating a new project, you can also have a basic structure automatically created for you by answering 'yes' on the dialog that will pop up. But you can also easily do that in Python:
</div>

{{Code|code=
import Arch
doc = FreeCAD.ActiveDocument
project = ifc_tools.create_document(doc)
site = Arch.makeSite()
site = ifc_tools.aggregate(site, project)
building = Arch.makeBuilding()
building = ifc_tools.aggregate(building, site)
level = Arch.makeFloor()
level = ifc_tools.aggregate(floor, building)
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Change the schema of an IFC document ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Simply change the 'Schema' property of the project. Be warned, this can have deep consequences (some object types might have changed in the new schema version), so use with care and check your data afterwards.
</div>

{{Code|code=
project.Schema = "IFC4"
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
There is much more to explore, as more functionality is available through the different [https://github.com/FreeCAD/FreeCAD/tree/main/src/Mod/BIM/nativeifc native IFC submodules], each one provides tools to deal with a certain aspect of IFC (property sets, geometry, layers…). Be sure to explore them if needed!
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
I hope you now have a good idea of where to start and what can be done with native IFC in FreeCAD. Be sure to head to the [https://forum.freecad.org/viewforum.php?f=23 BIM section on the FreeCAD forum] if you need some help!
</div>