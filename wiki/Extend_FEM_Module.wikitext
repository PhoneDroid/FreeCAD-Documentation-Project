<languages/>
<translate>

<!--T:1-->
{{TutorialInfo
|Topic=FEM
|Level=Intermediate
|Time=1 hour
|Author=[[User:M42kus|M42kus]]
|FCVersion=0.17
}}

<!--T:2-->
The FEM workbench already supports a lot of different constraints and several solvers. Despite that users often need constraints not yet supported by FreeCAD. This page is the starting point to a series of tutorials and other resources describing how to extend the FEM workbench using the existing framework. While this series can prove helpful to software developers too the idea is to allow FEM users with a bit of interest into python coding to add the stuff they need themselves.

<!--T:3-->
Adding new constraints, equations or solver is mostly routine work. But doing it for the first time will not be as easy as it might seem. An understanding of the following topics will prove helpful:

<!--T:4-->
* Python scripting in FreeCAD.
** [[Python_scripting_tutorial|FreeCAD Scripting Tutorial]]
** [[FreeCAD_Scripting_Basics|FreeCAD Scripting Basics]]
* Extending FreeCAD with Python.
** [[Scripted_objects|Scripted Objects]]
* A solid understanding of the solver for which new objects shall be added (e.g. CalculiX or Elmer) is important.
* A little knowledge about build systems, especially cmake (build system used by FreeCAD).

== Build System (cmake) == <!--T:5-->

<!--T:6-->
The build system must be modified regardless of which objects shall be added o the FEM workbench. Every python module (file) must be registered. The FEM workbench requires every new python module to be registered in {{incode|Mod/Fem/CMakeLists.txt}}. This is true regardless of the type of the python module (GUI or non-GUI). Where exactly the module must be inserted depends on the role of the module. Solver, equations and constraints all use different lists. Searching for similar files and inserting the new file in the same list works most of the time.

<!--T:7-->
As an '''example''' lets add a new constraint called {{incode|pressure}} which is related to the '''flow equation'''. So, '''FlowPressure''' will widely used as <name> for this constraint. A new constraint requires at least the following new modules: 
* {{incode|constraint_<name>.py}}
* {{incode|view_constraint_<name>.py}} 
* {{incode|CommandFemConstraint<name>.py}} (may be unnecessary) 
These three files must be added to {{incode|Mod/Fem/CMakeLists.txt}} as well as {{incode|Mod/Fem/App/CMakeLists.txt}}. All inserted lines of code are indicated by a starting '''+'''.

</translate>
{{FileName|Mod/Fem/CMakeLists.txt}}

{{code|code=
SET(FemObjects_SRCS
    femobjects/__init__.py
    femobjects/base_fempythonobject.py
    femobjects/constraint_bodyheatsource.py
    femobjects/constraint_electrostaticpotential.py
    femobjects/constraint_flowvelocity.py
    femobjects/constraint_initialflowvelocity.py
+   femobjects/constraint_initialflowpressure.py
    femobjects/constraint_selfweight.py
...
    femobjects/solver_ccxtools.py
)
...
SET(FemGuiViewProvider_SRCS
    femviewprovider/__init__.py
    femviewprovider/view_base_femconstraint.py
    femviewprovider/view_base_femobject.py
    femviewprovider/view_constraint_bodyheatsource.py
    femviewprovider/view_constraint_electrostaticpotential.py
    femviewprovider/view_constraint_flowvelocity.py
+   femviewprovider/view_constraint_flowpressure.py
    femviewprovider/view_constraint_initialflowvelocity.py
    femviewprovider/view_constraint_selfweight.py
...
    femviewprovider/view_solver_ccxtools.py
)
}}
<translate>

== Source Organization == <!--T:8-->

<!--T:9-->
For organizing the python code the FEM module uses the following approach. The module is split into the following packages: 
* {{incode|femobjects}}, which contains all non-GUI like python proxies for document objects and 
* {{incode|femviewproviders}} containing everything GUI related like python proxies for view provider
* C++ based task panels are stored in '{{incode|Gui}}',
* icons can be found in '{{incode|Gui/Resources/icons/}}',
* .ui files are stored in '{{incode|Gui/Resources/ui/}}' commands.

<!--T:10-->
One package doesn't follow this pattern: {{incode|femsolver}}. It has its place on the same level as {{incode|femobjects}} and {{incode|femguiobjects}} ({{incode|src/Mod/Fem/femsolver}}). The package contains solver and equation related packages and modules and it is organized the following way:

</translate>
<pre>
.femsolver
.femsolver.elmer
.femsolver.elmer.equations
.femsolver.calculix
.femsolver.calculix.equations
.femsolver.z88
.femsolver.z88.equations
</pre>
<translate>

== Solver == <!--T:11-->

<!--T:12-->
In FreeCAD a solver can be split into two parts: 
* One is the document object used by the user to interact with the solver. Through it, solver parameters can be set and it is also used to control the solving process. 
* The other one are the so called tasks of a solver. The solving process is split into those tasks, namely: ''check, prepare, solve and results''. Those do the actual work of exporting the analysis into a format understood by the solver executable, starting the executable and loading the results back into FreeCAD.

<!--T:13-->
Most files related to a solver reside in a sub-package of the {{incode|femsolver}} package (e.g. for Elmer its in {{incode|femsolver/elmer}}). The following list enumerates all files related to the implementation of a solver. Those are the files that need to be copied and modified to add support for a new solver to FreeCAD. The given example is taken from the solver implementation of Elmer. 

<!--T:14-->
* '''femsolver/elmer/solver.py:''' Document object visible in the tree-view. Implemented in python via a document proxy and view proxy.
* '''femsolver/elmer/tasks.py:''' Module containing one task class per task required for a solver implementation. Those tasks divide the process of solving a analysis into the following steps: check, prepare, solve, results.
* '''femcommands/commands.py:''' Adds the solver document object to the active document. Required to access the solver object from the GUI.

== Equations == <!--T:15-->

<!--T:16-->
An equation represents a particular physics that shall be considered when solving the analysis (e.g. Flow, Heat). Not all solver in FreeCAD support (all) equations. Equations are represented by child objects of the corresponding solver object. In the tree-view this looks like this:

<!--T:17-->
* elmer-solver
** elasticity
** heat
** flow
** electrostatics

<!--T:18-->
Most solver specific options (e.g. max. iterations, method of solving, etc) are set via the equation objects. One consequence of this is that each solver must have it's own implementation of &quot;the same&quot; equation. CalculiX would have a different Heat-object that Elmer. To avoid having multiple buttons for the same physics in the GUI each solver object adds it's equations itself.

<!--T:19-->
The actual implementation can be split into the generic and the solver specific part. The generic part can be found in the {{incode|femsolver.equationbase}} module. The solver specific part resides inside individual Equations sub-packages of the solver packages (e.g. {{incode|femsolver/elmer/equations}}).

<!--T:20-->
Adding a new equations to Elmer should be very easy. For newcomers there exists a tutorial which shows how to add a new equation to Elmer by adding the existing elasticity solver to FreeCAD: [[Add_FEM_Equation_Tutorial|Add FEM Equation Tutorial]].

== Constraints == <!--T:21-->

<!--T:22-->
Constraints define boundary conditions for the problem that shall be solved. In FreeCAD constraints aren't specific to a particular solver. A problem setup can be solved by all solver that support all conditions in the analysis.

<!--T:23-->
Adding new constraints is quite straight forward. For newcomers there is a tutorial: [[Add_FEM_Constraint_Tutorial|Add FEM Constraint Tutorial]].


</translate>
[[Category:FEM{{#translation:}}]]