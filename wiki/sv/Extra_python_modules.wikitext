<languages/>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Docnav
|[[Workbench_creation|Workbench creation]]
|[[Source_documentation|Source documentation]]
}}
</div>

{{TOCright}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==Overview==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
This page lists several additional Python modules or other pieces of software that can be downloaded freely from the internet, and add functionality to your FreeCAD installation.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== PySide ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* homepage (PySide): [http://qt-project.org/wiki/PySide http://qt-project.org/wiki/PySide]
* license: LGPL
* optional, but needed by several modules: Draft, BIM, Ship, Plot, OpenSCAD, Spreadsheet
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
PySide is required by several modules of FreeCAD to access FreeCAD's Qt interface. It is already bundled in the windows verison of FreeCAD, and is usually installed automatically by FreeCAD on Linux, when installing from official repositories. If those modules (Draft, BIM, etc) are enabled after FreeCAD is installed, it means PySide is already there, and you don't need to do anything more.
</div>

'''Notera''': av följande  moduler, så är Pivy nu helt integrerad i alla FreeCAD installationspaket, och PyQt4 är också integrerat i Windows installationspaket.

=== Installation ===

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Linux ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The simplest way to install PySide is through your distribution's package manager. On Debian/Ubuntu systems, the package name is generally ''python-PySide'', while on RPM-based systems it is named ''pyside''. The necessary dependencies (Qt and SIP) will be taken care of automatically.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Windows ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The program can be downloaded from http://qt-project.org/wiki/Category:LanguageBindings::PySide::Downloads . You'll need to install the Qt and SIP libraries before installing PySide (to be documented).
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== MacOS ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
PySide on Mac can be installed via homebrew or port. See [[Compile on MacOS#Install_Dependencies|Install dependencies]] for more information.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Usage ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Once it is installed, you can check that everything is working by typing in FreeCAD Python console:
</div>

{{Code|code=
import PySide
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
To access the FreeCAD interface, type:
</div>

{{Code|code=
from PySide import QtCore,QtGui
FreeCADWindow = FreeCADGui.getMainWindow()
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Now you can start to explore the interface with the dir() command. You can add new elements, like a custom widget, with commands like:
</div>

{{Code|code=
FreeCADWindow.addDockWidget(QtCore.Qt.RghtDockWidgetArea,my_custom_widget)
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Working with Unicode:
</div>

{{Code|code=
text = text.encode('utf-8')
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Working with QFileDialog and OpenFileName:
</div>

{{Code|code=
path = FreeCAD.ConfigGet("AppHomePath")
#path = FreeCAD.ConfigGet("UserAppData")
OpenName, Filter = PySide.QtGui.QFileDialog.getOpenFileName(None, "Read a txt file", path, "*.txt")
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Working with QFileDialog and SaveFileName:
</div>

{{Code|code=
path = FreeCAD.ConfigGet("AppHomePath")
#path = FreeCAD.ConfigGet("UserAppData")
SaveName, Filter = PySide.QtGui.QFileDialog.getSaveFileName(None, "Save a file txt", path, "*.txt")
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Additional documentation ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* [https://doc.qt.io/qt.html#qtforpython Qt official documentation site]
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Pivy ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* homepage: [https://www.coin3d.org/ https://www.coin3d.org/]
* license: BSD
* optional, but needed by several modules of FreeCAD: Draft, BIM
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Pivy is a needed by several modules to access the 3D view of FreeCAD. On windows, Pivy is already bundled inside the FreeCAD installer, and on Linux it is usually automatically installed when you install FreeCAD from an official repository. On macOS, unfortunately, you will need to compile pivy yourself.
</div>

=== Installation ===

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Prerequisites ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
I believe before compiling Pivy you will want to have Coin and SoQt installed.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
I found for building on Mac it was sufficient to install the [http://www.coin3d.org/lib/plonesoftwarecenter_view Coin3 binary package]. Attempting to install coin from MacPorts was problematic: tried to add a lot of X Windows packages and ultimately crashed with a script error.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
For Fedora I found an RPM with Coin3.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
SoQt compiled from [http://www.coin3d.org/lib/soqt/releases/1.5.0 source] fine on Mac and Linux.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Debian & Ubuntu ====
</div>

<div class="mw-translate-fuzzy">
====Debian & Ubuntu====
Med början i Debian Squeeze och Ubuntu Lucid, så kommer pivy att finnas tillgängligt direkt från de officiella förråden, vilket sparar mycket krångel. Innan dess, så kan du antingen ladda ned ett av de paket som vi har gjort (för debian och ubuntu karmic) tillgängliga på [[Download/sv|Nedladdnings]]sidorna, eller så kan du kompilera det själv.
</div>

<div class="mw-translate-fuzzy">
Det bästa sättet att kompilera pivy smidigt är att hämta debians källkodspaket för pivy och göra ett paket med debuild. Det är samma källkod som på den officiella pivysajten, men debianfolket har gjort flera bugg-fixningstillägg. Det kompilerar också bra på ubuntu karmic: http://packages.debian.org/squeeze/python-pivy (ladda ned .orig.gz och .diff.gz file, packa upp båda, tillämpa sedan .diff på källkoden: gå till den uppackade pivy källkodsmappen, och tillämpa .diff patchen:
</div>

{{Code|code=
patch -p1 < ../pivy_0.5.0~svn765-2.diff
}}

sedan

{{Code|code=
debuild
}}

för att få pivy korrekt byggt till ett officiellt installerbart paket. Sedan så är det bara att installera paketet med gdebi.

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Other Linux distributions ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
First get the latest sources from the [https://github.com/coin3d/pivy project's repository]:
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Information to be added.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
As of March 2012, the latest version is Pivy-0.5.
</div>

Sedan behöver du ett verktyg som kallas för SWIG för att generera  C++ koden för Pythonbindningarna. Det rekommenderas att version 1.3.25 av SWIG används, inte den senaste versionen, därför att pivy för tillfället endast fungerar korrekt med 1.3.25. Ladda ned 1.3.25 source tarball från [http://www.swig.org http://www.swig.org]. Packa sedan upp den, och gör som root följande i en konsol:

{{Code|code=
./configure
make
make install (or checkinstall if you use it)
}}

Det tar bara några sekunder att bygga.

<div lang="en" dir="ltr" class="mw-content-ltr">
Alternatively, you can try building with a more recent SWIG. As of March 2012, a typical repository version is 2.0.4. Pivy has a minor compile problem with SWIG 2.0.4 on macOS (see below) but seems to build fine on Fedora Core 15.
</div>

Efter det, gå till pivy källkoden och anropa

{{Code|code=
python setup.py build
}}

which creates the source files.  Note that build can produce thousands of warnings, but hopefully there will be no errors.

viltet skapar källkodsfilerna. Du kan få kompileringsfel där en 'const char*' inte kan konverteras till en 'char*'. För att fixa det så behöver du bara skriva en 'const' innan raderna som orsakade felet.

Det finns sex rader att fixa. Efter det, installera genom att skriva (som root):

{{Code|code=
python setup.py install (or checkinstall python setup.py install)
}}

Klart! Pivy är installerat.

<div lang="en" dir="ltr" class="mw-content-ltr">
==== MacOS ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
These instructions may not be complete. Something close to this worked for OS 10.7 as of March 2012. I use MacPorts for repositories, but other options should also work.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
As for linux, get the latest source:
</div>

{{Code|code=
hg clone http://hg.sim.no/Pivy/default Pivy
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
If you don't have hg, you can get it from MacPorts:
</div>

{{Code|code=
port install mercurial
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Then, as above you need SWIG. It should be a matter of:
</div>

{{Code|code=
port install swig
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
I found I needed also:
</div>

{{Code|code=
port install swig-python
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
As of March 2012, MacPorts SWIG is version 2.0.4. As noted above for linux, you might be better off downloading an older version. SWIG 2.0.4 seems to have a bug that stops Pivy building. See first message in this [https://sourceforge.net/mailarchive/message.php?msg_id=28114815 digest]
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
This can be corrected by editing the 2 source locations to add dereferences: *arg4, *arg5 in place of arg4, arg5. Now Pivy should build:
</div>

{{Code|code=
python setup.py build
sudo python setup.py install
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Windows ====
</div>

<div class="mw-translate-fuzzy">
====Windows====
När du använder Visual Studio 2005 eller senare så ska du öppna en kommandoprompt med 'Visual Studio 2005 Command prompt' från Tools menyn.
Om du ännu inte har Pythontolken i systemsökvägen, gör
</div>

{{Code|code=
set PATH=path_to_python_3.x;%PATH%
}}

För att få pivy att fungera så ska du hämta den senaste källkoden från projektets förråd:

<div lang="en" dir="ltr" class="mw-content-ltr">
Information to be added.
</div>

Sedan behöver du ett verktyg som kallas för SWIG för att generera C++ koden för Python bindningarna. Det rekommenderas att version 1.3.25 av SWIG används, inte den senaste versionen, därför att pivy för tillfället endast fungerar korrekt med 1.3.25. Ladda ned binärkoden för 1.3.25 från [http://www.swig.org http://www.swig.org]. Packa sedan upp den och lägg till den i systemsökvägen från kommandoraden

{{Code|code=
set PATH=path_to_swig_1.3.25;%PATH%
}}

och ställ in COINDIR till den riktiga sökvägen

{{Code|code=
set COINDIR=path_to_coin
}}

På Windows så förväntar sig  pivys konfigurationsfil SoWin istället för SoQt som standard. Jag har inte hittat en självklart sätt att bygga med SoQt, så Jag modifierade filen setup.py direkt.

Ta på rad 200 bort delen 'sowin' : ('gui._sowin', 'sowin-config', 'pivy.gui.') (ta inte bort den stängande parentesen).

Efter det, gå till pivy källkoden och anropa

{{Code|code=
python setup.py build
}}

vilket skapar källkodsfilerna. Du kan få kompileringsfel för att flera headerfiler inte kunde hittas. I detta fall så får du justera INCLUDE variabeln

{{Code|code=
set INCLUDE=%INCLUDE%;path_to_coin_include_dir
}}

och om SoQt headers int är på samma plats som Coin headers så får du också justera

{{Code|code=
set INCLUDE=%INCLUDE%;path_to_soqt_include_dir
}}

och slutligen Qt headers

{{Code|code=
set INCLUDE=%INCLUDE%;path_to_pyside\include\Qt
}}

<div class="mw-translate-fuzzy">
Om du använder Expressutgåvan av Visual Studio så kan du få ett python keyerror undantag.

I detta fall så måste du ändra en del saker i msvccompiler.py som finns i din python installation.
</div>

Gå till rad 122 och byt ut raden

{{Code|code=
vsbase = r"Software\Microsoft\VisualStudio\%0.1f" % version
}}

mot

{{Code|code=
vsbase = r"Software\Microsoft\VCExpress\%0.1f" % version
}}

<div class="mw-translate-fuzzy">
Försök sedan igen.

Om du får ett andra fel som
</div>

{{Code|code=
error: Python was built with Visual Studio 2003;...
}}

Så måste du även byta ut rad 128

{{Code|code=
self.set_macro("FrameworkSDKDir", net, "sdkinstallrootv1.1")
}}

mot

{{Code|code=
self.set_macro("FrameworkSDKDir", net, "sdkinstallrootv2.0")
}}

Försök igen. Om du åter får ett fel som

{{Code|code=
error: Python was built with Visual Studio version 8.0, and extensions need to be built with the same version of the compiler, but it isn't installed.
}}

så ska du kontrollera miljövariablerna DISTUTILS_USE_SDK och MSSDK med

{{Code|code=
echo %DISTUTILS_USE_SDK%
echo %MSSDK%
}}

Om de inte är inställda än, ställ in dem till 1

{{Code|code=
set DISTUTILS_USE_SDK=1
set MSSDK=1
}}

<div class="mw-translate-fuzzy">
Nu kan du få kompileringsfel där en 'const char*' inte kan konverteras till en 'char*'. För att fixa det så behöver du bara skriva en 'const' innan raderna som orsakade felet. Det finns sex rader att fixa. 

Kopiera sedan den genererade pivykatalogen till en plats där pythontolken i FreeCAD kan hitta den.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Usage ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
To check if Pivy is correctly installed:
</div>

{{Code|code=
import pivy
}}

För att Pivy ska komma åt FreeCAD scengrafen, gör följande:

{{Code|code=
from pivy import coin
App.newDocument() # Open a document and a view
view = Gui.ActiveDocument.ActiveView
FCSceneGraph = view.getSceneGraph() # returns a pivy Python object that holds a SoSeparator, the main "container" of the Coin scenegraph
FCSceneGraph.addChild(coin.SoCube()) # add a box to scene
}}

Nu kan du utforska FCSceneGraph med dir() kommandot.

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Additonal Documentation ===
</div>

<div class="mw-translate-fuzzy">
===Dokumentation===
Olyckligtvis så existerar det knappast ännu någon dokumentation om pivy på nätet. Men Coin dokumentationen kan vara användbar, eftersom pivy helt enkelt översätter Coin funktioner, noder och metoder i python, allt behåller samma namn och egenskaper, bara man tänker på syntaxskillnaden mellan C och python:
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* https://github.com/coin3d/coin/wiki/Documentation - Coin3D API Reference
* http://www-evasion.imag.fr/~Francois.Faure/doc/inventorMentor/sgi_html/index.html - The Inventor Mentor - The "bible" of Inventor scene description language.
</div>

Du kan också titta på Draft.py filen i FreeCAD Mod/Draft mappen, eftersom den använder pivy mycket.

<div lang="en" dir="ltr" class="mw-content-ltr">
== pyCollada ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* homepage: https://pycollada.github.io
* license: BSD
* optional, needed to enable import and export of Collada (.DAE) files
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
pyCollada is a Python library that allow programs to read and write [https://en.wikipedia.org/wiki/COLLADA Collada (*.DAE)] files. When pyCollada is installed on your system, FreeCAD will be able to handle importing and exporting in the Collada file format.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Installation ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Linux ====
</div>

{{Code|code=
sudo apt-get install python3-collada
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
You can check if pycollada was correctly installed by issuing in a Python console:
</div>

{{Code|code=
import collada
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
If it returns nothing (no error message), then all is OK
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Linux AppImages and Snaps ====
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
Paste this code in the [[Python_console|Python console]]:
</div>

{{Code|code=
import addonmanager_utilities as utils
import subprocess
import os

if hasattr(utils, "get_python_exe"):
    # For v0.21:
    python_exe = utils.get_python_exe()
else:
    # For v0.22/v1.0:
    from freecad.utils import get_python_exe

python_exe = get_python_exe()
vendor_path = utils.get_pip_target_directory()
if not os.path.exists(vendor_path):
    os.makedirs(vendor_path)

subprocess.run(
    [
        python_exe,
        "-m",
        "pip",
        "install",
        "--disable-pip-version-check",
        "--target",
        vendor_path,
        "pycollada",
    ],
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE,
    timeout=120,
    check=True,
)
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Windows ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
On Windows since 0.15 pycollada is included in both the FreeCAD release and developer builds so no additional steps are necessary.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== MacOS ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
If you are using the Homebrew build of FreeCAD you can install pycollada into your system Python using pip.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
If you need to install pip:
</div>

{{Code|code=
$ sudo easy_install pip
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
Install pycollada:
</div>

{{Code|code=
$ sudo pip install pycollada
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
If you are using a binary version of FreeCAD, you can tell pip to install pycollada into the site-packages inside FreeCAD.app:
</div>

{{Code|code=
$ pip install --target="/Applications/FreeCAD.app/Contents/lib/python3.x/site-packages" pycollada
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
or after downloading the pycollada code
</div>

{{Code|code=
$ export PYTHONPATH=/Applications/FreeCAD\ 0.16.6706.app/Contents/lib/python3.x/site-packages:$PYTHONPATH
$ python setup.py install --prefix=/Applications/FreeCAD\ 0.2x.yyyy.app/Contents
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
== IfcOpenShell ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* homepage: http://www.ifcopenshell.org
* license: LGPL
* optional, needed to extend import abilities of IFC files
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
IFCOpenShell is a library currently in development, that allows to import (and soon export) [https://en.wikipedia.org/wiki/Industry_Foundation_Classes Industry foundation Classes (*.IFC)] files. IFC is an extension to the STEP format, and is becoming the standard in [https://en.wikipedia.org/wiki/Building_information_modeling BIM] workflows. When ifcopenshell is correctly installed on your system, the FreeCAD [[BIM_Workbench|BIM Workbench]] will detect it and use it to import IFC files, instead of its built-in rudimentary importer. Since ifcopenshell is based on OpenCasCade, like FreeCAD, the quality of the import is very high, producing high-quality solid geometry.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Installation ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Linux ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Installation instructions can be found [https://docs.ifcopenshell.org/ifcopenshell-python/installation.html here].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
You can check that ifcopenshell was correctly installed by issuing in a Python console:
</div>

{{Code|code=
import ifcopenshell
}}

<div lang="en" dir="ltr" class="mw-content-ltr">
If it returns nothing (no error message), then all is OK
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Windows and macOS ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
IfcOpenShell is included in both the FreeCAD release and developer builds so no additional steps are necessary.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
===Links===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Tutorial [[Import/Export_IFC_-_compiling_IfcOpenShell|Import/Export IFC - compiling IfcOpenShell]]
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== LazyLoader ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
LazyLoader is a Python module that allows deferred loading, while still importing at the top of the script. This is useful if you are importing another module that is slow, and it is used several times throughout the script. Using LazyLoader can improve workbench startup times, but the module will still need to be loaded on first use.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Installation ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
LazyLoader is included with FreeCAD v0.19
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Usage ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
You will need to import LazyLoader, then change the import of whatever module you want to be deferred.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Code|code=
from lazy_loader.lazy_loader import LazyLoader
Part = LazyLoader('Part', globals(), 'Part')
}}
The variable Part is how the module is named in your script. You can replicate "import Part as P" by changing the variable.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
{{Code|code=
P = LazyLoader('Part', globals(), 'Part')
}}
You can also import a module from a package.
{{Code|code=
utils = LazyLoader('PathScripts', globals(), 'PathScripts.PathUtils')
}}
You can't import individual functions, just entire modules.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Links ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* Original source: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/util/lazy_loader.py
* Further explanation: https://wil.yegelwel.com/lazily-importing-python-modules/
* Code within the FreeCAD source code: https://github.com/FreeCAD/FreeCAD/tree/master/src/3rdParty/lazy_loader
* Forum discussion: https://forum.freecad.org/viewtopic.php?f=10&t=45298
</div>


<div class="mw-translate-fuzzy">
{{docnav/sv|Localisation/sv|Source documentation/sv}}
</div>

{{Userdocnavi{{#translation:}}}}
[[Category:Python Code{{#translation:}}]]
[[Category:Developer Documentation{{#translation:}}]]