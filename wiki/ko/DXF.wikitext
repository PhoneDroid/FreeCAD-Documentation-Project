<languages/>
{{TOCright}}

<span id="Background_history"></span>
== 배경 역사 ==

DXF(Drawing Exchange Format)는 Autodesk가 주력 AutoCAD 제품과 다른 소프트웨어 간의 파일 교환을 가능하게 하기 위해 개발한 독점적인 CAD 데이터 형식입니다. DXF 형식을 읽고 쓰기 위한 좋은 소프트웨어 라이브러리가 많이 있습니다.

DXF 형식에는 여러 버전이 있습니다. 1992년부터 출시된 R12나 조절곡선(spline)이 적용된 1997년부터 출시된 R14와 같은 특정 키 버전을 들어보게 될 겁니다. DXF의 이후 버전에는 3D 요소가 있지만, 이는 거의 사용되거나 구현되지 않습니다. DXF를 사용하여 프로그램 간에 CAD 데이터를 공유하는 방법은 주로 해당 리더/가져오기 도구와 작성기/내보내기 도구의 제한 사항과 버그에 따라 달라집니다. 이러한 문제는 거의 완벽하게 문서화되지 않으며 큰 좌절의 원인이 될 수 있습니다.

DXF 파일을 편집하고 저장할 때 거의 동일한 상태로 유지하려는 경우, [https://en.wikipedia.org/wiki/LibreCAD LibreCAD] 또는 [https://en.wikipedia.org/wiki/QCad QCad]를 사용하는 것이 좋습니다. 이 프로그램의 내부 데이터 구조는 DXF 파일의 개체와 호환됩니다.

FreeCAD에서 DXF 리더는 DXF 파일의 기하요소(예: 조절곡선 모양)를 작업대의 특정 내부 표현으로 변환해야 합니다.

<span id="Methods_for_importing_DXF_to_FreeCAD"></span>
== DXF를 프리캐드로 가져오는 방법 ==

<div lang="en" dir="ltr" class="mw-content-ltr">
If you intend to review the settings frequently, we recommend you go to Edit → Preferences → Import-Export → DXF and tick the box "[ ] Show this dialog when importing and exporting".
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
More information is on the pages [[Draft_DXF|Draft DXF]] and [[FreeCAD_and_DXF_Import|FreeCAD and DXF Import]].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
If you are using the imported geometry to build 3D shapes in the Part Design Workbench, try the [[Sketcher_ValidateSketch|Sketcher Validate]] after you have imported the DXF into a sketch.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== C++ DXF importer ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
This implementation of fast, but skips features it doesn't recognize, such as DXF splines. It also can only import geometry into the Draft Workbench as individual entries in the Model tree. These can have the colors read from the file if you tick to enable this option. For further information, see [https://forum.freecad.org/viewtopic.php?f=3&t=32493 this forum post].
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Python DXF importer ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
This importer has to be downloaded and installed before it can be used. Use the "[ ] Allow FreeCAD to automatically download and update the DXF libraries" option.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
This importer has more features (such as implementing splines), and has the option of loading the DXF shapes into the Sketcher Workbench. However, be warned that all the elements of the sketch will appear individually a second time in the model tree, which can be confusing. You can delete all these individual objects and retain the single sketch (which appears as the second entry in the list of new elements).
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Unfortunately, the Sketcher Workbench does not implement colors, so all the geometry will appear on the same level, which is a problem if the file contains many construction lines. One work-around is to open your drawing in LibreCAD, and delete all the geometry you don't want to appear before saving a file that contains exactly the geometry that you want to load.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Macros ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Keep an eye out on the FreeCAD forum or in the [[Macros_recipes|Macros recipes]] for alternative implementations of DXF importing and cleaning up as they develop.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Saving DXF ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
In addition to the options under the Edit → Preferences, the [[TechDraw_Workbench|TechDraw Workbench]] can also export drawing pages to DXF using the [[TechDraw_ExportPageDXF|TechDraw ExportPageDXF]] function.
</div>


<div lang="en" dir="ltr" class="mw-content-ltr">
== DXF terms and definitions ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== Anonymous blocks ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
When discussing DXF files, several terms are used to describe blocks that are generated automatically by the CAD software rather than by the user.
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
* '''Anonymous block''' (or '''"Asterisk" block'''): This is the technical term defined by the DXF standard. It refers to any block whose name begins with an asterisk ({{Incode|*}}). It is the overarching term.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* '''System block''': This term describes the ''purpose'' of most anonymous blocks. They are not typically created by a user directly. Instead, the CAD application (e.g., AutoCAD) generates them automatically to represent complex objects that are composed of simpler geometric entities, such as hatches and dimensions.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* '''Hidden block''': This term describes the typical ''behavior'' of anonymous blocks within a CAD program's user interface. Because they are system-generated and not meant for direct user manipulation, they are usually hidden from the list of blocks that a user can insert.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Essentially, "anonymous block" is the technical name, "system block" describes its function, and "hidden block" describes its typical user interface behavior. For practical purposes in the context of the FreeCAD DXF importer, they all refer to the same category of blocks.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== Classes of anonymous blocks ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Anonymous blocks are further categorized based on the character that follows the initial asterisk. This prefix indicates the block's specific purpose. The most common classes are:
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* {{Incode|*D...}} (Dimensions): A block representing the graphical components of a dimension entity (lines, arrowheads, etc.).
* {{Incode|*X...}} (Hatches): A block representing the geometry that makes up a hatch pattern.
* {{Incode|*P...}} (Paper Space Layouts): A block that contains all the entities that exist on a specific paper space layout. The main model is typically in a block named {{Incode|*Model_Space}}, and individual layouts are named {{Incode|*Paper_Space}}, {{Incode|*Paper_Space0}}, {{Incode|*Paper_Space1}}, and so on.
* {{Incode|*U...}} (Dynamic Blocks): These are complex blocks used for AutoCAD's dynamic block functionality.
* {{Incode|*E...}}, {{Incode|*T...}}, etc.: Other prefixes exist for specialized objects like associative arrowheads and tables.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
=== BLOCKs and INSERTs ===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== The BLOCK entity ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
A {{Incode|BLOCK}} is a named collection of geometric entities (lines, arcs, polylines, etc.) that are grouped together to form a single object definition. It can be thought of as a template.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
A {{Incode|BLOCK}}:
* '''Has a name:''' every user-created block has a unique name (e.g., "CHAIR-01", "BOLT-M8"). This name is used to reference the block.
* '''Has a base point:''' this is the origin point (0,0,0) within the block's own internal coordinate system. When the block is inserted, this base point is aligned with the specified insertion coordinates.
* '''Is not visible by itself:''' the {{Incode|BLOCK}} definition is stored in a library-like section of the DXF file (the {{Incode|BLOCKS}} section). The geometry within the block does not appear in the final drawing until an instance of it is created.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== The INSERT entity ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
An {{Incode|INSERT}} entity is what places a copy, or instance, of a {{Incode|BLOCK}}'s geometry into the drawing's model space or paper space. It is a very lightweight entity because it does not contain the geometry itself; it only contains a reference to a {{Incode|BLOCK}} definition and instructions on how to place and transform it.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
An {{Incode|INSERT}}:
* '''References a block by name:''' it specifies which {{Incode|BLOCK}} definition to use (e.g., "I am an instance of block 'CHAIR-01'").
* '''Has an insertion point:''' this is the (X, Y, Z) coordinate in the drawing where the block's base point should be placed.
* '''Has transformations:''' each instance can be transformed independently without affecting the original block definition. These transformations include:
** '''Scale:''' the instance can be scaled differently in the X, Y, and Z directions.
** '''Rotation:''' the instance can be rotated around its insertion point.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
==== BLOCK placement strategies ====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
A DXF file separates the '''definition''' of a component from its '''placement'''.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* A {{Incode|BLOCK}} is the template or blueprint. It contains the geometry that makes up a component, like a chair or a window. These definitions are stored in the {{Incode|BLOCKS}} section of the file and are not directly visible in the final drawing.
* An {{Incode|INSERT}} is the instruction to place a {{Incode|BLOCK}} into the drawing at a specific position, orientation, and scale. These are the visible instances of the block and are found in the {{Incode|ENTITIES}} section.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
There are two primary workflows for using blocks and inserts:
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
# '''Template and instance workflow:''' A single {{Incode|BLOCK}} definition is created, and multiple {{Incode|INSERT}} entities are used to place instances of it throughout the drawing. This is an efficient method for handling repetitive elements. For instance, the geometry for a chair is defined once in a {{Incode|BLOCK}} and then referenced many times by {{Incode|INSERT}} entities.
# '''Compound object workflow:''' A {{Incode|BLOCK}} is created from existing geometry simply to group those objects together as a single, selectable unit. In this case, the {{Incode|BLOCK}} definition is used by a single {{Incode|INSERT}} entity only.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The DXF importer must be able to distinguish between these two use cases to correctly represent the original drawing's intent, either by creating many linked instances to a single base object (template model) or by creating a single, visible object (grouped object model).
</div>


{{Userdocnavi{{#translation:}}}}
[[Category:User Documentation{{#translation:}}]]
[[Category:Draft{{#translation:}}]]
[[Category:TechDraw{{#translation:}}]]
[[Category:File_Formats{{#translation:}}]]