<languages/>
<translate>

<!--T:122-->
{{Docnav
|[[Workbench_creation|Workbench creation]]
|[[Source_documentation|Source documentation]]
}}

</translate>
{{TOCright}}
<translate>

1

== PySide == <!--T:134-->

<!--T:2-->
* homepage (PySide): [http://qt-project.org/wiki/PySide http://qt-project.org/wiki/PySide]
* license: LGPL
* optional, but needed by several modules: Draft, BIM, Ship, Plot, OpenSCAD, Spreadsheet

<!--T:3-->
PySide is required by several modules of FreeCAD to access FreeCAD's Qt interface. It is already bundled in the windows verison of FreeCAD, and is usually installed automatically by FreeCAD on Linux, when installing from official repositories. If those modules (Draft, BIM, etc) are enabled after FreeCAD is installed, it means PySide is already there, and you don't need to do anything more.

<!--T:4-->
'''Note:''' FreeCAD progressively moved away from PyQt after version 0.13, in favour of [http://qt-project.org/wiki/PySide PySide], which does exactly the same job but has a license (LGPL) more compatible with FreeCAD.

=== Installation === <!--T:5-->

==== Linux ==== <!--T:135-->

<!--T:6-->
The simplest way to install PySide is through your distribution's package manager. On Debian/Ubuntu systems, the package name is generally ''python-PySide'', while on RPM-based systems it is named ''pyside''. The necessary dependencies (Qt and SIP) will be taken care of automatically.

==== Windows ==== <!--T:136-->

<!--T:7-->
The program can be downloaded from http://qt-project.org/wiki/Category:LanguageBindings::PySide::Downloads . You'll need to install the Qt and SIP libraries before installing PySide (to be documented).

==== MacOS ==== <!--T:137-->

<!--T:8-->
PySide on Mac can be installed via homebrew or port. See [[Compile on MacOS#Install_Dependencies|Install dependencies]] for more information.

=== Usage === <!--T:138-->

<!--T:9-->
Once it is installed, you can check that everything is working by typing in FreeCAD Python console:

</translate>
{{Code|code=
import PySide
}}
<translate>

<!--T:10-->
To access the FreeCAD interface, type:

</translate>
{{Code|code=
from PySide import QtCore,QtGui
FreeCADWindow = FreeCADGui.getMainWindow()
}}
<translate>

<!--T:11-->
Now you can start to explore the interface with the dir() command. You can add new elements, like a custom widget, with commands like:

</translate>
{{Code|code=
FreeCADWindow.addDockWidget(QtCore.Qt.RghtDockWidgetArea,my_custom_widget)
}}
<translate>

<!--T:12-->
Working with Unicode:

</translate>
{{Code|code=
text = text.encode('utf-8')
}}
<translate>

<!--T:13-->
Working with QFileDialog and OpenFileName:

</translate>
{{Code|code=
path = FreeCAD.ConfigGet("AppHomePath")
#path = FreeCAD.ConfigGet("UserAppData")
OpenName, Filter = PySide.QtGui.QFileDialog.getOpenFileName(None, "Read a txt file", path, "*.txt")
}}
<translate>

<!--T:14-->
Working with QFileDialog and SaveFileName:

</translate>
{{Code|code=
path = FreeCAD.ConfigGet("AppHomePath")
#path = FreeCAD.ConfigGet("UserAppData")
SaveName, Filter = PySide.QtGui.QFileDialog.getSaveFileName(None, "Save a file txt", path, "*.txt")
}}
<translate>

=== Additional documentation === <!--T:139-->

<!--T:140-->
* [https://doc.qt.io/qt.html#qtforpython Qt official documentation site]

== Pivy == <!--T:141-->

<!--T:28-->
* homepage: [https://www.coin3d.org/ https://www.coin3d.org/]
* license: BSD
* optional, but needed by several modules of FreeCAD: Draft, BIM

<!--T:29-->
Pivy is a needed by several modules to access the 3D view of FreeCAD. On windows, Pivy is already bundled inside the FreeCAD installer, and on Linux it is usually automatically installed when you install FreeCAD from an official repository. On macOS, unfortunately, you will need to compile pivy yourself.

=== Installation === <!--T:30-->

==== Prerequisites ==== <!--T:142-->

<!--T:31-->
I believe before compiling Pivy you will want to have Coin and SoQt installed.

<!--T:32-->
I found for building on Mac it was sufficient to install the [http://www.coin3d.org/lib/plonesoftwarecenter_view Coin3 binary package]. Attempting to install coin from MacPorts was problematic: tried to add a lot of X Windows packages and ultimately crashed with a script error.

<!--T:33-->
For Fedora I found an RPM with Coin3.

<!--T:34-->
SoQt compiled from [http://www.coin3d.org/lib/soqt/releases/1.5.0 source] fine on Mac and Linux.

==== Debian & Ubuntu ==== <!--T:143-->

<!--T:35-->
Starting with Debian Squeeze and Ubuntu Lucid, pivy will be available directly from the official repositories, saving us a lot of hassle. In the meantime, you can either download one of the packages we made (for debian and ubuntu karmic) availables on the [[Download]] pages, or compile it yourself.

<!--T:36-->
The best way to compile pivy easily is to grab the debian source package for pivy and make a package with debuild. It is the same source code from the official pivy site, but the debian people made several bug-fixing additions. It also compiles fine on ubuntu karmic: http://packages.debian.org/squeeze/python-pivy download the .orig.gz and the .diff.gz file, then unzip both, then apply the .diff to the source: go to the unzipped pivy source folder, and apply the .diff patch:

</translate>
{{Code|code=
patch -p1 < ../pivy_0.5.0~svn765-2.diff
}}
<translate>

<!--T:37-->
then

</translate>
{{Code|code=
debuild
}}
<translate>

<!--T:38-->
to have pivy properly built into an official installable package. Then, just install the package with gdebi.

==== Other Linux distributions ==== <!--T:144-->

<!--T:39-->
First get the latest sources from the [https://github.com/coin3d/pivy project's repository]:

<!--T:167-->
Information to be added.

<!--T:40-->
As of March 2012, the latest version is Pivy-0.5.

<!--T:41-->
Then you need a tool called SWIG to generate the C++ code for the Python bindings. Pivy-0.5 reports that it has only been tested with SWIG 1.3.31, 1.3.33, 1.3.35, and 1.3.40. So you can download a source tarball for one of these old versions from [http://www.swig.org http://www.swig.org]. Then unpack it and from a command line do (as root):

</translate>
{{Code|code=
./configure
make
make install (or checkinstall if you use it)
}}
<translate>

<!--T:42-->
It takes just a few seconds to build.

<!--T:43-->
Alternatively, you can try building with a more recent SWIG. As of March 2012, a typical repository version is 2.0.4. Pivy has a minor compile problem with SWIG 2.0.4 on macOS (see below) but seems to build fine on Fedora Core 15.

<!--T:44-->
After that go to the pivy sources and call

</translate>
{{Code|code=
python setup.py build
}}
<translate>

<!--T:45-->
which creates the source files. Note that build can produce thousands of warnings, but hopefully there will be no errors.

<!--T:46-->
This is probably obsolete, but you may run into a compiler error where a 'const char*' cannot be converted in a 'char*'. To fix that you just need to write a 'const' before in the appropriate lines. There are six lines to fix.

<!--T:47-->
After that, install by issuing (as root):

</translate>
{{Code|code=
python setup.py install (or checkinstall python setup.py install)
}}
<translate>

<!--T:48-->
That's it, pivy is installed.

==== MacOS ==== <!--T:145-->

<!--T:49-->
These instructions may not be complete. Something close to this worked for OS 10.7 as of March 2012. I use MacPorts for repositories, but other options should also work.

<!--T:50-->
As for linux, get the latest source:

</translate>
{{Code|code=
hg clone http://hg.sim.no/Pivy/default Pivy
}}
<translate>

<!--T:51-->
If you don't have hg, you can get it from MacPorts:

</translate>
{{Code|code=
port install mercurial
}}
<translate>

<!--T:52-->
Then, as above you need SWIG. It should be a matter of:

</translate>
{{Code|code=
port install swig
}}
<translate>

<!--T:53-->
I found I needed also:

</translate>
{{Code|code=
port install swig-python
}}
<translate>

<!--T:54-->
As of March 2012, MacPorts SWIG is version 2.0.4. As noted above for linux, you might be better off downloading an older version. SWIG 2.0.4 seems to have a bug that stops Pivy building. See first message in this [https://sourceforge.net/mailarchive/message.php?msg_id=28114815 digest]

<!--T:55-->
This can be corrected by editing the 2 source locations to add dereferences: *arg4, *arg5 in place of arg4, arg5. Now Pivy should build:

</translate>
{{Code|code=
python setup.py build
sudo python setup.py install
}}
<translate>

==== Windows ==== <!--T:146-->

<!--T:56-->
Assuming you are using Visual Studio 2005 or later you should open a command prompt with 'Visual Studio 2005 Command prompt' from the Tools menu.
If the Python interpreter is not yet in the system path do

</translate>
{{Code|code=
set PATH=path_to_python_3.x;%PATH%
}}
<translate>

<!--T:57-->
To get pivy working you should get the latest sources from the project's repository:

<!--T:168-->
Information to be added.

<!--T:58-->
Then you need a tool called SWIG to generate the C++ code for the Python bindings. It is recommended to use version 1.3.25 of SWIG, not the latest version, because at the moment pivy will only function correctly with 1.3.25. Download the binaries for 1.3.25 from [http://www.swig.org http://www.swig.org]. Then unpack it and from the command line add it to the system path

</translate>
{{Code|code=
set PATH=path_to_swig_1.3.25;%PATH%
}}
<translate>

<!--T:59-->
and set COINDIR to the appropriate path

</translate>
{{Code|code=
set COINDIR=path_to_coin
}}
<translate>

<!--T:60-->
On Windows the pivy config file expects SoWin instead of SoQt as default. I didn't find an obvious way to build with SoQt, so I modified the file setup.py directly.
In line 200 just remove the part 'sowin': ('gui._sowin', 'sowin-config', 'pivy.gui.') (do not remove the closing parenthesis).

<!--T:61-->
After that go to the pivy sources and call

</translate>
{{Code|code=
python setup.py build
}}
<translate>

<!--T:62-->
which creates the source files. You may run into a compiler error several header files couldn't be found. In this case adjust the INCLUDE variable

</translate>
{{Code|code=
set INCLUDE=%INCLUDE%;path_to_coin_include_dir
}}
<translate>

<!--T:63-->
and if the SoQt headers are not in the same place as the Coin headers also

</translate>
{{Code|code=
set INCLUDE=%INCLUDE%;path_to_soqt_include_dir
}}
<translate>

<!--T:64-->
and finally the Qt headers

</translate>
{{Code|code=
set INCLUDE=%INCLUDE%;path_to_pyside\include\Qt
}}
<translate>

<!--T:65-->
If you are using the Express Edition of Visual Studio you may get a Python keyerror exception. In this case you have to modify a few things in msvccompiler.py located in your Python installation.

<!--T:66-->
Go to line 122 and replace the line

</translate>
{{Code|code=
vsbase = r"Software\Microsoft\VisualStudio\%0.1f" % version
}}
<translate>

<!--T:67-->
with

</translate>
{{Code|code=
vsbase = r"Software\Microsoft\VCExpress\%0.1f" % version
}}
<translate>

<!--T:68-->
Then retry again. If you get a second error like

</translate>
{{Code|code=
error: Python was built with Visual Studio 2003;...
}}
<translate>

<!--T:69-->
you must also replace line 128

</translate>
{{Code|code=
self.set_macro("FrameworkSDKDir", net, "sdkinstallrootv1.1")
}}
<translate>

<!--T:70-->
with

</translate>
{{Code|code=
self.set_macro("FrameworkSDKDir", net, "sdkinstallrootv2.0")
}}
<translate>

<!--T:71-->
Retry once again. If you get again an error like

</translate>
{{Code|code=
error: Python was built with Visual Studio version 8.0, and extensions need to be built with the same version of the compiler, but it isn't installed.
}}
<translate>

<!--T:72-->
then you should check the environment variables DISTUTILS_USE_SDK and MSSDK with

</translate>
{{Code|code=
echo %DISTUTILS_USE_SDK%
echo %MSSDK%
}}
<translate>

<!--T:73-->
If not yet set then just set it e.g. to 1

</translate>
{{Code|code=
set DISTUTILS_USE_SDK=1
set MSSDK=1
}}
<translate>

<!--T:74-->
Now, you may run into a compiler error where a 'const char*' cannot be converted in a 'char*'. To fix that you just need to write a 'const' before in the appropriate lines. There are six lines to fix. After that copy the generated pivy directory to a place where the Python interpreter in FreeCAD can find it.

=== Usage === <!--T:147-->

<!--T:75-->
To check if Pivy is correctly installed:

</translate>
{{Code|code=
import pivy
}}
<translate>

<!--T:76-->
To have Pivy access the FreeCAD scenegraph do the following:

</translate>
{{Code|code=
from pivy import coin
App.newDocument() # Open a document and a view
view = Gui.ActiveDocument.ActiveView
FCSceneGraph = view.getSceneGraph() # returns a pivy Python object that holds a SoSeparator, the main "container" of the Coin scenegraph
FCSceneGraph.addChild(coin.SoCube()) # add a box to scene
}}
<translate>

<!--T:77-->
You can now explore the FCSceneGraph with the dir() command.

=== Additonal Documentation === <!--T:148-->

<!--T:78-->
Unfortunately documentation about pivy is still almost nonexistant on the net. But you might find Coin documentation useful, since pivy simply translate Coin functions, nodes and methods in Python, everything keeps the same name and properties, keeping in mind the difference of syntax between C and Python:

<!--T:79-->
* https://github.com/coin3d/coin/wiki/Documentation - Coin3D API Reference
* http://www-evasion.imag.fr/~Francois.Faure/doc/inventorMentor/sgi_html/index.html - The Inventor Mentor - The "bible" of Inventor scene description language.

<!--T:80-->
You can also look at the Draft.py file in the FreeCAD Mod/Draft folder, since it makes big use of pivy.

== pyCollada == <!--T:149-->

<!--T:81-->
* homepage: https://pycollada.github.io
* license: BSD
* optional, needed to enable import and export of Collada (.DAE) files

<!--T:82-->
pyCollada is a Python library that allow programs to read and write [http://en.wikipedia.org/wiki/COLLADA Collada (*.DAE)] files. When pyCollada is installed on your system, FreeCAD will be able to handle importing and exporting in the Collada file format.

=== Installation === <!--T:150-->

==== Linux ==== <!--T:151-->

</translate>
{{Code|code=
sudo apt-get install python3-collada
}}
<translate>

<!--T:87-->
You can check if pycollada was correctly installed by issuing in a Python console:

</translate>
{{Code|code=
import collada
}}
<translate>

<!--T:88-->
If it returns nothing (no error message), then all is OK

==== Linux AppImages and Snaps ==== <!--T:161--> 

<!--T:162-->
Paste this code in the [[Python_console|Python console]]:

</translate>
{{Code|code=
import addonmanager_utilities as utils
import subprocess
import os

if hasattr(utils, "get_python_exe"):
    # For v0.21:
    python_exe = utils.get_python_exe()
else:
    # For v0.22/v1.0:
    from freecad.utils import get_python_exe

python_exe = get_python_exe()
vendor_path = utils.get_pip_target_directory()
if not os.path.exists(vendor_path):
    os.makedirs(vendor_path)

subprocess.run(
    [
        python_exe,
        "-m",
        "pip",
        "install",
        "--disable-pip-version-check",
        "--target",
        vendor_path,
        "pycollada",
    ],
    stdout=subprocess.PIPE,
    stderr=subprocess.PIPE,
    timeout=120,
    check=True,
)
}}
<translate>

==== Windows ==== <!--T:89-->

<!--T:90-->
On Windows since 0.15 pycollada is included in both the FreeCAD release and developer builds so no additional steps are necessary.

==== MacOS ==== <!--T:92-->

<!--T:93-->
If you are using the Homebrew build of FreeCAD you can install pycollada into your system Python using pip.

<!--T:94-->
If you need to install pip:

</translate>
{{Code|code=
$ sudo easy_install pip
}}
<translate>

<!--T:95-->
Install pycollada:

</translate>
{{Code|code=
$ sudo pip install pycollada
}}
<translate>

<!--T:96-->
If you are using a binary version of FreeCAD, you can tell pip to install pycollada into the site-packages inside FreeCAD.app:

</translate>
{{Code|code=
$ pip install --target="/Applications/FreeCAD.app/Contents/lib/python3.x/site-packages" pycollada
}}
<translate>

<!--T:126-->
or after downloading the pycollada code

</translate>
{{Code|code=
$ export PYTHONPATH=/Applications/FreeCAD\ 0.16.6706.app/Contents/lib/python3.x/site-packages:$PYTHONPATH
$ python setup.py install --prefix=/Applications/FreeCAD\ 0.2x.yyyy.app/Contents
}}
<translate>

== IfcOpenShell == <!--T:97-->

<!--T:98-->
* homepage: http://www.ifcopenshell.org
* license: LGPL
* optional, needed to extend import abilities of IFC files

<!--T:99-->
IFCOpenShell is a library currently in development, that allows to import (and soon export) [http://en.wikipedia.org/wiki/Industry_Foundation_Classes Industry foundation Classes (*.IFC)] files. IFC is an extension to the STEP format, and is becoming the standard in [http://en.wikipedia.org/wiki/Building_information_modeling BIM] workflows. When ifcopenshell is correctly installed on your system, the FreeCAD [[BIM_Workbench|BIM Workbench]] will detect it and use it to import IFC files, instead of its built-in rudimentary importer. Since ifcopenshell is based on OpenCasCade, like FreeCAD, the quality of the import is very high, producing high-quality solid geometry.

=== Installation === <!--T:153-->

==== Linux ==== <!--T:154-->

<!--T:169-->
Installation instructions can be found [https://docs.ifcopenshell.org/ifcopenshell-python/installation.html here].

<!--T:108-->
You can check that ifcopenshell was correctly installed by issuing in a Python console:

</translate>
{{Code|code=
import ifcopenshell
}}
<translate>

<!--T:109-->
If it returns nothing (no error message), then all is OK

==== Windows and macOS ==== <!--T:170-->

<!--T:171-->
IfcOpenShell is included in both the FreeCAD release and developer builds so no additional steps are necessary.

===Links=== <!--T:155-->

<!--T:121-->
Tutorial [[Import/Export_IFC_-_compiling_IfcOpenShell|Import/Export IFC - compiling IfcOpenShell]]

== LazyLoader == <!--T:157-->

<!--T:127-->
LazyLoader is a Python module that allows deferred loading, while still importing at the top of the script. This is useful if you are importing another module that is slow, and it is used several times throughout the script. Using LazyLoader can improve workbench startup times, but the module will still need to be loaded on first use.

=== Installation === <!--T:158-->

<!--T:128-->
LazyLoader is included with FreeCAD v0.19

=== Usage === <!--T:159-->

<!--T:129-->
You will need to import LazyLoader, then change the import of whatever module you want to be deferred.

<!--T:130-->
{{Code|code=
from lazy_loader.lazy_loader import LazyLoader
Part = LazyLoader('Part', globals(), 'Part')
}}
The variable Part is how the module is named in your script. You can replicate "import Part as P" by changing the variable.

<!--T:131-->
{{Code|code=
P = LazyLoader('Part', globals(), 'Part')
}}
You can also import a module from a package.
{{Code|code=
utils = LazyLoader('PathScripts', globals(), 'PathScripts.PathUtils')
}}
You can't import individual functions, just entire modules.

=== Links === <!--T:160-->

<!--T:132-->
* Original source: https://github.com/tensorflow/tensorflow/blob/master/tensorflow/python/util/lazy_loader.py
* Further explanation: https://wil.yegelwel.com/lazily-importing-python-modules/
* Code within the FreeCAD source code: https://github.com/FreeCAD/FreeCAD/tree/master/src/3rdParty/lazy_loader
* Forum discussion: https://forum.freecadweb.org/viewtopic.php?f=10&t=45298


<!--T:118-->
{{Docnav
|[[Workbench_creation|Workbench creation]]
|[[Source_documentation|Source documentation]]
}}

</translate>
{{Userdocnavi{{#translation:}}}}
[[Category:Python Code{{#translation:}}]]
[[Category:Developer Documentation{{#translation:}}]]