<languages/>
{{TOCright}}
[[Image:Power_user_hub.png|64px]]
----

Este é o local ideal para você, se for um usuário experiente e deseja aprender mais sobre como personalizar e expandir o FreeCAD.

O FreeCAD é extensível por meio de código [[Python/pt-br|Python]] que é executado diretamente no [[Python_console/pt-br|console Python]], ou carregado a partir de módulos na inicialização. Isso significa que você pode modificar o FreeCAD sem precisar recompilar o programa. Por exemplo, você pode:

* '''Criar e modificar geometria''': você pode criar um novo tipo de objeto, seja do zero ou adaptando um tipo existente.
* '''Criar ferramentas e comandos personalizados''': adicione seu próprio conjunto de ferramentas que executam seu código.
* '''Modificar a interface''': crie barras de ferramentas para adicionar suas ferramentas, crie janelas especiais, painéis ou interfaces para interagir com suas ferramentas.
* '''Modificar a representação do scenegraph''': O FreeCAD possui processos separados para construir a geometria e exibi-la na tela. Você tem acesso total à maneira como o conteúdo da cena é exibido, portanto, pode modificar essa representação, interagir com ela ou adicionar comportamentos personalizados. Também é possível adicionar widgets de tela personalizados, como informações, manipuladores, âncoras ou entidades temporárias.

<div class="mw-translate-fuzzy">
Se você gostaria de contribuir com conteúdo para essas páginas, solicite uma conta na wiki com permissões de editor [aqui no fórum](https://forum.freecadweb.org/viewtopic.php?f=21&t=6830) e leia as [[WikiPages/pt-br|Páginas da Wiki]] para as diretrizes gerais que você deve seguir. Para outras formas de contribuir com o projeto, veja a página [[Help_FreeCAD/pt-br|Ajuda FreeCAD]].
</div>

<span id="Customizing_FreeCAD"></span>
== Customizando o FreeCAD ==

* [[Interface Customization/pt-br|Personalização da Interface]]: Começando pelo básico: Barras de ferramentas e atalhos
* [[Macros/pt-br|Trabalhando com Macros]]: Grave facilmente tarefas repetidas ou código Python
* [[Macros_recipes/pt-br|Receitas de Macros]]
* [[Customize_Toolbars/pt-br|Personalizar Barras de Ferramentas]]
* [[Installing_more_workbenches/pt-br|Instalando mais Workbenches]]

<span id="Scripting_in_FreeCAD"></span>
== Programação em FreeCAD ==

<span id="General"></span>
=== Gerais ===

* [[Scripting_and_macros/pt-br|Programação e Macros]] - Uma lista de páginas relevantes do wiki
* [[Introduction_to_Python/pt-br|Introdução ao Python]] - Veja também outros tutoriais de Python no final desta página
* [[Python_scripting_tutorial/pt-br|Tutorial de Programação em FreeCAD]] - Uma visão geral sobre a programação em Python no FreeCAD
* [[FreeCAD_Scripting_Basics/pt-br|Noções Básicas de Programação no FreeCAD]]: Bem, as noções básicas
* [[Manual:A_gentle_introduction/pt-br|Manual do FreeCAD - Seção Programação em Python]]: Introdução de vários capítulos sobre a Programação em Python no FreeCAD
* [[Gui_Command/pt-br|Comando de Interface Gráfica]]: Adicionando comandos personalizados à interface gráfica
* Usando unidades mistas [[Units/pt-br|Unidades]] no FreeCAD
* [[Profiling/pt-br|Análise de Desempenho]] do código Python
* [[Debugging#Python Debugging/pt-br|Depuração]] do código Python
* [[Python_Development_Environment/pt-br|Ambiente de Desenvolvimento Python]] - Um ambiente de desenvolvimento simples para Python dentro do FreeCAD

<span id="Modules"></span>
=== Modulos ===

<div lang="en" dir="ltr" class="mw-content-ltr">
The functionality of FreeCAD is separated in Modules which deal with special data types and applications. FreeCAD has built-in modules and Extension Modules (plug-ins). Once plugin modules are installed, they become availible to you as easily as the built-in modules. The modules described below are the default modules, includeed in every FreeCAD installation.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* The [[Builtin modules|Builtin modules]] are the principal FreeCAD modules. They contain tools for manipulating general FreeCAD configurations, documents and their contents.
* [[Workbench creation|Workbench creation]] shows you how to create your own workbench
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
====Working with Meshes====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* [[Mesh Scripting|Mesh Scripting]]: How to interact with the [[Mesh_Workbench|Mesh Workbench]]
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
====Working with Parts====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* [[Part_Workbench|The Part Workbench]]: How [https://en.wikipedia.org/wiki/Open_CASCADE Open CASCADE Technology] tools and structure is used in FreeCAD
* [[Topological data scripting|Topological data scripting]]: How to interact with the Part Module
* [[PythonOCC|PythonOCC]]: How to unleash the whole Open CASCADE power
* [[Mesh to Part|Mesh to Part]]: Converting between object types
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
====Accessing the Coin scenegraph====
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* [[Scenegraph|The Coin/Inventor scenegraph]]: How the FreeCAD scene representation works
* [[Pivy|Pivy]]: How to access and modify the scenegraph
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
===Controlling the Qt interface===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* [[PySide|PySide]]: How to access the interface, and modify its contents
* [[Embedding FreeCADGui|Using the FreeCAD GUI]] in another Qt application with PyQt
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
===Working with parametric objects===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* [[Scripted_objects|Scripted objects]]: how to make 100% Python-scripted objects.
** [[Scripted_objects_with_attachment|Scripted objects with attachment]]: how to make scripted objects attachable to other objects.
** [[Scripted_objects_saving_attributes|Scripted objects saving attributes]]: how to save and restore attributes of the proxy class with {{incode|dumps}} and {{incode|loads}}.
** [[Scripted_objects_migration|Scripted objects migration]]: how to migrate old scripted objects to a new class.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
===Examples===
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* [[Code snippets|Code snippets]] : A collection of pieces of FreeCAD Python code, to serve as ingredients in your scripts...
* [[Line drawing function|Line drawing function]]: How to build a simple tool to draw lines
* [[Dialog creation|Dialog creation]]: How to construct dialogs with Qt designer, and use them in FreeCAD
* [[Embedding FreeCAD|Embedding FreeCAD]]: How to import FreeCAD as a Python module in other applications
* The [[Draft_Workbench|Draft Workbench]] adds basic 2d drawing functions to freecad. It is written entirely in Python, so it can be a good example if you want to write your own modules.
* [[FreeCAD vector math library|FreeCAD vector math library]] : A couple of handy functions to manipulate FreeCAD vectors. This library is also included in the Draft module.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== API Functions ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The complete API documentation of FreeCAD is located at https://freecad.org/api/ . It contains both C++ and Python APIs, and is not totally well formatted yet, which can be confusing when looking for python-only code. An easier to browse version can be found [[:Category:API|here]]. Note that it can be incomplete, since it is updated manually. For more accurate information, browse the modules directly from FreeCAD's Python console.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
Related: [[Exposing_C%2B%2B_to_Python|Exposing C++ to Python]]
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Advanced modification ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
* [[Start_up_and_Configuration|Start up and Configuration]]: Startup and command line options
* [[Installing_on_Windows|Installing on Windows]]: Using the windows installer
* [[Compile_on_Windows|Compiling FreeCAD on Windows]] and [[Compile_on_Linux|Compiling FreeCAD on Linux]]
* [[Branding|Branding]]: Simple modifications you can do to the source code to change some aspects of FreeCAD
* [[Extra_python_modules|Extra python modules]] : Extend the FreeCAD python interpreter with these powerful modules!
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Python tutorials ==
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
These are good generic tutorials, not specific to FreeCAD, that might interest you if you are totally new to python.
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
'''Python'''
* [https://docs.python.org/3/tutorial/index.html Official python tutorial] - A very complete tutorial for discovering python
* [https://en.wikibooks.org/wiki/Non-Programmer%27s_Tutorial_for_Python_3 Non-programmer tutorial for python] - an excellent wikibook
* [http://npt.cc.rsu.ru/user/wanderer/ODP/Python_for_Newbies.htm Python for newbies] - one big tutorial covering all the basics
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
'''PySide''' - How to create and manage FreeCAD's Qt UI interface from python
* [http://zetcode.com/gui/pysidetutorial/ PySide tutorial] : A platform-agnostic tutorial showing the usage of PySide with examples
* [http://www.pythoncentral.io/series/python-pyside-pyqt-tutorial/ PySide/PyQt tutorial] : A easy to read tutorial that covers PySide and PyQt with examples
* [http://qt-project.org/wiki/PySideDocumentation PySide documentation] : from the Qt Project (the people who wrote it all)
* [http://qt-project.org/wiki/QtCreator_and_PySide Using QtCreator in PySide] : also from the Qt Project
* [http://srinikom.github.io/pyside-docs/index.html PySide reference] : endless detail on the minutiae of PySide and Qt, a reliable reference source
* [http://nullege.com/codes/search?cq=PySide PySide code snippets] : a searchable database of PySide code snippets
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
The following two references are PyQt specific (not PySide) but may offer some information of use:
* [http://www.cs.usfca.edu/~afedosov/qttut/ Basic PyQt tutorial] : A simple and short linux-based tutorial that will explain how to work with PyQt and Qt Designer
* [http://vizzzion.org/?id=pyqt Programming Qt applications in python] : A more in-depth tutorial covering all the process of working with qt and python
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
'''Pivy''' - How to interact with FreeCAD's 3D scenes
* [http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.108.947&rep=rep1&type=pdf Pivy - Embedding a Dynamic Scripting Language into a Scene Graph Library] : Thesis that explains Pivy in detail
* [http://ftp.ntua.gr/mirror/python/pycon/dc2004/papers/47/ High Level 3D Graphics Programming in Python] : Pivy example from Pycon 2004
* [https://www.semanticscholar.org/paper/Integrating-Pivy-into-Studierstube-4.2-Gruber/08c9a89c8326c87f81c2d83428029fbfb6c2ae64 Introducing Pivy into studierstube] [https://www.researchgate.net/publication/228737136_Integrating_Pivy_into_Studierstube_42 (Mirror)] : A paper that is not really a tutorial, but that illustrates well how Pivy works (requires an academic account)
</div>

<div lang="en" dir="ltr" class="mw-content-ltr">
== Community projects ==
</div> 

<div lang="en" dir="ltr" class="mw-content-ltr">
On the [[FreeCAD Community Portal|Community portal]], you can find other FreeCAD-based projects run by the FreeCAD users community. If you are starting a new FreeCAD project, be sure to list it there! We also have a page with things you can do if you would like to [[Help FreeCAD|Help FreeCAD]].
</div>


{{Powerdocnavi{{#translation:}}}}
[[Category:Hubs{{#translation:}}]]